variables
{
	global:
		0: itemPosition
		1: itemVelocity
		2: itemCode
		3: itemEffect
		4: itemText
		5: itemControled
		6: itemProgress
		7: itemStatus
		8: itemDespawn
		9: itemLastControl
		10: itemCooker
		11: checkingIndex
		12: normal
        13: storageData
		14: createItemData
		15: creatingItemIndex
		16: cookingIndex
		17: despawnIndex
		18: ITEM_NAME
		19: ITEM_COLOR
		20: ITEM_SCORE
		21: CUTTING_NEEDED
		22: CUTTING_RESULT
		23: GRILLING_NEEDED
		24: GRILLING_RESULT
		25: FRYING_NEEDED
		26: FRYING_RESULT
		27: POT_TIME
		28: POT_RESULT
		29: PAN_NEEDED
		30: PAN_RESULT
		31: STORAGE_POSITION
		32: IMPACT_RESULT
		33: MIXING_RECIPE
		34: MIXING_RESULT
		35: FRIDGE_POSITION
		36: fridgeCode
		37: potIndex
		38: POT_POSITION
		39: potData
		40: potTime
		41: cuttingPlayer
		42: itemCount
		43: TABLE_POSITION
		44: TABLE_PATH
		45: loadingMenu
		46: spawningCustomerTable
		47: currentCustomer
		48: customerPosition
		49: customerIndex
		50: tableFilled
		51: tableOrderCode
		52: failCount
		53: tableCustomer
		54: checkingCustomerIndex
		55: checkingTableIndex
		56: stage
		57: isOpen
		58: despawnTime
		59: visibleScore
		60: systemScore
		61: globalText
		62: stageColor
		63: STAGE_NAME
		64: STAGE_CODE
		65: CUSTOMER_LIST
		66: FRIDGE_LIST
		67: MENU_LIST
		68: customerCallTime
		69: scoringIndex
		70: difficulty
		71: scoreDecrease
		72: failEnd
		73: setUpTime
		74: tx
		75: upgradeList
		76: scoringPlayer
		77: fryingPower
		78: grillingPower
		79: potPower
		80: panPower
		81: upgradePrice
		82: UPGRADE_CODE
		83: currentUpgrade
		84: KNIFE
		85: KNIFE_AMOUNT
		86: KNIFE_DECREASE
		87: orderedKnives
		88: upgradeColor
		89: fridgeRotation
		90: ALLOWED_HEROS
		91: currentMenu
		92: additionalScore
		93: totalScore
		94: RAW_MIX
		95: RAW_RESULT
		96: reservedOrder
		97: playerProgress
		98: stageScore
		99: storageLevel
		100: itemPrevPosition
		101: CUTTING_POSITION
		102: loadingMenuWeaver
		103: PERK_LIST
		104: itemDurability
		105: itemNormal
		106: loadNext
		107: isVictory
		108: superDrink
		109: HAZARD_MENU_LIST
		110: currentMenuHaz
		111: loadingMenuHaz
		112: isVipAngry
		113: stageTime
		114: UPGRADE_NAME
		115: skipSetup
		116: stageMode
		117: selectPlayer
		118: permissionText
		119: ADDITIONAL_MATERIAL_LIST
		120: WEAVER_MENU_LIST
		121: currentMenuWeaver
		122: isBonusStage
		123: hintText
		124: scbRank
		125: scbSurved
		126: MELT_LIST
        127: storageIndex

	player:
		0: controlingIndex
		1: cookingIndex
		2: cuttingAmount
		3: handPosition
		4: mixingIndex
		5: customerPath
		6: tableIndex
		7: byOrder
		8: score
		9: customerStatus
		10: customerEffect
		11: orderCount
		12: orderTimeOut
		13: playerColor
		14: customerSpeed
		15: orderedTime
		16: playerText
		17: tableText
		18: dollar
		20: durability
		21: selectedUpgrade
		22: knifeText
		23: knifeCode
		24: shaftEffect
		25: lastOrderTime
		26: scbScore
		27: cuttingIndex
		28: playerSpeed
		29: missSurveCount
		30: permission
		31: altNamePlate
		32: scbCooked
		33: scbCutted
		34: scbSurved
		35: scbMissed
		36: scbDollar
		37: itemPerk
		38: itemPerkDurability
        39: itemPerkText
        40: playerEffectStatus
        41: perkIndex
		42: progressIndex
		43: additionalMaterialIndex
		44: isController
		45: hintText
		46: svbFindIndex
		47: svbTableIndex
		48: svbPathIndex
		49: tipsProb
		50: normalDrink
}

subroutines
{
	0: itemPhysics
	1: itemCooking
	2: despawnItem
	3: pot0
	4: pot1
	5: callCustomer
	6: startStage
	7: dataInit
	8: rotatingFridge
	9: createItem
	10: selectMode
	11: dataInit2
	12: saveProgress
	13: loadProgress
	14: gameSummary
	15: knifeHud
    16: purchaseUpgrade
    17: perkHud
	18: dataInit3
	19: setHint
	20: destroyItem
	21: destroyServeBot
	22: dropTips
	23: destroyPerk
}

disabled rule("GLOBAL==========================================================================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Global: Setting")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Disable Built-In Game Mode Completion;
		Create Dummy Bot(All Heroes, Host Player, False, Null, Null);
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String(
			"______________________________________________________________________________________________________________________________〼"));
		Global.tx = String Split(First Of(Last Created Entity), Empty Array);
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String(
			"______________________________________________________________________________________________________________________________ࡀ"));
		Global.tx = String Slice(String Replace(Custom String(
			"______________________________________________________________________________________________________________________________〼"),
			Global.tx, First Of(Last Created Entity)), 126, True);
		Destroy All Dummy Bots;
		Call Subroutine(dataInit);
		Call Subroutine(dataInit2);
		Global.itemPosition = Empty Array;
		Global.itemVelocity = Empty Array;
		Global.itemCode = Empty Array;
		Global.itemEffect = Empty Array;
		Global.itemText = Empty Array;
		Global.itemControled = Empty Array;
		Global.itemProgress = Empty Array;
		Global.itemStatus = Empty Array;
		Global.itemDespawn = Empty Array;
		Global.customerPosition = Empty Array;
		Global.customerIndex = Empty Array;
		Global.playerProgress = Empty Array;
		Global.tableOrderCode = Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1);
		Global.TABLE_PATH = Array(Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(208.989, True, 195.792),
			Vector(212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(222.009, True, 184.971),
			Vector(223.481, True, 182.685), Vector(222.079, True, 181.774), Vector(219.244, True, 189.250), Vector(221.141, True, 190.510),
			Vector(214.349, True, 200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(208.989, True,
			195.792), Vector(212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(222.009, True,
			184.971), Vector(225.568, True, 179.360), Vector(224.230, 1, 178.473), Vector(219.244, True, 189.250), Vector(221.141, True,
			190.510), Vector(214.349, True, 200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(
			208.989, True, 195.792), Vector(212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(
			222.009, True, 184.971), Vector(227.739, True, 175.986), Vector(226.487, True, 175.061), Vector(219.244, 1, 189.250), Vector(
			221.141, True, 190.510), Vector(214.349, True, 200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559),
			Vector(208.989, True, 195.792), Vector(212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181),
			Vector(218.262, True, 182.700), Vector(219.831, True, 180.291), Vector(218.748, True, 179.586), Vector(218.262, True, 182.700),
			Vector(220.207, True, 187.791), Vector(219.244, True, 189.250), Vector(221.141, True, 190.510), Vector(214.349, True,
			200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(208.989, True, 195.792), Vector(
			212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(218.262, True, 182.700), Vector(
			222.010, True, 177.008), Vector(220.973, True, 176.288), Vector(218.262, True, 182.700), Vector(220.207, True, 187.791),
			Vector(219.244, True, 189.250), Vector(221.141, True, 190.510), Vector(214.349, True, 200.372)), Array(Vector(200.987, True,
			197.362), Vector(204.190, True, 192.559), Vector(208.989, True, 195.792), Vector(212.385, True, 190.614), Vector(209.842, True,
			183.840), Vector(211.701, True, 181), Vector(218.262, True, 182.700), Vector(224.166, True, 173.622), Vector(223.159, True,
			172.946), Vector(218.262, True, 182.700), Vector(220.207, True, 187.791), Vector(219.244, True, 189.250), Vector(221.141, True,
			190.510), Vector(214.349, True, 200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(
			199.370, True, 189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(
			207.347, 1, 175.935), Vector(209.066, True, 173.280), Vector(210.132, True, 173.916), Vector(207.347, True, 175.935), Vector(
			201.998, True, 176.004), Vector(201.036, True, 177.430), Vector(199.438, True, 176.441), Vector(193.083, True, 186.114)),
			Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(199.370, True, 189.455), Vector(202.923, True,
			183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(207.347, True, 175.935), Vector(211.256, True,
			169.981), Vector(212.334, True, 170.592), Vector(207.347, 1, 175.935), Vector(201.998, True, 176.004), Vector(201.036, True,
			177.430), Vector(199.438, True, 176.441), Vector(193.083, True, 186.114)), Array(Vector(200.987, True, 197.362), Vector(
			204.190, True, 192.559), Vector(199.370, True, 189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840),
			Vector(211.701, True, 181), Vector(207.347, True, 175.935), Vector(213.435, True, 166.540), Vector(214.493, True, 167.247),
			Vector(207.347, True, 175.935), Vector(201.998, True, 176.004), Vector(201.036, True, 177.430), Vector(199.438, True, 176.441),
			Vector(193.083, True, 186.114)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(199.370, True,
			189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(203.692, True,
			173.416), Vector(205.357, True, 170.869), Vector(206.777, True, 171.818), Vector(201.036, True, 177.430), Vector(199.438, True,
			176.441), Vector(193.083, True, 186.114)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(
			199.370, True, 189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(
			203.692, True, 173.416), Vector(207.703, 1, 167.399), Vector(208.911, True, 168.442), Vector(201.036, True, 177.430), Vector(
			199.438, True, 176.441), Vector(193.083, True, 186.114)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559),
			Vector(199.370, True, 189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181),
			Vector(203.692, True, 173.416), Vector(209.687, True, 164.181), Vector(211.116, True, 165.024), Vector(201.036, True, 177.430),
			Vector(199.438, True, 176.441), Vector(193.083, True, 186.114)), Array(Vector(200.948, True, 197.385), Vector(204.298, True,
			192.378), Vector(209.089, True, 195.609), Vector(212.482, True, 190.428), Vector(211.361, True, 184.273), Vector(217.183, True,
			172.578), Vector(209.024, True, 182.535), Vector(202.871, True, 184.017), Vector(199.540, True, 189.047), Vector(204.295, True,
			192.378), Vector(200.916, True, 197.370)),
				Array (
					Vector(226.255, True, 170.245),
					Vector(219.825, True, 180.305),
					Vector(226.255, True, 170.245),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(226.255, True, 170.245),
					Vector(221.945, True, 176.905),
					Vector(226.255, True, 170.245),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(226.255, True, 170.245),
					Vector(223.975, True, 173.655),
					Vector(226.255, True, 170.245),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(214.565, True, 176.645),
					Vector(216.505, True, 178.285),
					Vector(214.565, True, 176.645),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(216.615, True, 173.465),
					Vector(218.785, True, 174.915),
					Vector(216.615, True, 173.465),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(218.815, True, 170.035),
					Vector(221.025, True, 171.555),
					Vector(218.815, True, 170.035),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(214.565, True, 176.645),
					Vector(212.245, True, 175.335),
					Vector(214.565, True, 176.645),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(216.615, True, 173.465),
					Vector(214.385, True, 172.025),
					Vector(216.615, True, 173.465),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(218.815, True, 170.035),
					Vector(216.605, True, 168.605),
					Vector(218.815, True, 170.035),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(215.505, True, 162.955),
					Vector(208.865, True, 173.165),
					Vector(215.505, True, 162.955),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(215.505, True, 162.955),
					Vector(211.035, True, 169.815),
					Vector(215.505, True, 162.955),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(215.505, True, 162.955),
					Vector(213.235, True, 166.495),
					Vector(215.505, True, 162.955),
					Vector(220.86, True, 166.95)
				)
			);
		Global.TABLE_POSITION = Array(Vector(221.112, 2, 181.216), Vector(223.297, 2, 177.848), Vector(225.495, 2, 174.507), Vector(
			217.763, 2, 179.027), Vector(219.955, 2, 175.671), Vector(222.138, 2, 172.319), Vector(211.069, 2, 174.658), Vector(213.244, 2,
			171.301), Vector(215.431, 2, 167.950), Vector(207.710, 2, 172.466), Vector(209.900, 2, 169.116), Vector(212.074, 2, 165.771));
		Global.tableFilled = Mapped Array(Global.TABLE_POSITION, False);
		Global.fryingPower = 1;
		Global.grillingPower = 1;
		Global.potPower = 0;
		Global.panPower = 1;
		Global.POT_POSITION = Array(Vector(228.192, 2.200, 160.310), Vector(229.009, 2.200, 160.853));
		Global.FRIDGE_POSITION = Array(Vector(232.349, 2.850, 162.947), Vector(233.665, 2.850, 163.795), Vector(234.967, 2.850, 164.652),
			Vector(232.349, 1.750, 162.947), Vector(233.665, 1.750, 163.795), Vector(234.967, 1.750, 164.652));
		Global.CUTTING_POSITION = Array(Vector(231.369, 2, 166.183), Vector(222.109, 2, 156.602));
		Global.STORAGE_POSITION = Array(Vector(222.149, 2.045, 159.937), Vector(222.431, 2.045, 160.111), Vector(222.723, 2.045, 160.292), Vector(222.986, 2.045, 160.456), Vector(225.983, 2.045, 162.307), Vector(226.276, 2.045, 162.492), Vector(226.536, 2.045, 162.668), Vector(226.827, 2.045, 162.861));
		Global.storageData = Array(Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False));
        Global.currentUpgrade = -1;
		Global.stage = 0;
		Global.totalScore = Array(Array(0, Custom String("練習モード")), Array(5272, Custom String("Biscuits0507")), Array(0, Custom String("None")), Array(0, Custom String("None")));
		Global.permissionText = Array(Array(Custom String("シェフ"), Custom String("ホール·スタッフ"), Custom String("見習い生"), Custom String(
			"ヘッドシェフ")), Array(Color(Orange), Color(Green), Color(White), Color(Red)));
		Create In-World Text(Global.selectPlayer != Null ? Host Player : Null, Custom String("〔{0}〕 - 役職変更", Input Binding String(Button(
			Ability 2))), Global.selectPlayer + Vector(0, 2, 0), 0.900, Do Not Clip, Visible To Position and String, Color(Red),
			Visible Never);
		Create HUD Text(First Of(True), Null, Null, Custom String(
			"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), Top, 3, Null, Null, Null, None,
			Default Visibility);
		Create In-World Text(Local Player.controlingIndex == -1 ? Null : Local Player, Custom String("×"), Eye Position(Local Player)
			+ Update Every Frame(Facing Direction Of(Local Player)) * 5, 3, Do Not Clip, Visible To and Position, Color(Red),
			Default Visibility);
		Create In-World Text(Players Within Radius(Vector(228.504, 2, 160.663), 10, Team 1, Off), Custom String("鍋"), Vector(228.504,
			2.750, 160.663), 3, Do Not Clip, Visible To, Color(Violet), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(228.192, 2.200, 160.310), 10, Team 1, Off), Custom String("{0}秒",
			Global.potTime[False]), Vector(228.192, 2.200, 160.310), 2, Do Not Clip, Visible To String and Color,
			Global.potTime[False] ? Color(Red) : Color(Green), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(229.009, 2.200, 160.853), 10, Team 1, Off), Custom String("{0}秒",
			Global.potTime[True]), Vector(229.009, 2.200, 160.853), 2, Do Not Clip, Visible To String and Color,
			Global.potTime[True] ? Color(Red) : Color(Green), Default Visibility);
		Create Effect(Global.potTime[False] ? All Players(All Teams) : Null, Cloud, Color(White), Global.POT_POSITION[False], 0.400,
			Visible To);
		Create Effect(Global.potTime[True] ? All Players(All Teams) : Null, Cloud, Color(White), Global.POT_POSITION[True], 0.400,
			Visible To);
		Create In-World Text(Players Within Radius(Vector(223.583, 2, 157.286), 10, Team 1, Off), Custom String("グリル"), Vector(223.583,
			3, 157.286), 3, Do Not Clip, Visible To, Color(Orange), Default Visibility);
		Create Effect(Players Within Radius(Vector(222.641, 2, 155.415), 4, All Teams, Off), Smoke Sound, Null, Vector(222.641, 2,
			155.415), 200, Visible To);
		Create In-World Text(Players Within Radius(Vector(224.926, 2, 158.167), 10, Team 1, Off), Custom String("フライパン"), Vector(224.926,
			2.750, 158.167), 3, Do Not Clip, Visible To, Color(Red), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(233.778, 2, 167.685), 10, Team 1, Off), Custom String("流し台"), Vector(233.778,
			3, 167.685), 3, Do Not Clip, Visible To, Color(Aqua), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(233.690, 2, 163.772), 10, Team 1, Off), Custom String("冷蔵庫"), Vector(233.690,
			3.500, 163.772), 3, Do Not Clip, Visible To, Color(Sky Blue), Default Visibility);
		Create HUD Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element) + Facing Direction Of(
			Current Array Element) * 1.500, Vector(234.340, 2, 168.146)) < 1.500), Custom String("〔{0}〕:  水を流す  ", Input Binding String(
			Button(Interact))), Null, Custom String("\r\n"), Top, 6, Color(Aqua), Null, Null, Visible To and String, Default Visibility);
		Create In-World Text(Players Within Radius(Vector(231.369, 2, 166.183), 10, Team 1, Off), Custom String("まな板"), Vector(231.369,
			3, 166.183), 3, Do Not Clip, Visible To, Color(Lime Green), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(222.109, 2, 156.602), 10, Team 1, Off), Custom String("まな板"), Vector(222.109,
			3, 156.602), 3, Do Not Clip, Visible To, Color(Lime Green), Default Visibility);
		Create HUD Text(Filtered Array(All Players(Team 1), Min(Distance Between(Eye Position(Current Array Element) + Facing Direction Of(
			Current Array Element) * 1.500, Vector(231.369, 2, 166.183)), Distance Between(Eye Position(Current Array Element)
			+ Facing Direction Of(Current Array Element) * 1.500, Vector(222.109, 2, 156.602))) < 1.500),
			Local Player.knifeCode + True ? Custom String("〔{0}〕:  薄切り  ", Input Binding String(Button(Interact))) : Custom String(
			"  キッチンナイフなし  "), Null, Custom String("\r\n"), Top, 6, Local Player.knifeCode + True ? Color(Lime Green) : Color(Red), Null,
			Null, Visible To String and Color, Default Visibility);
		Create In-World Text(Players Within Radius(Vector(224.552, 2, 161.294), 10, Team 1, Off), Custom String("フライヤー"), Vector(224.552,
			3, 161.294), 3, Do Not Clip, Visible To, Color(Yellow), Default Visibility);
		Create Effect(Players Within Radius(Vector(224.552, 2, 161.294), 2.500, All Teams, Off), Energy Sound, Null, Vector(224.552, 2,
			161.294), 40, Visible To);
		For Global Variable(checkingIndex, False, 6, True);
			Create Effect(First Of(True), Sphere, Global.ITEM_COLOR[Global.fridgeCode[Evaluate Once(Global.checkingIndex)]],
				Global.FRIDGE_POSITION[Global.checkingIndex], 0.500, Color);
			Create In-World Text(Players Within Radius(Global.FRIDGE_POSITION[Evaluate Once(Global.checkingIndex)], 5, All Teams, Off),
				Global.ITEM_NAME[Global.fridgeCode[Evaluate Once(Global.checkingIndex)]], Global.FRIDGE_POSITION[Global.checkingIndex], 2,
				Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.fridgeCode[Evaluate Once(Global.checkingIndex)]],
				Default Visibility);
		End;
		Create In-World Text(Players Within Radius(Vector(214.447, 2, 155.251), 15, Team 1, Off), Custom String("〔{0}〕: ヒーロー変更",
			Input Binding String(Button(Interact))), Vector(214.447, 2, 155.251), 3, Do Not Clip, Visible To String and Color, Color(Rose),
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[0]), 4, Team 1, Off), Custom String("{0}", Global.storageData[0][0] ? Global.ITEM_NAME[Global.storageData[0][0]] : Global.storageLevel >= 0 ? Custom String("空") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[0]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[0][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[1]), 4, Team 1, Off), Custom String("{0}", Global.storageData[1][0] ? Global.ITEM_NAME[Global.storageData[1][0]] : Global.storageLevel >= 1 ? Custom String("空") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[1]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[1][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[2]), 4, Team 1, Off), Custom String("{0}", Global.storageData[2][0] ? Global.ITEM_NAME[Global.storageData[2][0]] : Global.storageLevel >= 2 ? Custom String("空") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[2]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[2][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[3]), 4, Team 1, Off), Custom String("{0}", Global.storageData[3][0] ? Global.ITEM_NAME[Global.storageData[3][0]] : Global.storageLevel >= 3 ? Custom String("空") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[3]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[3][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[4]), 4, Team 1, Off), Custom String("{0}", Global.storageData[4][0] ? Global.ITEM_NAME[Global.storageData[4][0]] : Global.storageLevel >= 4 ? Custom String("空") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[4]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[4][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[5]), 4, Team 1, Off), Custom String("{0}", Global.storageData[5][0] ? Global.ITEM_NAME[Global.storageData[5][0]] : Global.storageLevel >= 5 ? Custom String("空") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[5]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[5][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[6]), 4, Team 1, Off), Custom String("{0}", Global.storageData[6][0] ? Global.ITEM_NAME[Global.storageData[6][0]] : Global.storageLevel >= 6 ? Custom String("空") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[6]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[6][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[7]), 4, Team 1, Off), Custom String("{0}", Global.storageData[7][0] ? Global.ITEM_NAME[Global.storageData[7][0]] : Global.storageLevel >= 7 ? Custom String("空") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[7]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[7][0]],
			Default Visibility);
		Create Effect(All Players(All Teams), Light Shaft, Color(Rose), Vector(214.447, True, 155.251), True, Visible To);
		Create HUD Text(First Of(True), Null, Custom String(
			"レストラン(4ND1P) v250929\r\ndiscord&recipes : ow-restaurant.com/ja"), Null, Right, -2, Null, Custom Color(Array(255, 140, 110,
				255, 123)[Global.stageMode], Array(50, 255, 180, 120, 38)[Global.stageMode], Array(145, 180, 255, 120, 224)
				[Global.stageMode], 255), Null, String and Color, Default Visibility);
		Create HUD Text(Global.difficulty != 4 ? First Of(True) : Null, Custom String(" ${0} ", Local Player.dollar), Custom String(
			"Score : {0}{2}\r\n私の役職 : {1}", Global.totalScore[0],
			Global.permissionText[0][Local Player.permission], Global.stageMode != 4 ? Custom String("\r\nHigh Score : {0}({1})", Global.totalScore[Global.stageMode][1], Global.totalScore[Global.stageMode][0]) : Custom String("")), Custom String("{0}\r\n{1}\r\n{2}", Custom String("{0}\r\n{1}",
			Custom String("{0} 製作中のスペシャルナイフ:{1}つ", Hero Icon String(Hero(Torbjörn)), Global.orderedKnives[0] + Global.orderedKnives[1]), Custom String(
			"{0} 鍋:{1}% / フライヤー:{2}%", Hero Icon String(Hero(Junkrat)), 100 + 25 * Global.potPower, Global.fryingPower * 100)), Custom String(
			"{0} フライパン:{1}% / グリル:{2}%", Hero Icon String(Hero(Junkrat)), Global.panPower * 100, Global.grillingPower * 100),
			Custom String("{0} 移動速度:{1}% / 時間:{2}秒", Hero Icon String(Hero(Juno)), Local Player.playerSpeed, Global.stageTime)), Right, -1,
			Custom Color(46, 190, 54, 255), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Wait Until(Is True For Any(All Players(Team 1), Has Spawned(Current Array Element)), 99999);
		Global.ALLOWED_HEROS = Allowed Heroes(First Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element))));
		Start Rule(itemPhysics, Do Nothing);
		Start Rule(itemCooking, Do Nothing);
		Start Rule(despawnItem, Do Nothing);
		Global.stageMode = Workshop Setting Combo(Custom String("設定"), Custom String("調理モード"), 0, Array(Custom String("練習モード"),
			Custom String("カジュアルダイニング"), Custom String("ファインダイニング"), Custom String("マスターシェフチャレンジ"), Custom String("カスタムコース"), Custom String("ホストが選択")), 0);
		If(Global.stageMode == 5);
			Set Status(Host Player, Null, Rooted, 9999);
			Create HUD Text(All Players(Team 1), Null, Null, Custom String(
				"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), Top, -999, Null, Null, Null, Visible To,
				Default Visibility);
			Global.globalText[0] = Last Text ID;
			Create HUD Text(All Players(Team 1), Custom String(" 〔 {0} 〕 ", Array(Custom String("練習モード"),
			Custom String("カジュアルダイニング"), Custom String("ファインダイニング"), Custom String("マスターシェフチャレンジ"), Custom String("カスタムコース"))[Global.stageMode]), 
				Custom String("{0}", Array(
					Custom String("スキルを自由に磨ける練習専用モードです"),
					Custom String("5つのメニューが登場する入門レベルをクリアしましょう"),
					Custom String("すべてのメニューが登場する熟練レベルをクリアしましょう"),
					Custom String("Hell's Kitchenの過酷な試練に挑め"),
					Custom String("ワークショップの設定で、自分だけのコース料理を設定してください"))[Global.stageMode]),
				Local Player == Host Player ? Custom String("[{0}]: モード変更", Input Binding String(Button(Reload)),
				Input Binding String(Button(Jump))) : Custom String(" ホストがレベル決定中です"), Top, -998, Custom Color(Array(255, 140, 110,
				255, 123)[Global.stageMode], Array(50, 255, 180, 120, 38)[Global.stageMode], Array(145, 180, 255, 120, 224)
				[Global.stageMode], 255), Color(Yellow), Color(White), String and Color, Default Visibility);
			Global.globalText[1] = Last Text ID;
			Create HUD Text(All Players(Team 1), Null, Null, Custom String(
				"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
				Top, -997, Null, Null, Null, Visible To, Default Visibility);
			Global.globalText[2] = Last Text ID;
			Global.stageMode = 0;
			Call Subroutine(selectMode);
		End;
		Global.difficulty = Array(4, 0, 1, 1)[Global.stageMode];
		Global.storageLevel = Array(7, 3, 3, -1, 3)[Global.stageMode];
		Call Subroutine(dataInit3);
		Global.scbRank = Empty Array;
		Global.customerCallTime = Array(16, 12, 8, 4, 32)[Global.difficulty];
		Global.setUpTime = Array(120, 40, 30, 30, 120)[Global.difficulty];
		Global.failEnd = Array(5, 3, 3, 3)[Global.difficulty];
		Global.scoreDecrease = Array(Array(Null, Null, Null, Null), Array(5, Null, 5, 5), Array(15, Null, 15, 35), Array(50, Null, 50, 50))
			[Global.difficulty];
		Global.despawnTime = Array(30, 25, 20, 15, 60)[Global.difficulty];
		Global.additionalScore = Array(Null, 5, 10, 15)[Global.difficulty];
		Global.stageTime = Array(300, 300, 180, 180)[Global.difficulty];
		Global.hintText = Array(Custom String(""));
		Create Effect(All Players(Team 1), Sphere, Global.isOpen ? Color(Red) : Color(Lime Green), Vector(227.287, 2.050, 167.679), 0.250,
			Visible To and Color);
		Create In-World Text(Players Within Radius(Vector(227.287, 2.050, 167.679), 5, Team 1, Off), Custom String("〔{0}〕: 営業開始", Input Binding String(Button(Interact))), Vector(227.287, 2.050, 167.679), 2, Do Not Clip, Visible To Position String and Color,
			Global.isOpen ? Color(Red) : Color(Green), Default Visibility);
		If(Global.difficulty == 4);
			Set Objective Description(All Players(All Teams), Custom String("練習モード"), Visible To and String);
			Set Match Time(3599);
			Pause Match Time;
			Create Effect(All Players(All Teams), Sphere, Color(Sky Blue), Vector(232.608, 2.750, 170.455), 0.250, Visible To);
			Create In-World Text(Players Within Radius(Vector(232.413, 2, 170.333), 10, Team 1, Off), Custom String("{0}\r\n{1}", Custom String("〔{1}〕: モード-{0}",
				Global.stage == 3 ? Custom String("練習終了") : Global.stage == 1 ? Custom String("All") : Hero Icon String(Global.CUSTOMER_LIST[Global.stage][0]), 
				Input Binding String(Button(Interact))), Custom String("〔{1}〕: {0}", Count Of(Global.STAGE_CODE[Global.stage]) > 1 ? Custom String("フュージョン")
			: Global.STAGE_NAME[Global.totalScore[0]], Input Binding String(Button(Reload)))), Vector(232.608, 2.750, 170.455), 2, Do Not Clip, Visible To and String, Color(Sky Blue),
				Default Visibility);
			Global.totalScore[0] = Global.STAGE_CODE[Global.stage];
			Global.isOpen = False;
			Global.currentCustomer = Global.CUSTOMER_LIST[Global.stage];
			Global.currentMenu = Empty Array;
			For Global Variable(loadingMenu, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
				Modify Global Variable(currentMenu, Append To Array, Global.MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenu]]);
			End;
			Global.loadingMenu = Randomized Array(Global.currentMenu);
			Global.currentMenuHaz = Empty Array;
			For Global Variable(loadingMenuHaz, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
				Modify Global Variable(currentMenuHaz, Append To Array,
					Global.HAZARD_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuHaz]]);
			End;
			Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
			Global.currentMenuWeaver = Empty Array;
			For Global Variable(loadingMenuWeaver, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
				Modify Global Variable(currentMenuWeaver, Append To Array,
					Global.WEAVER_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuWeaver]]);
			End;
			Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
			Global.fridgeCode = Global.FRIDGE_LIST[Global.STAGE_CODE[Global.stage]];
			Global.KNIFE_DECREASE = Mapped Array(Global.KNIFE_DECREASE, Null);
			Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, 357, 100, Null);
			Call Subroutine(createItem);
		Else;
			Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, Array(354, 357, 357, 360, 64)[Global.stageMode], 100, Null);
			Call Subroutine(createItem);
			Wait(0.100, Ignore Condition);
			Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, 434, 100, Null);
			Call Subroutine(createItem);
			Start Rule(startStage, Do Nothing);
		End;
		Start Rule(rotatingFridge, Do Nothing);
		Create In-World Text(Null,
		Custom String("{0} Notice\r\n\r\nカスタムコースモードが復活しました！", Icon String(Fire)), 
		Vector(213.2373, 3, 178.7080), 1, Do Not Clip, Visible To Position String and Color,
			Color(Violet), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(206.991, 1, 188.239), 14, All Teams, Off), 
		Custom String("{0} v250929\r\n\r\n練習モードでも役職が適用されるように修正いたしました。", Ability Icon String(Hero(Torbjörn), Button(Ability 2))),
		Vector(213.2373, 2, 178.7080), 1, Do Not Clip, Visible To Position String and Color,
			Color(White), Default Visibility);
	}
}

rule("Global subroutine: Create item (position, velocity, code, cooker)")
{
	event
	{
		Subroutine;
		createItem;
	}

	actions
	{
		Global.creatingItemIndex = Index Of Array Value(Global.itemCode, -1);
		If(Global.creatingItemIndex == -1);
			Global.creatingItemIndex = Count Of(Global.itemPosition);
		End;
		Create Effect(First Of(True), Sphere, Global.ITEM_COLOR[Global.itemCode[Evaluate Once(Global.creatingItemIndex)]],
			Update Every Frame(Global.itemPosition[Evaluate Once(Global.creatingItemIndex)]), 0.500, Position Radius and Color);
		Global.itemEffect[Global.creatingItemIndex] = Last Created Entity;
		Create In-World Text(Players Within Radius(Global.itemPosition[Evaluate Once(Global.creatingItemIndex)] + Up * 0.400, 10,
			All Teams, Surfaces), Global.ITEM_NAME[Global.itemCode[Evaluate Once(Global.creatingItemIndex)]],
			Global.itemPosition[Evaluate Once(Global.creatingItemIndex)], 2, Do Not Clip, Visible To Position String and Color,
			Global.ITEM_COLOR[Global.itemCode[Evaluate Once(Global.creatingItemIndex)]], Default Visibility);
		Global.itemText[Global.creatingItemIndex] = Last Text ID;
		Global.itemPosition[Global.creatingItemIndex] = Global.createItemData[0];
		Global.itemVelocity[Global.creatingItemIndex] = Global.createItemData[1];
		Global.itemCode[Global.creatingItemIndex] = Global.createItemData[2];
		Global.itemDurability[Global.creatingItemIndex] = Null;
		Global.itemCooker[Global.creatingItemIndex] = Null;
		If(Global.createItemData[3] != Null);
			Global.itemDurability[Global.creatingItemIndex] = Global.createItemData[3];
		End;
		If(Global.createItemData[4] != Null);
			Global.itemCooker[Global.creatingItemIndex] = Global.createItemData[4];
		End;
		Global.itemControled[Global.creatingItemIndex] = False;
		Global.itemDespawn[Global.creatingItemIndex] = Null;
		Global.itemProgress[Global.creatingItemIndex] = Null;
		Global.itemCount += True;
	}
}

disabled rule("PLAYER==========================================================================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Player: Spawn")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	actions
	{
		If(Count Of(All Players(Team 1)) > 0);
			Set Slow Motion(100);
			For Player Variable(Event Player, perkIndex, False, 6, True);
                Set Move Speed(All Players(Team 1)[Event Player.perkIndex], Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(All Players(Team 1)[Event Player.perkIndex]))
				? All Players(Team 1)[Event Player.perkIndex].playerSpeed * 0.916 : All Players(Team 1)[Event Player.perkIndex].playerSpeed);
            End;
		End;
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Melee));
		Set Ultimate Ability Enabled(Event Player, False);
		Disable Hero HUD(Event Player);
		Disable Messages(Event Player);
		Event Player.controlingIndex = -1;
		Event Player.durability = 100;
		Event Player.playerSpeed = 90;
        Event Player.itemPerk = -1;
		Event Player.isController = False;
		Wait Until(Has Spawned(Event Player), 9999);
		Disable Nameplates(All Players(Team 1), All Players(Team 1));
		Event Player.permission = Event Player == Host Player ? 3 : Workshop Setting Combo(Custom String("設定"), Custom String("プレイヤー基本役職"),
			0, Array(Custom String("シェフ"), Custom String("ホール·スタッフ"), Custom String("見習い生")), 4);
		If(Slot Of(Host Player) == -1 && Count Of(Filtered Array(All Players(Team 1), Current Array Element.permission == 3)) == 0);
			Event Player.permission = 3;
		End;
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Status(Event Player, Null, Rooted, 9999);
		Set Move Speed(Event Player, Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player))
			? Event Player.playerSpeed * 0.916 : Event Player.playerSpeed);
		Create HUD Text(Event Player, Null, Null, Custom String(
			"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Left, -99, Null, Null, Null, Visible To, Default Visibility);
		Event Player.tableText[False] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Top, -98, Null, Null, Null, Visible To, Default Visibility);
		Event Player.tableText[True] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Right, -97, Null, Null, Null, Visible To, Default Visibility);
		Event Player.tableText[2] = Last Text ID;
		Start Camera(Event Player, Vector(222.559, 4.963, 164.417), Vector(222.559, 4.963, 164.417) + Direction From Angles((Evaluate Once(
			Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 30), 80);
		Create In-World Text(Event Player, Custom String("〔{0}〕 でを押してスタート", Input Binding String(Button(Jump))), Vector(222.559,
			Sine From Degrees(Min(Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 18) * 3.850, 164.417)
			+ Direction From Angles((Evaluate Once(Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 30), 2.500, Do Not Clip,
			Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 0, 255),
			Default Visibility);
		Event Player.tableText[3] = Last Text ID;
		Create In-World Text(Event Player, Custom String("レストラン"), Vector(222.559, 5.100, 164.417) + Direction From Angles((
			Evaluate Once(Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 30), 4, Do Not Clip, Visible To Position String and Color,
			Custom Color(Array(140, 110, 255, 255, 255, 60)[Global.difficulty], Array(255, 180, 225, 120, 50, 255)[Global.difficulty],
			Array(180, 255, 120, 120, 145, 255)[Global.difficulty], 255), Default Visibility);
		Event Player.tableText[4] = Last Text ID;
		Create In-World Text(Event Player, Array(Custom String("練習モード"),
			Custom String("カジュアルダイニング"), Custom String("ファインダイニング"), Custom String("マスターシェフチャレンジ"), Custom String("カスタムコース"))[Global.stageMode], Vector(222.559,
			5.100, 164.417) + Direction From Angles((Evaluate Once(Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 33.500), 1.500,
			Do Not Clip, Visible To Position String and Color, Color(Orange), Default Visibility);
		Event Player.tableText[5] = Last Text ID;
		Create In-World Text(Event Player, Custom String("GummyBear#11798\r\nMod : 변기클라우드#3523\r\nEnglish Version : HTNZ3"), Vector(
			222.559, 5.100, 164.417) + Direction From Angles((Evaluate Once(Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 38.500),
			1, Do Not Clip, Visible To Position String and Color, Color(White), Default Visibility);
		Event Player.tableText[6] = Last Text ID;
		Teleport(Event Player, Vector(206.991, 1, 188.239));
		Wait(True, Ignore Condition);
		Wait Until(Is Button Held(Event Player, Button(Jump)), 9999);
		Destroy In-World Text(Event Player.tableText[3]);
		Destroy In-World Text(Event Player.tableText[4]);
		Destroy In-World Text(Event Player.tableText[5]);
		Destroy In-World Text(Event Player.tableText[6]);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(222.559, 4.963, 164.417)), 9999, To World, None);
		Start Camera(Event Player, Eye Position(Event Player), Vector(222.559, 4.963, 164.417), 6);
		Set Invisible(Event Player, All);
		Wait(2, Ignore Condition);
		Clear Status(Event Player, Rooted);
		Stop Camera(Event Player);
		Stop Facing(Event Player);
		Wait(0.016, Ignore Condition);
		Set Invisible(Event Player, None);
		Destroy HUD Text(Event Player.tableText[False]);
		Destroy HUD Text(Event Player.tableText[True]);
		Destroy HUD Text(Event Player.tableText[2]);
		Create In-World Text(Has Spawned(Event Player) ? All Players(All Teams) : Null, Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(Event Player)),
			Global.permissionText[0][Event Player.permission], Event Player), Event Player, 1, Do Not Clip,
			Visible To Position String and Color, Global.permissionText[1][Event Player.permission], Default Visibility);
		Event Player.altNamePlate = Last Text ID;
		Call Subroutine(loadProgress);
		Call Subroutine(knifeHud);
		Call Subroutine(perkHud);
		Start Rule(saveProgress, Do Nothing);
	}
}

rule("Player: Control item")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.permission != 2;
	}

	actions
	{
		Abort If(Array Contains(Global.cuttingPlayer, Event Player));
		Event Player.controlingIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500)
			< 1.500 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 1.500))));
		If(Event Player.controlingIndex == -1);
			Abort If(Global.itemCount >= 32);
			Event Player.handPosition = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
				Event Player) * 1.500, Null, Null, False);
			Event Player.controlingIndex = Index Of Array Value(Global.FRIDGE_POSITION, First Of(Sorted Array(Filtered Array(
				Global.FRIDGE_POSITION, Distance Between(Current Array Element, Event Player.handPosition) < 1), Distance Between(
				Event Player.handPosition, Current Array Element))));
			If(Event Player.controlingIndex != -1 && Global.fridgeCode[Event Player.controlingIndex]);
				Abort If(Event Player.permission == 1 || Event Player.permission == 2);
                Global.createItemData = Array(Global.FRIDGE_POSITION[Event Player.controlingIndex], Vector(False, False, False),
                    Global.fridgeCode[Event Player.controlingIndex], Null, Null);
                Call Subroutine(createItem);
                Event Player.controlingIndex = Global.creatingItemIndex;
            Else;
                Event Player.controlingIndex = Index Of Array Value(Global.STORAGE_POSITION, First Of(Sorted Array(Filtered Array(
                    Global.STORAGE_POSITION, Distance Between(Current Array Element, Event Player.handPosition) < 1), Distance Between(
                    Event Player.handPosition, Current Array Element))));
                If(Event Player.controlingIndex != -1 && Global.storageData[Event Player.controlingIndex][0]);
                    Abort If(Event Player.permission == 1 || Event Player.permission == 2);
                    Global.createItemData = Array(Global.STORAGE_POSITION[Event Player.controlingIndex], Vector(False, False, False),
                        Global.storageData[Event Player.controlingIndex][0], Global.storageData[Event Player.controlingIndex][1], Global.storageData[Event Player.controlingIndex][3]);
                    Call Subroutine(createItem);
                    Global.itemProgress[Global.creatingItemIndex] = Global.storageData[Event Player.controlingIndex][2];
                    Global.storageData[Event Player.controlingIndex] = Array(False, False, False);
                    Event Player.controlingIndex = Global.creatingItemIndex;
                Else;
                    Event Player.controlingIndex = -1;
                    Abort;
                End;
			End;
		End;
		Global.itemControled[Event Player.controlingIndex] = True;
		Global.itemLastControl[Event Player.controlingIndex] = Event Player;
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(
			"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), Top, 5, Null, Null, Null, None,
			Default Visibility);
		Event Player.tableText[True] = Last Text ID;
		If(Array Contains(Global.KNIFE, Global.itemCode[Event Player.controlingIndex]));
			Create HUD Text(Event Player, Custom String("〔{0}〕:  セット  ", Input Binding String(Button(Interact))), Null, Custom String("\r\n"),
				Top, 4, Global.ITEM_COLOR[Global.itemCode[Event Player.controlingIndex]], Null, Null, String, Default Visibility);
			Event Player.tableText[False] = Last Text ID;
        Else If(Array Contains(Global.PERK_LIST, Global.itemCode[Event Player.controlingIndex]));
			Create HUD Text(Event Player, Custom String("〔{0}〕:  セット  ", Input Binding String(Button(Interact))), Null, Custom String("\r\n"),
				Top, 4, Global.ITEM_COLOR[Global.itemCode[Event Player.controlingIndex]], Null, Null, String, Default Visibility);
			Event Player.tableText[False] = Last Text ID;
		Else If(432 == Global.itemCode[Event Player.controlingIndex]);
			Create HUD Text(Event Player, Custom String("〔{0}〕:  GET  ", Input Binding String(Button(Interact))), Null, Custom String("\r\n"),
				Top, 4, Color(Yellow), Null, Null, String, Default Visibility);
			Event Player.tableText[False] = Last Text ID;
		Else If(Event Player.knifeCode == 3 || Event Player.knifeCode == 6);
			Create HUD Text(Event Player, Custom String("〔{0}〕:  切る  ", Input Binding String(Button(Interact))), Null, Custom String("\r\n"),
				Top, 4, Color(Lime Green), Null, Null, String, Default Visibility);
			Event Player.tableText[False] = Last Text ID;
		End;
		While(Is Button Held(Event Player, Button(Primary Fire)) && Distance Between(Global.itemPosition[Event Player.controlingIndex],
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500) < 1.500);
			Wait(0.016, Ignore Condition);
			Global.itemVelocity[Event Player.controlingIndex] = (Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 1.500 - Global.itemPosition[Event Player.controlingIndex]) * 0.400;
		End;
		Event Player.mixingIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500, Current Array Element)
			< 0.500 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 1.500))));
		If(Event Player.mixingIndex != -1);
			Event Player.cookingIndex = Index Of Array Value(Global.MIXING_RECIPE[Global.itemCode[Event Player.controlingIndex]],
				Global.itemCode[Event Player.mixingIndex]);
			If(Event Player.cookingIndex == -1);
				Global.itemDespawn[Event Player.controlingIndex] = Null;
				Global.itemControled[Event Player.controlingIndex] = False;
			Else;
				Global.itemCode[Event Player.mixingIndex] = Global.MIXING_RESULT[Global.itemCode[Event Player.controlingIndex]][Event Player.cookingIndex];
				Global.itemProgress[Event Player.mixingIndex] = Global.itemProgress[Event Player.controlingIndex] == Null && Global.itemProgress[Event Player.mixingIndex] == Null ? Null : 0.001;
				Global.itemStatus[Event Player.mixingIndex] = Null;
				Global.itemDespawn[Event Player.mixingIndex] = Null;
				Modify Global Variable At Index(itemCooker, Event Player.mixingIndex, Append To Array, Append To Array(
					Global.itemCooker[Event Player.controlingIndex], Event Player));
				Call Subroutine(destroyItem);
				Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Null, Event Player, 200);
			End;
		Else;
			Global.itemDespawn[Event Player.controlingIndex] = Null;
			Global.itemControled[Event Player.controlingIndex] = False;
		End;
		Event Player.controlingIndex = -1;
		Destroy HUD Text(Event Player.tableText[False]);
		Destroy HUD Text(Event Player.tableText[True]);
	}
}

rule("Player: Interact")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		If(Event Player.controlingIndex == -1);
			Event Player.cuttingIndex = Index Of Array Value(Global.CUTTING_POSITION, First Of(Filtered Array(Global.CUTTING_POSITION,
				Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500, Current Array Element) < 1.500)));
			If(Event Player.cuttingIndex != -1);
				Abort If(Event Player.permission == 1 || Event Player.permission == 2);
				Abort If(Global.cuttingPlayer[Event Player.cuttingIndex] != Null || Event Player.knifeCode == -1);
				Global.cuttingPlayer[Event Player.cuttingIndex] = Event Player;
				While(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Global.CUTTING_POSITION[Event Player.cuttingIndex]) < 1.500 && Is Button Held(Event Player, Button(Interact)));
					Event Player.cookingIndex = Filtered Array(Mapped Array(Global.itemPosition, Distance Between(Current Array Element,
						Global.CUTTING_POSITION[Event Player.cuttingIndex]) < 1 ? Current Array Index : -1), Current Array Element != -1);
					If(Event Player.cookingIndex != Empty Array);
						Event Player.cuttingAmount = Global.KNIFE_AMOUNT[Event Player.knifeCode] * (Event Player.durability / 200 + 0.500);
						While(Event Player.cookingIndex != Empty Array);
							Global.itemVelocity[Event Player.cookingIndex] += Direction From Angles(Random Integer(False, 360), False) * 0.010 + Up * (
								0.020 + 0.025 / Event Player.cuttingAmount);
							Global.itemDespawn[Event Player.cookingIndex] = Null;
							If(Global.itemStatus[Event Player.cookingIndex] == 1);
								Global.itemProgress[Event Player.cookingIndex] += Event Player.cuttingAmount;
							Else;
								Global.itemStatus[Event Player.cookingIndex] = 1;
								Global.itemProgress[Event Player.cookingIndex] = Event Player.cuttingAmount;
							End;
							If(Global.itemProgress[Event Player.cookingIndex] >= Global.CUTTING_NEEDED[Global.itemCode[Event Player.cookingIndex]]);
								If(!Count Of(Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]]));
									Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null,
										Global.CUTTING_POSITION[Event Player.cuttingIndex], 200);
									Modify Global Variable At Index(itemCooker, Event Player.cookingIndex, Append To Array, Event Player);
									Global.itemCode[Event Player.cookingIndex] = Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]];
									Global.itemProgress[Event Player.cookingIndex] = Null;
								Else If(Global.itemCount + Count Of(Global.CUTTING_RESULT[Event Player.cookingIndex]) < 32);
									Global.createItemData = Array(Global.itemPosition[Event Player.cookingIndex], Direction From Angles(Random Integer(False, 360),
										False) * 0.010 + Up * (0.020 + 0.025 / Event Player.cuttingAmount), Last Of(Global.CUTTING_RESULT[Global.itemCode[First Of(
										Event Player.cookingIndex)]]), Null, Null);
									Call Subroutine(createItem);
									Global.itemCode[Event Player.cookingIndex] = First Of(Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]]);
									Global.itemProgress[Event Player.cookingIndex] = Null;
									Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null,
										Global.CUTTING_POSITION[Event Player.cuttingIndex], 200);
									Modify Global Variable At Index(itemCooker, Event Player.cookingIndex, Append To Array, Event Player);
								End;
							End;
							Modify Player Variable(Event Player, cookingIndex, Remove From Array By Index, False);
							Event Player.durability -= Global.KNIFE_DECREASE[Event Player.knifeCode];
							If(Event Player.durability <= 0);
								Event Player.knifeCode = -1;
								Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Null, Global.CUTTING_POSITION[Event Player.cuttingIndex],
									100);
								Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null,
									Global.CUTTING_POSITION[Event Player.cuttingIndex], 75);
								Play Effect(Event Player, Bad Explosion, Color(Red), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
									False);
								Destroy HUD Text(Event Player.knifeText);
								Global.cuttingPlayer[Event Player.cuttingIndex] = Null;
								Abort;
							End;
						End;
						Play Effect(All Players(All Teams), Good Explosion, Color(White), Global.CUTTING_POSITION[Event Player.cuttingIndex], True);
						Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null,
							Global.CUTTING_POSITION[Event Player.cuttingIndex], 75);
						Event Player.scbCutted += 1;
					End;
					Wait Until(!Is Button Held(Event Player, Button(Interact)),
						Event Player.normalDrink ? 0.250 : Event Player.knifeCode == 2 ? 0.400 : 0.500);
					If(!Is Button Held(Event Player, Button(Interact)));
						Break;
					End;
				End;
				Global.cuttingPlayer[Event Player.cuttingIndex] = Null;
				Wait(Event Player.knifeCode == 5 ? 0.010 : 0.400, Ignore Condition);
			Else If(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500, Vector(234.340, 2, 168.146))
					< 1.500);
				Event Player.cookingIndex = Filtered Array(Mapped Array(Global.itemPosition, Distance Between(Current Array Element, Vector(
					233.911, 1.821, 167.590)) < 0.500 ? Current Array Index : -1), Current Array Element != -1);
				If(Event Player.cookingIndex != Empty Array);
					While(Event Player.cookingIndex != Empty Array);
						Destroy Effect(Global.itemEffect[Event Player.cookingIndex]);
						Destroy In-World Text(Global.itemText[Event Player.cookingIndex]);
						Wait(0.016, Ignore Condition);
						Global.itemPosition[Event Player.cookingIndex] = Down;
						Global.itemVelocity[Event Player.cookingIndex] = Null;
						Global.itemCode[Event Player.cookingIndex] = -1;
						Global.itemCount -= True;
						Modify Player Variable(Event Player, cookingIndex, Remove From Array By Index, False);
					End;
					Play Effect(All Players(All Teams), Good Explosion, Color(Aqua), Vector(233.911, 1.821, 167.590), True);
					Play Effect(All Players(All Teams), Brigitte Whip Shot Heal Area Sound, Null, Vector(233.911, 1.821, 167.590), 100);
				End;
			Else If(Global.currentUpgrade != -1 && Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(217.370, 2, 172.520)) < 1.500);
				If(Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade] > Event Player.dollar);
					Play Effect(Event Player, Explosion Sound, Null, Vector(217.370, 2, 172.520), 50);
					Small Message(Event Player, Custom String("  $ お金が足りません。"));
					Wait(True, Ignore Condition);
				Else;
					Event Player.dollar -= Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade];
					Event Player.scbScore += Round To Integer(Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade] / 20, Down);
					If(Global.currentUpgrade);
						Call Subroutine(purchaseUpgrade);
					Else;
						If(Event Player.selectedUpgrade == 2);
							Small Message(Event Player, Custom String("  伝説包丁ガチャ -${0}", Global.upgradePrice[Global.currentUpgrade][2]));
							Small Message(Event Player, Custom String("  次は商人が包丁を持ってくるよ。 "));
							Global.orderedKnives[1] += True;
						Else If(Event Player.selectedUpgrade == 1);
							Small Message(Event Player, Custom String("  特製包丁ガチャ -${0}", Global.upgradePrice[Global.currentUpgrade][1]));
							Small Message(Event Player, Custom String("  次は商人が包丁を持ってくるよ。 "));
							Global.orderedKnives[0] += True;
						Else;
							Abort If(Global.itemCount == 32);
							Small Message(Event Player, Custom String("  {0} 購入 -${1}",
								Global.ITEM_NAME[Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade]],
								Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade]));
							Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
								-70)) * 0.100, Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade], 100, Null);
							Call Subroutine(createItem);
						End;
					End;
					Set Move Speed(Event Player, Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player))
					? Event Player.playerSpeed * 0.916 : Event Player.playerSpeed);
					All Players(Team 2).customerStatus = 1;
					Play Effect(All Players(All Teams), Buff Impact Sound, Null, Vector(217.370, 2, 172.520), 100);
					Play Effect(All Players(All Teams), Good Pickup Effect, Global.upgradeColor[Event Player.selectedUpgrade], Vector(217.370, 2,
						172.520), 2);
				End;
			Else If(Distance Between(Position Of(Event Player), Vector(215.343, True, 155.834)) < 1);
				Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero Of(Event Player)));
				Wait(0.016, Ignore Condition);
				Set Player Allowed Heroes(Event Player, Global.ALLOWED_HEROS);
				Wait Until(Has Spawned(Event Player), 99999);
				Teleport(Event Player, Vector(215.343, True, 155.834));
				Wait(False, Ignore Condition);
				Set Facing(Event Player, Vector(0.830, False, 0.560), To World);
				Set Move Speed(Event Player, Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player))
					? Event Player.playerSpeed * 0.916 : Event Player.playerSpeed);
			Else If(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(232.608, 2.750, 170.455)) < 1 && Global.difficulty == 4 && Global.isOpen == False);
				Global.stage = (Global.stage + True) % Count Of(Global.STAGE_CODE);
				Global.totalScore[0] = Global.STAGE_CODE[Global.stage];
				Global.currentCustomer = Global.CUSTOMER_LIST[Global.stage];
				Global.currentMenu = Empty Array;
				For Global Variable(loadingMenu, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
					Modify Global Variable(currentMenu, Append To Array, Global.MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenu]]);
				End;
				Global.loadingMenu = Randomized Array(Global.currentMenu);
				Global.currentMenuHaz = Empty Array;
				For Global Variable(loadingMenuHaz, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
					Modify Global Variable(currentMenuHaz, Append To Array,
						Global.HAZARD_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuHaz]]);
				End;
				Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
				Global.currentMenuWeaver = Empty Array;
				For Global Variable(loadingMenuWeaver, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
					Modify Global Variable(currentMenuWeaver, Append To Array,
						Global.WEAVER_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuWeaver]]);
				End;
				Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
				Global.fridgeCode = Global.FRIDGE_LIST[Global.STAGE_CODE[Global.stage]];
			Else If(Event Player.permission == 3 && Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(227.287, 2.050, 167.679)) < 1 && Global.difficulty != 4 && Global.isOpen == False && Match Time > 3);
				Small Message(All Players(All Teams), Custom String("  準備時間をスキップします! "));
				Communicate(Event Player, Countdown);
				Set Match Time(3);
				Wait(3, Ignore Condition);
				Global.skipSetup = True;
			Else If(Event Player.permission != 3 && Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(227.287, 2.050, 167.679)) < 1 && Global.difficulty != 4 && Global.isOpen == False && Match Time > 3);
				Small Message(All Players(All Teams), Custom String("  {0}{1} さんがゲームの開始を提案しました！(ヘッドシェフは準備時間をスキップできます)  ", Hero Icon String(Hero Of(Event Player)), Event Player));
				Communicate(Event Player, Press the Attack);
				Wait(0.75, Ignore Condition);
			Else If(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(227.287, 2.050, 167.679)) < 1 && Global.difficulty == 4);
				If(Event Player.permission != 3 && Global.isOpen);
					Small Message(All Players(All Teams), Custom String("  {0}{1} さんが練習の中止を提案しました！ ", Hero Icon String(Hero Of(Event Player)), Event Player));
					Communicate(Event Player, Ready);
					Wait(0.75, Ignore Condition);
				Else If(Event Player.permission == 3 && Global.isOpen);
					Global.isOpen = False;
					Small Message(All Players(All Teams), Custom String("  一時開業終了! "));
					Destroy HUD Text(Global.globalText[True]);
					All Players(Team 2).customerStatus = -1;
					Wait(1.5, Ignore Condition);
				Else;
					If(Event Player.permission != 3 && Global.stage == 3);
						Small Message(All Players(All Teams), Custom String("  {0}{1} さんがゲームの開始を提案しました！ ", Hero Icon String(Hero Of(Event Player)), Event Player));
						Communicate(Event Player, Ready);
						Wait(0.75, Ignore Condition);
					Else If(Event Player.permission == 3 && Global.stage == 3);
						Small Message(All Players(All Teams), Custom String("  まもなくゲームを開始します！ "));
						Communicate(Event Player, Countdown);
						Set Match Time(3);
						Wait(3, Ignore Condition);
						Communicate(All Players(Team 1), Go);
						Restart Match;
					Else;
						If(Event Player.permission == 3);
							Global.isOpen = True;
							Small Message(All Players(All Teams), Custom String("  一時オープン！ いよいよ本番です！ "));
							Create HUD Text(All Players(All Teams), Custom String("　　　　　注文書　　　　　"), Null, Custom String(
								"\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
								Left, False, Color(Yellow), Null, Null, Visible To and Color, Default Visibility);
							Global.globalText[True] = Last Text ID;
							Wait(0.016, Ignore Condition);
							Start Rule(callCustomer, Restart Rule);
						Else;
							Small Message(All Players(All Teams), Custom String("  {0}{1} さんが練習の開始を提案しました！ ", Hero Icon String(Hero Of(Event Player)), Event Player));
							Communicate(Event Player, Press the Attack);
							Wait(0.75, Ignore Condition);
						End;
					End;
				End;
			End;
		Else If(Array Contains(Global.KNIFE, Global.itemCode[Event Player.controlingIndex]) && Event Player.durability <= 100);
			If(Event Player.knifeCode + True);
				Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
					Global.KNIFE[Event Player.knifeCode], Event Player.durability, Null);
				Call Subroutine(createItem);
			End;
			Event Player.knifeCode = Index Of Array Value(Global.KNIFE, Global.itemCode[Event Player.controlingIndex]);
			Event Player.durability = Global.itemDurability[Event Player.controlingIndex];
			Destroy HUD Text(Event Player.knifeText);
			Call Subroutine(knifeHud);
			Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Eye Position(Event Player), 100);
			Call Subroutine(destroyItem);
			Wait(1.000, Ignore Condition);
        Else If(Array Contains(Global.PERK_LIST, Global.itemCode[Event Player.controlingIndex]));
			If(Event Player.itemPerk + True);
				Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
					Global.PERK_LIST[Event Player.itemPerk], Event Player.itemPerkDurability, Null);
				Call Subroutine(createItem);
			End;
			Event Player.itemPerk = Index Of Array Value(Global.PERK_LIST, Global.itemCode[Event Player.controlingIndex]);
			Event Player.itemPerkDurability = Global.itemDurability[Event Player.controlingIndex];
			Destroy HUD Text(Event Player.itemPerkText);
			Call Subroutine(perkHud);
			Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Eye Position(Event Player), 100);
			Call Subroutine(destroyItem);
			Wait(1.000, Ignore Condition);
		Else If(432 == Global.itemCode[Event Player.controlingIndex]);
			Event Player.dollar += 100;
			Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Eye Position(Event Player), 100);
			Call Subroutine(destroyItem);
			Wait(1.000, Ignore Condition);
		Else If(Event Player.knifeCode == 3 || Event Player.knifeCode == 6);
			Abort If(Event Player.permission == 1 || Event Player.permission == 2);
			Event Player.cuttingAmount = Global.KNIFE_AMOUNT[Event Player.knifeCode] * (Event Player.durability / 200 + 0.500);
			While(Is Button Held(Event Player, Button(Interact)));
				Event Player.cookingIndex = Event Player.controlingIndex;
				If(Global.itemStatus[Event Player.cookingIndex] == 1);
					Global.itemProgress[Event Player.cookingIndex] += Event Player.cuttingAmount;
				Else;
					Global.itemStatus[Event Player.cookingIndex] = 1;
					Global.itemProgress[Event Player.cookingIndex] = Event Player.cuttingAmount;
				End;
				If(Global.itemProgress[Event Player.cookingIndex] >= Global.CUTTING_NEEDED[Global.itemCode[Event Player.cookingIndex]]);
					If(Count Of(Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]]) == False);
						Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(
							Event Player) * 1.500, 200);
						Modify Global Variable At Index(itemCooker, Event Player.cookingIndex, Append To Array, Event Player);
						Global.itemCode[Event Player.cookingIndex] = Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]];
						Global.itemProgress[Event Player.cookingIndex] = Null;
					Else If(Global.itemCount + Count Of(Global.CUTTING_RESULT[Event Player.cookingIndex]) < 32);
						Global.createItemData = Array(Global.itemPosition[First Of(Event Player.cookingIndex)], Direction From Angles(Random Integer(False,
							360), False) * 0.010 + Up * (0.020 + 0.025 / Event Player.cuttingAmount), Last Of(
							Global.CUTTING_RESULT[Global.itemCode[First Of(Event Player.cookingIndex)]]), Null, Null);
						Call Subroutine(createItem);
						Global.itemCode[Event Player.cookingIndex] = First Of(Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]]);
						Global.itemProgress[Event Player.cookingIndex] = Null;
						Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(
							Event Player) * 1.500, 200);
						Modify Global Variable At Index(itemCooker, Event Player.cookingIndex, Append To Array, Event Player);
					End;
				End;
				Modify Player Variable(Event Player, cookingIndex, Remove From Array By Index, False);
				Event Player.durability -= Global.KNIFE_DECREASE[Event Player.knifeCode];
				If(Event Player.durability <= 0);
					Event Player.knifeCode = -1;
					Play Effect(Event Player, Bastion Tank Cannon Explosion Sound, Null, Eye Position(Event Player) + Facing Direction Of(Event Player)
						* 1.500, 100);
					Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(
						Event Player) * 1.500, 75);
					Play Effect(Event Player, Bad Explosion, Color(Red), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
						False);
					Destroy HUD Text(Event Player.knifeText);
					Abort;
				End;
				Play Effect(All Players(All Teams), Good Explosion, Color(White), Eye Position(Event Player) + Facing Direction Of(Event Player)
					* 1.500, True);
				Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(
					Event Player) * 1.500, 75);
				Event Player.scbCutted += 1;
				Wait(0.500, Ignore Condition);
			End;
		End;
	}
}

rule("Player subroutine: destroy item")
{
	event
	{
		Subroutine;
		destroyItem;
	}

	actions
	{
		Destroy Effect(Global.itemEffect[Event Player.controlingIndex]);
		Destroy In-World Text(Global.itemText[Event Player.controlingIndex]);
		Wait(0.016, Ignore Condition);
		Global.itemPosition[Event Player.controlingIndex] = Down;
		Global.itemVelocity[Event Player.controlingIndex] = Null;
		Global.itemCode[Event Player.controlingIndex] = -1;
		Global.itemCount -= 1;
	}
}

rule("Player subroutine: destroy perk")
{
	event
	{
		Subroutine;
		destroyPerk;
	}

	actions
	{
		If(Event Player.itemPerkDurability <= 0);
			Event Player.itemPerk = -1;
			Destroy HUD Text(Event Player.itemPerkText);
		End;
	}
}

rule("Player: Reload button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		If(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(232.608, 2.750, 170.455)) < 1 && Global.difficulty == 4 && Global.isOpen == False && Count Of(Global.STAGE_CODE[Global.stage]) <= 1);
			Global.totalScore[0] = (Global.totalScore[0] + True) % Count Of(Global.FRIDGE_LIST);
			Global.currentMenu = Empty Array;
			Modify Global Variable(currentMenu, Append To Array, Global.MENU_LIST[Global.totalScore[0]]);
			Global.loadingMenu = Randomized Array(Global.currentMenu);
			Global.currentMenuHaz = Empty Array;
			Modify Global Variable(currentMenuHaz, Append To Array,
					Global.HAZARD_MENU_LIST[Global.totalScore[0]]);
			Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
			Global.currentMenuWeaver = Empty Array;
			Modify Global Variable(currentMenuWeaver, Append To Array,
					Global.WEAVER_MENU_LIST[Global.totalScore[0]]);
			Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
			Global.fridgeCode = Global.FRIDGE_LIST[Global.totalScore[0]];
		End;
		Abort If(Event Player.controlingIndex + True);
		If(Global.currentUpgrade + True && Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500, Vector(
			217.370, 2, 172.520)) < 1.500);
			Event Player.selectedUpgrade = (Event Player.selectedUpgrade + True) % Count Of(Global.upgradePrice[Global.currentUpgrade]);
		Else;
		Abort If(Global.setUpTime <= 0);
		Wait(0.2, Abort When False);
		If(Event Player.itemPerk + True);
			Small Message(Event Player, Custom String("  長押しするとアイテムを置きます "));
			Wait(2, Abort When False);
			Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
				Global.PERK_LIST[Event Player.itemPerk], Event Player.itemPerkDurability, Null);
			Call Subroutine(createItem);
			Destroy HUD Text(Event Player.itemPerkText);
			Event Player.itemPerk = -1;
		Else If(Event Player.knifeCode + True && Event Player.durability <= 100);
			Small Message(Event Player, Custom String("  長押しするとナイフを置きます "));
			Wait(2, Abort When False);
			Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
				Global.KNIFE[Event Player.knifeCode], Event Player.durability, Null);
			Call Subroutine(createItem);
			Destroy HUD Text(Event Player.knifeText);
			Event Player.knifeCode = -1;
		End;
		Abort If(Custom String("{0}", Event Player) != Custom String("변기클라우드"));
		Wait(True, Abort When False);
		Small Message(Event Player, Custom String("keep press to outdate warning"));
		Wait(2, Abort When False);
		Create HUD Text(All Players(All Teams), Icon String(Warning), Custom String("アップデート 必要! - コード : 4ND1P"), Custom String("バグ修正や追加アップデートを適用するには\r\n上記のコードを使ってゲームを再読み込みしてください。"), Top,
							2.5, Color(Red), Color(Yellow), Color(White), Visible To and String,
							Default Visibility);
	}
}

rule("Player: Secondary fire button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Event Player.controlingIndex == -1;
	}

	actions
	{
		Event Player.controlingIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500)
			< 1.500 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 1.500))));
		If(Event Player.itemPerk == 4);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Gray), Eye Position(Event Player) + Facing Direction Of(Event Player)* 3, 0.01);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Gray), Global.itemPosition[Event Player.controlingIndex], 0.01);
			Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Null, Eye Position(Event Player) + Facing Direction Of(Event Player)* 1.500, 50);
			If(Event Player.controlingIndex != -1);
				Call Subroutine(destroyItem);
			End;
			Event Player.controlingIndex = -1;
			Event Player.itemPerkDurability -= 0.5;
			Call Subroutine(destroyPerk);
		Else If(Event Player.itemPerk == 8);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Eye Position(Event Player) + Facing Direction Of(Event Player)* 3, 1);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Global.itemPosition[Event Player.controlingIndex], 1);
			Play Effect(All Players(All Teams), Reinhardt Fire Strike Target Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(Event Player)* 3, 100);
            If(Event Player.controlingIndex != -1);
                If(Global.itemStatus[Event Player.controlingIndex] == 3);
					Global.itemProgress[Event Player.controlingIndex] += Global.superDrink == 6 ? 10 : 1;
				Else;
					Global.itemStatus[Event Player.controlingIndex] = 3;
					Global.itemProgress[Event Player.controlingIndex] = Global.superDrink == 6 ? 10 : 1;
				End;
				If(Global.itemProgress[Event Player.controlingIndex] >= Global.GRILLING_NEEDED[Global.itemCode[Event Player.controlingIndex]]);
					Global.itemCode[Event Player.controlingIndex] = Global.GRILLING_RESULT[Global.itemCode[Event Player.controlingIndex]];
					Global.itemProgress[Event Player.controlingIndex] = Null;
					Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Null, Global.itemPosition[Event Player.controlingIndex], 50);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Global.itemPosition[Event Player.controlingIndex], 0.500);
					Global.itemVelocity[Event Player.controlingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.005 + Vector(False, 0.075, False);
					Modify Global Variable At Index(itemCooker, Event Player.controlingIndex, Append To Array, Global.itemLastControl[Event Player.controlingIndex]);
				End;
            End;
			Event Player.controlingIndex = -1;
			Event Player.itemPerkDurability -= 1;
			Call Subroutine(destroyPerk);
			Wait(0.300, Ignore Condition);
		End;
		Wait(0.050, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("Player: Ultimate button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
        Event Player.itemPerk != -1;
	}

	actions
	{
        If(Event Player.itemPerk == 0);
            Small Message(Event Player, Custom String("  100秒間、速度アップ!  "));
            Destroy HUD Text(Event Player.itemPerkText);
            Event Player.itemPerk = -1;
            Set Move Speed(Event Player, 150);
            Play Effect(All Players(All Teams), Good Explosion, Color(Green), Eye Position(Event Player), 2);
            Play Effect(Event Player, Ana Biotic Grenade Increased Healing Sound, Null, Eye Position(Event Player), 100);
            Event Player.normalDrink = True;
            Wait(100, Ignore Condition);
            Set Move Speed(Event Player, Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player))
			? Event Player.playerSpeed * 0.916 : Event Player.playerSpeed);
			Event Player.normalDrink = False;
        Else If(Event Player.itemPerk == 1);
			Destroy HUD Text(Event Player.itemPerkText);
			Event Player.itemPerk = -1;
			Play Effect(All Players(All Teams), Good Explosion, Color(Violet), Eye Position(Event Player), 2);
			Play Effect(All Players(All Teams), Ana Biotic Grenade Increased Healing Sound, Color(Green), Eye Position(Event Player), 2);
            Global.superDrink = -1;
        Else If(Event Player.itemPerk == 3);
            If(Event Player.controlingIndex != -1);
                Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Global.itemPosition[Event Player.controlingIndex], 2);
                Play Effect(All Players(All Teams), Heal Target Active Effect, Null, Global.itemPosition[Event Player.controlingIndex], 2);
                Global.itemProgress[Event Player.controlingIndex] = 0;
                Event Player.itemPerkDurability -= 5;
                Call Subroutine(destroyPerk);
            End;
        Else If(Event Player.itemPerk == 7);
            If(Event Player.controlingIndex != -1 && !Array Contains(Array(61, 62, 63, 64, 65, 265, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 432, 433, 434), Global.itemCode[Event Player.controlingIndex]));
                Play Effect(All Players(All Teams), Good Explosion, Color(Rose), Global.itemPosition[Event Player.controlingIndex], 2);
                Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Global.itemPosition[Event Player.controlingIndex], 2);
                Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
                    Global.itemCode[Event Player.controlingIndex], Global.itemDurability[Event Player.controlingIndex], Global.itemCooker[Event Player.controlingIndex]);
                Call Subroutine(createItem);
				Global.itemStatus[Global.creatingItemIndex] = Global.itemStatus[Event Player.controlingIndex];
				Global.itemProgress[Global.creatingItemIndex] = Global.itemProgress[Event Player.controlingIndex];
                Event Player.itemPerkDurability -= 20;
                Call Subroutine(destroyPerk);
            End;
        Else If(Event Player.itemPerk == 8);
            If(Event Player.controlingIndex != -1);
                Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Global.itemPosition[Event Player.controlingIndex], 1);
                Play Effect(All Players(All Teams), Reinhardt Fire Strike Target Impact Sound, Null, Global.itemPosition[Event Player.controlingIndex], 100);
                If(Global.itemStatus[Event Player.controlingIndex] == 3);
					Global.itemProgress[Event Player.controlingIndex] += 1;
				Else;
					Global.itemStatus[Event Player.controlingIndex] = 3;
					Global.itemProgress[Event Player.controlingIndex] = 1;
				End;
				If(Global.itemProgress[Event Player.controlingIndex] >= Global.GRILLING_NEEDED[Global.itemCode[Event Player.controlingIndex]]);
					Global.itemCode[Event Player.controlingIndex] = Global.GRILLING_RESULT[Global.itemCode[Event Player.controlingIndex]];
					Global.itemProgress[Event Player.controlingIndex] = Null;
					Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Null, Global.itemPosition[Event Player.controlingIndex], 50);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Global.itemPosition[Event Player.controlingIndex], 0.500);
					Modify Global Variable At Index(itemCooker, Event Player.controlingIndex, Append To Array, Global.itemLastControl[Event Player.controlingIndex]);
				End;
                Event Player.itemPerkDurability -= 1;
                Call Subroutine(destroyPerk);
            End;
		Else If(Event Player.itemPerk == 9);
			Play Effect(All Players(All Teams), Good Explosion, Color(Rose), Event Player, 2);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Event Player, 2);
			Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
				Array(420, 424, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431)[Random Value In Array(Global.STAGE_CODE[Global.stage])], Global.itemDurability[Event Player.controlingIndex], Global.itemCooker[Event Player.controlingIndex]);
			Call Subroutine(createItem);
			Wait(0.100, Ignore Condition);
			Call Subroutine(createItem);
			Wait(0.100, Ignore Condition);
			Call Subroutine(createItem);
			Global.itemStatus[Global.creatingItemIndex] = Global.itemStatus[Event Player.controlingIndex];
			Global.itemProgress[Global.creatingItemIndex] = Global.itemProgress[Event Player.controlingIndex];
			Destroy HUD Text(Event Player.itemPerkText);
			Event Player.itemPerk = -1;
		Else If(Event Player.itemPerk == 10 && Count Of(All Players(Team 1)) < 6);
			Play Effect(All Players(All Teams), Good Explosion, Color(Orange), Event Player, 2);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Event Player, 2);
			Create Dummy Bot(Hero(Wrecking Ball), Team 1, 6, Vector(220.86, 10.40, 166.95), Null);
			Small Message(All Players(All Teams), Custom String("  {1}{0}がサービングボールを召喚しました！", Event Player, Hero Icon String(Hero Of(Event Player))));
			Global.itemStatus[Global.creatingItemIndex] = Global.itemStatus[Event Player.controlingIndex];
			Global.itemProgress[Global.creatingItemIndex] = Global.itemProgress[Event Player.controlingIndex];
			Destroy HUD Text(Event Player.itemPerkText);
			Event Player.itemPerk = -1;
        End;	
	}
}

rule("Player: Authorize Controller")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Event Player.isController == False;
	}

	actions
	{
		Small Message(Event Player, Custom String("  むんげ（潰す）動作をボタンに置き換えるには、スティックを前方にゆっくり動かしてください！ "));
		Wait Until(Z Component Of(Throttle Of(Event Player)) < 0.730 && 
			Z Component Of(Throttle Of(Event Player)) > 0.200, 3);
		If(Z Component Of(Throttle Of(Event Player)) < 0.730 && Z Component Of(Throttle Of(Event Player)) > 0.200);
			Event Player.isController = True;
			Small Message(Event Player, Custom String("  これで[{0}]キーで材料を潰すことができます！ ", Input Binding String(Button(Melee))));
			Create HUD Text(Event Player, Ability Icon String(Hero(Doomfist), Button(Primary Fire)), Custom String("材料潰し"), Custom String("〔{0}〕", Input Binding String(Button(Melee))), Right, True, Color(Gray), Color(Gray), Color(White),
                String and Color, Default Visibility);
		End;
		Wait(3, Ignore Condition);
	}
}

rule("Player: Melee button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
        Event Player.controlingIndex == -1;
		Event Player.isController == True;
	}

	actions
	{
		Event Player.controlingIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500)
			< 1.500 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 1.500))));
		If(Event Player.controlingIndex != -1);
			Play Effect(All Players(All Teams), Bad Explosion, Global.ITEM_COLOR[Global.itemCode[Event Player.controlingIndex]],
				Global.itemPosition[Event Player.controlingIndex], 0.5);
			Play Effect(All Players(All Teams), Junkrat Frag Launcher Explosion Sound, Null, Global.itemPosition[Event Player.controlingIndex], 45);
			Global.itemVelocity[Event Player.controlingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.115 - Vector(False, 0.245, False);
			Event Player.controlingIndex = -1;
		End;
		Wait(1.000, Ignore Condition);
    }
}

rule("Player: Left match")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		Global.itemControled = Mapped Array(Global.itemControled, Current Array Element && Entity Exists(
			Global.itemLastControl[Current Array Index]));
		Wait(1.5, Ignore Condition);
		Host Player.permission = 3;
		If(Slot Of(Host Player) == -1 && Count Of(Filtered Array(All Players(Team 1), Current Array Element.permission == 3)) == 0);
			Random Value In Array(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && Current Array Element.permission == 0)).permission = 3;
			Small Message(Filtered Array(All Players(Team 1), Current Array Element.permission == 3), Custom String("  あなたが今、ヘッドシェフです！  "));
		End;
		Destroy In-World Text(Event Player.altNamePlate);
		If(Count Of(All Players(Team 1)) == 0);
			disabled Set Slow Motion(1);
			disabled If(Global.stage == 0);
				Restart Match;
			disabled End;
		End;
	}
}

disabled rule("DUMMY===========================================================================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Dummy: Spawn")
{
	event
	{
		Player Joined Match;
		Team 2;
		All;
	}

	actions
	{
		Event Player.controlingIndex = Index Of Array Value(Array(Hero(Soldier: 76), Hero(Roadhog), Hero(Bastion), Hero(Tracer), Hero(
			Zarya), Hero(Mercy), Hero(Hanzo), Hero(D.Va), Hero(Hazard), Hero(Mauga), Hero(Moira), Hero(LifeWeaver)), Hero Of(Event Player));
		Event Player.customerSpeed = Hero Of(Event Player) == Hero(Tracer) ? 6 : 5.500;
		If(Event Player.controlingIndex == -1);
			Event Player.customerPath = Global.TABLE_PATH[12];
			Event Player.cookingIndex = Index Of Array Value(Array(Hero(Torbjörn), Hero(Mei), Hero(Junkrat), Hero(Juno)), Hero Of(
				Event Player));
			Disable Movement Collision With Environment(Event Player, False);
			Wait Until(Has Spawned(Event Player), True);
			Start Forcing Dummy Bot Name(Event Player, String Split(Custom String("キッチンナイフトレーダー/アップグレード/アップグレード/アップグレード"), Custom String("/"))
				[Event Player.cookingIndex]);
			For Player Variable(Event Player, controlingIndex, False, 6, True);
				Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
					To World, Replace existing throttle, None);
				Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
				Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / 5.500, Ignore Condition);
				Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
			End;
			Stop Throttle In Direction(Event Player);
			Stop Facing(Event Player);
			Communicate(Event Player, Hello);
			Global.currentUpgrade = Event Player.cookingIndex;
			If(!Event Player.cookingIndex && (Global.orderedKnives[0] || Global.orderedKnives[1]));
				Small Message(All Players(All Teams), Custom String("  {0} : 注文したナイフを持ってきた！", Hero Icon String(Hero(Torbjörn))));
				While(Global.orderedKnives[0]);
					Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
						-70)) * 0.100, Random Integer(62, 65), 100, Null);
					Call Subroutine(createItem);
					Global.orderedKnives[0] -= True;
					Wait(0.100, Ignore Condition);
				End;
				While(Global.orderedKnives[1]);
					Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
						-70)) * 0.100, Random Value In Array(Array(63, 64, 63, 64, 63, 64, 63, 64, 63, 354)), 100, Null);
					Call Subroutine(createItem);
					Global.orderedKnives[1] -= True;
					Wait(0.100, Ignore Condition);
				End;
			Else If(Event Player.cookingIndex == 1 && Global.stageMode != 3 && Global.stage < 4);
				Small Message(All Players(All Teams), Custom String("  {0} : 無料アイテムをプレゼント！", Hero Icon String(Hero(Mei))));
				For Player Variable(Event Player, controlingIndex, False, Count Of(All Players(Team 1)), True);
					Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
						-70)) * 0.100, Random Value In Array(Global.PERK_LIST), 100, Null);
					Call Subroutine(createItem);
					Wait(0.100, Ignore Condition);
				End;
			End;
			All Players(All Teams).selectedUpgrade = False;
			Global.upgradeColor = Array(Array(Color(Green), Color(Turquoise), Color(Violet)), Array(Color(Sky Blue), Color(Rose), Color(Yellow)), Array(Color(Yellow), Color(Purple), Color(Orange), Color(
				Red)), Array(Color(Sky Blue), Color(Violet), Color(Yellow)))[Event Player.cookingIndex];
			Skip(Event Player.cookingIndex * 2);
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element)
				+ Facing Direction Of(Current Array Element) * 1.500, Vector(217.370, 2, 172.520)) < 1.500), Custom String(
				"〔{0}〕:  {1} - ${2}  ", Input Binding String(Button(Interact)), Array(Custom String("{0} 購入",
				Global.ITEM_NAME[Global.KNIFE[1]]), Custom String("特製包丁ガチャ"), Custom String("伝説包丁ガチャ"))[Local Player.selectedUpgrade], First Of(Global.upgradePrice)
				[Local Player.selectedUpgrade]), Vector(217.370, 1.500, 172.520), 3, Do Not Clip, Visible To Position String and Color,
				Global.upgradeColor[Local Player.selectedUpgrade], Default Visibility);
			Skip(5);
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element)
				+ Facing Direction Of(Current Array Element) * 1.500, Vector(217.370, 2, 172.520)) < 1.500), Custom String(
				"〔{0}〕:  {1} 購入 - ${2}  ", Input Binding String(Button(Interact)), Array(Custom String("保存用バット"), Custom String("ランダムアイテム"), Custom String("保存食ボックス"))
				[Local Player.selectedUpgrade], Global.upgradePrice[True][Local Player.selectedUpgrade]), Vector(217.370, 1.500, 172.520), 3,
				Do Not Clip, Visible To Position String and Color, Global.upgradeColor[Local Player.selectedUpgrade], Default Visibility);
			Skip(3);
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element)
				+ Facing Direction Of(Current Array Element) * 1.500, Vector(217.370, 2, 172.520)) < 1.500), Custom String(
				"〔{0}〕:  {1} 強化 - ${2}  ", Input Binding String(Button(Interact)), Array(Custom String("フライヤー"), Custom String("鍋"), Custom String("グリル"), Custom String("フライパン"))
				[Local Player.selectedUpgrade], Global.upgradePrice[2][Local Player.selectedUpgrade]), Vector(217.370, 1.500, 172.520), 3,
				Do Not Clip, Visible To Position String and Color, Global.upgradeColor[Local Player.selectedUpgrade], Default Visibility);
			Skip(1);
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element)
				+ Facing Direction Of(Current Array Element) * 1.500, Vector(217.370, 2, 172.520)) < 1.500), Custom String(
				"〔{0}〕:  {1} - ${2}  ", Input Binding String(Button(Interact)), Array(Custom String("私のスピードアップ"), Custom String("チームの営業タイムアップ"), Custom String("コイン交換"))
				[Local Player.selectedUpgrade], Global.upgradePrice[3][Local Player.selectedUpgrade]), Vector(217.370, 1.500, 172.520), 3,
				Do Not Clip, Visible To Position String and Color, Global.upgradeColor[Local Player.selectedUpgrade], Default Visibility);
			Event Player.playerText = Last Text ID;
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element), Vector(217.370, 2,
				172.520)) < 3), Custom String("〔{0}〕 : 項目変更", Input Binding String(Button(Reload))), Event Player, 2.500, Do Not Clip,
				Visible To and String, Color(Sky Blue), Default Visibility);
			Event Player.tableText = Last Text ID;
			Create Effect(All Players(All Teams), Light Shaft, Array(Color(Red), Color(Aqua), Color(Orange))[Event Player.cookingIndex],
				Position Of(Event Player), 2, Visible To);
			Event Player.customerEffect = Last Created Entity;
			While(!Global.isOpen);
				While(!Global.isOpen && !Event Player.customerStatus);
					Wait(0.100, Ignore Condition);
				End;
				If(Event Player.customerStatus);
					Event Player.customerStatus = Null;
					Communicate(Event Player, Thanks);
				End;
			End;
			Communicate(Event Player, Goodbye);
			Global.currentUpgrade = -1;
			All Players(Team 1).selectedUpgrade = -1;
			Destroy HUD Text(Event Player.playerText);
			Destroy In-World Text(Event Player.tableText);
			Destroy Effect(Event Player.customerEffect);
		Else;
			Start Forcing Dummy Bot Name(Event Player, String Split(Custom String(
				"普通の客/大食い/厳しい客/せっかちな客/フードファイター/予約客/フード評論家/モクバンユーチューバー/壊食家/暴悪な客/エルバーピ VVIP/料理研究家"), Custom String("/"))
				[Event Player.controlingIndex]);
			Event Player.playerColor = Array(Color(Blue), Color(Green), Color(White), Color(Orange), Color(Purple), Color(Turquoise), Color(
				Aqua), Color(Violet), Color(Lime Green), Color(Red), Color(Yellow), Custom Color(225, 165, 186, 255))[Event Player.controlingIndex];
			Event Player.score = Array(Null, 5, 10, 5, Null, 10, -5, 5, Null, -5, 15, 10)[Event Player.controlingIndex] - Global.additionalScore;
			Event Player.orderCount = Array(True, 2, True, True, Null, True, True, 2, True, True, 4, True)[Event Player.controlingIndex];
			Event Player.orderTimeOut = Array(30, 30, 30, 20, 40, 10, 20, 25, 15, 25, 20, 35)
				[Event Player.controlingIndex] * Array(6, 3, 2, 1.200, 12)[Global.difficulty] - 0.500;
			Event Player.byOrder = Array(False, False, 1, False, False, False, False, 1, False, 1, 1, False)[Event Player.controlingIndex];
			Disable Movement Collision With Environment(Event Player, False);
			Wait Until(Has Spawned(Event Player), True);
			For Player Variable(Event Player, controlingIndex, False, 9, True);
				Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
					To World, Replace existing throttle, None);
				Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
				Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / Event Player.customerSpeed,
					Ignore Condition);
				Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
				If(!Global.isOpen);
					Global.tableFilled[Event Player.tableIndex] = False;
					Event Player.customerPath = Array Slice(Global.TABLE_PATH[Event Player.tableIndex], False, Event Player.controlingIndex);
					While(True);
						Event Player.controlingIndex -= 1;
						Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player),
							Event Player.customerPath[Event Player.controlingIndex]), True, To World, Replace existing throttle, None);
						Start Facing(Event Player, Direction Towards(Position Of(Event Player), Event Player.customerPath[Event Player.controlingIndex]),
							300, To World, None);
						Wait(Distance Between(Position Of(Event Player), Event Player.customerPath[Event Player.controlingIndex])
							/ Event Player.customerSpeed, Ignore Condition);
						Modify Player Variable(Event Player, customerPath, Remove From Array By Index, Event Player.controlingIndex);
						If(Event Player.controlingIndex < 1);
							Destroy Dummy Bot(Team 2, Slot Of(Event Player));
							Abort;
						End;
					End;
				End;
			End;
			Stop Throttle In Direction(Event Player);
			Stop Facing(Event Player);
			Communicate(Event Player, Hello);
			Event Player.customerStatus = Null;
			While(True);
				If(Hero Of(Event Player) == Hero(LifeWeaver));
					Global.tableOrderCode[Event Player.tableIndex] = First Of(Global.loadingMenuWeaver);
					Modify Global Variable(loadingMenuWeaver, Remove From Array By Index, False);
					If(Global.loadingMenuWeaver == Empty Array);
						Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
					End;
					Event Player.durability = Global.tableOrderCode[Event Player.tableIndex];
				Else If(Hero Of(Event Player) == Hero(Hazard));
					Global.tableOrderCode[Event Player.tableIndex] = First Of(Global.loadingMenuHaz);
					Modify Global Variable(loadingMenuHaz, Remove From Array By Index, False);
					If(Global.loadingMenuHaz == Empty Array);
						Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
					End;
					Event Player.durability = Global.tableOrderCode[Event Player.tableIndex];
				Else If(Hero Of(Event Player) == Hero(Mercy));
					Global.tableOrderCode[Event Player.tableIndex] = Event Player.durability;
				Else;
					Global.tableOrderCode[Event Player.tableIndex] = First Of(Global.loadingMenu);
					Modify Global Variable(loadingMenu, Remove From Array By Index, False);
					If(Global.loadingMenu == Empty Array);
						Global.loadingMenu = Randomized Array(Global.currentMenu);
					End;
					Event Player.durability = Global.tableOrderCode[Event Player.tableIndex];
				End;
				If(Array Contains(Global.STAGE_CODE[Global.stage], 11) || (Global.difficulty == 4 && Global.totalScore[0] == 11) || Hero Of(Event Player) == Hero(LifeWeaver));
					Event Player.orderTimeOut += 20;
					For Player Variable(Event Player, handPosition, False, Hero Of(Event Player) == Hero(Zarya) ? 3 : 1, True);
						If(Count Of(Global.ADDITIONAL_MATERIAL_LIST[Global.tableOrderCode[Event Player.tableIndex]]) > 1);
							For Player Variable(Event Player, additionalMaterialIndex, False, Count Of(Global.ADDITIONAL_MATERIAL_LIST[Global.tableOrderCode[Event Player.tableIndex]]), True);
								Global.createItemData = Array(Position Of(Event Player) + Vector(False, 2 + (Event Player.additionalMaterialIndex / 2), False), Null,
									Global.ADDITIONAL_MATERIAL_LIST[Global.tableOrderCode[Event Player.tableIndex]][Event Player.additionalMaterialIndex], Null, Null);
								Call Subroutine(createItem);
							End;
						Else;
							Global.createItemData = Array(Position Of(Event Player) + Vector(False, 2, False), Null,
								Global.ADDITIONAL_MATERIAL_LIST[Global.tableOrderCode[Event Player.tableIndex]], Null, Null);
							Call Subroutine(createItem);
						End;
					End;
				End;
				Modify Global Variable(customerPosition, Append To Array, Global.TABLE_POSITION[Event Player.tableIndex]);
				Modify Global Variable(customerIndex, Append To Array, Event Player.tableIndex);
				Modify Player Variable(Event Player, orderTimeOut, Min, Match Time + 0.100);
				Event Player.orderedTime = Total Time Elapsed;
				Create Effect(All Players(All Teams), Light Shaft, Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed)
					- Total Time Elapsed, Up) - 1 < 10 ? Color(Red) : Event Player.playerColor, Global.TABLE_POSITION[Event Player.tableIndex], 0.500,
					Visible To and Color);
				Event Player.shaftEffect = Last Created Entity;
				Create In-World Text(Players Within Radius(Evaluate Once(Global.TABLE_POSITION[Event Player.tableIndex]), 15, All Teams, Off),
					Custom String("#{1} - {0}秒", Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed)
					- Total Time Elapsed, Up) - 1, Evaluate Once(Event Player.tableIndex + True)), Global.TABLE_POSITION[Event Player.tableIndex] + Up,
					2, Do Not Clip, Visible To and String, Event Player.playerColor, Default Visibility);
				Event Player.tableText = Last Text ID;
				Event Player.score += Global.ITEM_SCORE[Global.tableOrderCode[Event Player.tableIndex]];
				Event Player.hintText = First Of(Global.hintText);
				Modify Global Variable(hintText, Remove From Array By Index, False);
				If(Global.hintText == Empty Array);
					Global.hintText = Array(Custom String(""));
				End;
				If(Hero Of(Event Player) == Hero(Zarya));
					Event Player.score = 20 + Min(Event Player.score * 3, 50);
					While(Event Player.orderCount < 3);
						Create HUD Text(All Players(All Teams), Evaluate Once(Custom String(" #{0} : {1} {2}/3 ", Event Player.tableIndex + True,
							Global.ITEM_NAME[Global.tableOrderCode[Event Player.tableIndex]], Event Player.orderCount)), Event Player.hintText, Custom String(
							"  {0}秒\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　",
							Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1), Left,
							Event Player.orderedTime * 0.001, Event Player.playerColor, Color(Yellow), Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1 < 10 ? Color(Red) : Event Player.playerColor, Visible To String and Color,
							Default Visibility);
						Event Player.playerText = Last Text ID;
						Event Player.lastOrderTime = Total Time Elapsed;
						Wait Until(Event Player.customerStatus != False || Global.isVipAngry, Event Player.orderTimeOut);
						Event Player.orderTimeOut += Event Player.lastOrderTime - Total Time Elapsed;
						Event Player.lastOrderTime = Total Time Elapsed;
						Destroy HUD Text(Event Player.playerText);
						If(!Global.isOpen);
							Break;
						End;
						If(Event Player.customerStatus == 1 || Event Player.customerStatus == 4);
							Event Player.orderCount += True;
							Event Player.tipsProb = 5;
							If(Event Player.customerStatus == 4);
								All Players(Team 1).score += 1;
								Global.systemScore += 5;
								Small Message(All Players(All Teams), Custom String("  完成度の高い料理! +5%"));
								Global.scbSurved[2] += 1;
								Event Player.tipsProb = 10;
							Else;
								Global.scbSurved[3] += 1;
							End;
							Call Subroutine(dropTips);
							All Players(Team 1).score += 1;
							Create HUD Text(All Players(All Teams), Custom String(" #{0} : サービング成功! {1}/3 ", Event Player.tableIndex + True,
								Event Player.orderCount), Null, Custom String(
								"  {0}秒\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　",
								Max(Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up), False)), Left,
								Event Player.orderedTime * 0.001, Color(Rose), Null, Color(Rose), String, Default Visibility);
							Event Player.playerText = Last Text ID;
							Create Effect(All Players(All Teams), Sphere, Global.ITEM_COLOR[Global.tableOrderCode[Event Player.tableIndex]],
								Global.TABLE_POSITION[Event Player.tableIndex], (Evaluate Once(Total Time Elapsed + 2.500) - Total Time Elapsed) * 0.200,
								Visible To Position and Radius);
							Event Player.customerEffect = Last Created Entity;
							Global.scbSurved[4] += 1;
							Wait(True, Ignore Condition);
							For Player Variable(Event Player, controlingIndex, False, 4, True);
								Play Effect(All Players(All Teams), Ring Explosion, Global.ITEM_COLOR[Global.tableOrderCode[Event Player.tableIndex]],
									Global.TABLE_POSITION[Event Player.tableIndex], 3);
								Wait(0.500, Ignore Condition);
							End;
							Destroy Effect(Event Player.customerEffect);
							If(!Global.isOpen);
								Destroy HUD Text(Event Player.playerText);
								Break;
							End;
							Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 5);
							Play Effect(All Players(All Teams), Buff Impact Sound, Null, Event Player, 100);
							Event Player.customerStatus = Null;
							Wait(True, Ignore Condition);
							Destroy HUD Text(Event Player.playerText);
							Event Player.orderTimeOut += Event Player.lastOrderTime - Total Time Elapsed;
						Else;
							If(Event Player.customerStatus != -1);
								Event Player.knifeText.score -= 5;
								Event Player.controlingIndex = Array(Custom String("タイムオーバー!"), Null, Custom String("{0}の間違ったサービング!", Event Player.knifeText),
									Custom String("順番注意!"))[Event Player.customerStatus];
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : {1} ", Event Player.tableIndex + True,
									Event Player.controlingIndex), Null, Custom String(
									"\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Red), Null, Null, None, Default Visibility);
								Event Player.playerText = Last Text ID;
								Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 5);
								Play Effect(All Players(All Teams), Cassidy Flashbang Explosion Sound, Null, Event Player, 100);
								Global.scbSurved[5] += 1;
								Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Null, Event Player, True, Visible To Position and Radius);
								Event Player.customerEffect = Last Created Entity;
								Press Button(Event Player, Button(Jump));
								Event Player.score = Min(Global.systemScore, Global.scoreDecrease[Event Player.customerStatus]);
								Global.systemScore -= Event Player.score;
								Small Message(All Players(All Teams), Custom String("  {0}{1}", Event Player.controlingIndex, Event Player.score ? Custom String(
									" -{0}%", Event Player.score) : Custom String("")));
								Destroy Effect(Event Player.shaftEffect);
								Wait(True, Ignore Condition);
								Destroy Effect(Event Player.customerEffect);
								Break;
							End;
						End;
					End;
					Event Player.controlingIndex = Index Of Array Value(Global.customerIndex, Event Player.tableIndex);
					Modify Global Variable(customerPosition, Remove From Array By Index, Event Player.controlingIndex);
					Modify Global Variable(customerIndex, Remove From Array By Index, Event Player.controlingIndex);
					Destroy HUD Text(Event Player.playerText);
					Destroy Effect(Event Player.shaftEffect);
					Destroy In-World Text(Event Player.tableText);
					If(Event Player.orderCount == 3);
						Communicate(Event Player, Thanks);
						Modify Player Variable(Event Player, score, Max, 10);
						Global.systemScore += Event Player.score;
						Global.stageScore += Event Player.score;
						Small Message(All Players(All Teams), Custom String("  サービング成功! +{0}%", Event Player.score));
						Wait(True, Ignore Condition);
					End;
					Break;
				Else;
					Create HUD Text(All Players(All Teams), Evaluate Once(Custom String(" #{0} : {1} ", Event Player.tableIndex + True,
						Global.ITEM_NAME[Global.tableOrderCode[Event Player.tableIndex]])), Event Player.hintText, Custom String(
						"  {0}秒\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　",
						Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1), Left,
						Total Time Elapsed * 0.001, Event Player.playerColor, Color(Yellow), Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1 < 10 ? Color(Red) : Event Player.playerColor, Visible To String and Color,
						Default Visibility);
					Event Player.playerText = Last Text ID;
					Wait Until(Event Player.customerStatus != False || Global.isVipAngry, Event Player.orderTimeOut);
					Destroy HUD Text(Event Player.playerText);
					Destroy In-World Text(Event Player.tableText);
					Destroy Effect(Event Player.shaftEffect);
					Event Player.controlingIndex = Index Of Array Value(Global.customerIndex, Event Player.tableIndex);
					Modify Global Variable(customerPosition, Remove From Array By Index, Event Player.controlingIndex);
					Modify Global Variable(customerIndex, Remove From Array By Index, Event Player.controlingIndex);
					If(Global.isOpen);
						If(Event Player.customerStatus == 1 || Event Player.customerStatus == 4);
							Event Player.tipsProb = Hero Of(Event Player) == Hero(Moira) ? 30 : Hero Of(Event Player) == Hero(D.Va) ? 15 : 0;
							If(Total Time Elapsed - Event Player.orderedTime < Event Player.orderTimeOut * 0.180 && Event Player.customerStatus == 4);
								Global.systemScore += 20;
								All Players(Team 1).score += 3;
								Small Message(All Players(All Teams), Custom String("  ファンタスティックなサービング! +20%"));
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : ファンタスティックなサービング! ", Event Player.tableIndex + True), Null, Custom String(
									"\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Rose), Null, Null, None, Default Visibility);
								Event Player.dollar = Hero Of(Event Player) == Hero(Hanzo) || Hero Of(Event Player) == Hero(D.Va);
								Global.scbSurved[0] += 1;
								Event Player.tipsProb += 20;
							Else If(Total Time Elapsed - Event Player.orderedTime < Event Player.orderTimeOut * 0.250);
								Global.systemScore += 10;
								All Players(Team 1).score += 2;
								Small Message(All Players(All Teams), Custom String("  迅速なサービング! +10%"));
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : 迅速なサービング! ", Event Player.tableIndex + True), Null, Custom String(
									"\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Rose), Null, Null, None, Default Visibility);
								Event Player.dollar = Hero Of(Event Player) == Hero(Hanzo) || Hero Of(Event Player) == Hero(D.Va);
								Global.scbSurved[1] += 1;
								Event Player.tipsProb += 10;
							Else If(Event Player.customerStatus == 4);
								Global.systemScore += 5;
								All Players(Team 1).score += 2;
								Small Message(All Players(All Teams), Custom String("  完成度の高い料理! +5%"));
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : サービング成功! ", Event Player.tableIndex + True), Null, Custom String(
									"\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Rose), Null, Null, None, Default Visibility);
								Event Player.dollar = Hero Of(Event Player) == Hero(Hanzo) || Hero Of(Event Player) == Hero(D.Va);
								Global.scbSurved[2] += 1;
								Event Player.tipsProb += 5;
							Else;
								All Players(Team 1).score += 1;
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : サービング成功! ", Event Player.tableIndex + True), Null, Custom String(
									"\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Rose), Null, Null, None, Default Visibility);
								Global.scbSurved[3] += 1;
							End;
							Global.scbSurved[4] += 1;
							Event Player.playerText = Last Text ID;
							Call Subroutine(dropTips);
							Create Effect(All Players(All Teams), Sphere, Global.ITEM_COLOR[Global.tableOrderCode[Event Player.tableIndex]],
								Global.TABLE_POSITION[Event Player.tableIndex], (Evaluate Once(Total Time Elapsed + 5) - Total Time Elapsed) * 0.100,
								Visible To Position and Radius);
							Event Player.customerEffect = Last Created Entity;
							Wait(True, Ignore Condition);
							For Player Variable(Event Player, controlingIndex, False, 4, True);
								Play Effect(All Players(All Teams), Ring Explosion, Global.ITEM_COLOR[Global.tableOrderCode[Event Player.tableIndex]],
									Global.TABLE_POSITION[Event Player.tableIndex], 3);
								Wait(True, Ignore Condition);
							End;
							Destroy Effect(Event Player.customerEffect);
							If(!Global.isOpen);
								Destroy HUD Text(Event Player.playerText);
								Break;
							End;
							Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 5);
							Play Effect(All Players(All Teams), Buff Impact Sound, Null, Event Player, 100);
							If(Event Player.orderCount > 1);
								Wait(True, Ignore Condition);
								Event Player.customerStatus = Null;
								Event Player.orderCount -= True;
								Event Player.durability = False;
							Else;
								Modify Player Variable(Event Player, score, Max, 10);
								Communicate(Event Player, Thanks);
								Global.systemScore += Event Player.score;
								Global.stageScore += Event Player.score;
								If(Hero Of(Event Player) == Hero(Moira));
									Big Message(All Players(All Teams), Custom String("VVIP サービング成功!"));
									Small Message(All Players(All Teams), Custom String("  VVIP サービング成功! +{0}%", Event Player.score));
									All Players(Team 1).score += 100;
								Else If(Hero Of(Event Player) == Hero(D.Va));
									Small Message(All Players(All Teams), Custom String("  VIP サービング成功! +{0}%", Event Player.score));
									All Players(Team 1).score += 20;
								Else;
									Small Message(All Players(All Teams), Custom String("  サービング成功! +{0}%", Event Player.score));
								End;
								Wait(True, Ignore Condition);
								Destroy HUD Text(Event Player.playerText);
								Break;
							End;
						Else;
							If(Event Player.customerStatus != -1);
								Event Player.knifeText.score -= 5;
								Event Player.controlingIndex = Array(Custom String("タイムオーバー!"), Null, Custom String("{0}の間違ったサービング!", Event Player.knifeText),
									Custom String("順番注意!"))[Event Player.customerStatus];
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : {1} ", Event Player.tableIndex + True,
									Event Player.controlingIndex), Null, Custom String(
									"\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Red), Null, Null, None, Default Visibility);
								Event Player.playerText = Last Text ID;
								Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 5);
								Play Effect(All Players(All Teams), Cassidy Flashbang Explosion Sound, Null, Event Player, 100);
								Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Null, Event Player, True, Visible To Position and Radius);
								Event Player.customerEffect = Last Created Entity;
								Press Button(Event Player, Button(Jump));
								Global.stageScore -= Hero Of(Event Player) == Hero(D.Va)
									? Global.scoreDecrease[Event Player.customerStatus] * 3 : Global.scoreDecrease[Event Player.customerStatus];
								Event Player.score = Min(Global.systemScore, Hero Of(Event Player) == Hero(D.Va)
									? Global.scoreDecrease[Event Player.customerStatus] * 3 : Global.scoreDecrease[Event Player.customerStatus]);
								Global.systemScore -= Event Player.score;
								Event Player.dollar = False;
								Global.scbSurved[5] += 1;
								Small Message(All Players(All Teams), Custom String("  {0}{1}", Event Player.controlingIndex, Event Player.score ? Custom String(
									" -{0}%", Event Player.score) : Custom String("")));
								If(Hero Of(Event Player) == Hero(Mauga));
									Clear Status(All Players(Team 1), Phased Out);
									Set Status(All Players(Team 1), Event Player, Stunned, 5);
									Wait(0.016, Ignore Condition);
									Set Status(All Players(Team 1), Null, Phased Out, 9999);
								Else If(Hero Of(Event Player) == Hero(Moira) && Global.difficulty != 4);
									Set Match Time(1);
									Wait(1, Ignore Condition);
									Global.isVipAngry = True;
								End;
								Wait(True, Ignore Condition);
								Destroy Effect(Event Player.customerEffect);
								Destroy HUD Text(Event Player.playerText);
								Break;
							End;
						End;
						Destroy HUD Text(Event Player.playerText);
					Else;
						Break;
					End;
				End;
			End;
			Modify Global Variable(customerIndex, Remove From Array By Value, Event Player.tableIndex);
			Global.tableFilled[Event Player.tableIndex] = False;
			Global.tableOrderCode[Event Player.tableIndex] = -1;
		End;
		While(Event Player.customerPath != Empty Array);
			Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
				To World, Replace existing throttle, None);
			Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
			Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / Event Player.customerSpeed,
				Ignore Condition);
			Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
		End;
		If(Event Player.dollar && Global.isOpen);
			Small Message(All Players(All Teams), Custom String("  {0}{1}の口コミ! ", Hero Icon String(Hero Of(Event Player)), Event Player));
			Communicate(All Players(Team 1), Incoming);
			If(Hero Of(Event Player) == Hero(D.Va));
				Global.loadNext += 4;
			Else If(Hero Of(Event Player) == Hero(Hanzo));
				Global.loadNext += 2;
			End;
		End;
		Destroy Dummy Bot(Team 2, Slot Of(Event Player));
	}
}

rule("drop tips") {
	event
	{
		subroutine;
		dropTips;
	}

	actions
	{
		If(Random Integer(1, 100) <= Event Player.tipsProb);
			Global.createItemData = Array(Position Of(Event Player), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, 432, 100, Null);
			Call Subroutine(createItem);
		End;
	}
}

disabled rule("GLOBAL SUBROUTINE===============================================================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Global subroutine: Data init")
{
	event
	{
		Subroutine;
		dataInit;
	}

	actions
	{
		Global.ITEM_COLOR = Mapped Array(String Split(
			Custom String("D/R/R/M/M/Y/Y/Y/Y/Y/Y/Y/W/W/R/R/R/R/W/Y/Y/Y/O/O/R/W/O/O/W/W/O/R/M/L/L/G/G/H/H/H/H/H/H/H/H/H/{0}",
			Custom String("H/H/H/H/H/H/H/H/H/H/H/H/H/H/H/L/T/T/T/T/W/W/W/G/G/G/W/R/S/Y/R/S/S/C/M/F/F/F/M/M/C/R/S/C/M/V/{0}",
			Custom String("V/W/V/Y/S/C/R/F/F/F/Y/Y/Y/C/Y/S/Y/Y/Y/Y/W/Y/F/F/F/F/F/F/F/R/A/M/A/F/H/F/F/F/F/F/R/A/Y/P/Y/R/{0}",
			Custom String("M/M/H/Y/C/C/C/C/C/W/W/W/W/W/S/R/R/S/S/O/O/A/A/A/M/M/W/M/W/C/G/O/A/C/C/O/A/A/C/C/G/A/A/C/A/C/{0}", 
			Custom String("A/F/F/F/G/C/M/G/C/M/W/W/M/M/B/W/W/W/F/O/O/S/S/S/W/F/F/W/S/F/M/M/W/W/Y/Y/M/F/F/M/F/M/M/F/F/F/{0}",
			Custom String("F/F/F/F/F/F/F/F/F/F/F/P/C/P/C/S/P/P/P/P/P/P/S/C/C/W/W/W/W/P/P/P/Y/F/M/G/N/N/W/W/W/F/F/N/A/Q/{0}",
			Custom String("X/X/P/M/P/M/P/M/P/M/M/M/M/A/X/P/Y/P/Y/W/W/Y/S/R/P/F/S/S/P/P/R/F/S/N/S/X/P/N/X/P/N/X/X/P/X/X/{0}",
			Custom String("P/X/W/N/N/P/X/S/S/N/Y/S/S/P/S/M/M/M/S/S/S/S/S/S/S/S/S/R/R/R/L/Z/Z/U/Y/T/U/U/Z/R/P/S/R/R/R/M/{0}",
			Custom String("M/S/F/F/P/L/L/S/S/S/S/F/F/F/F/P/P/P/E/F/Y/Y/F/X/H/H/C/C/S/W/W/M/M/M/J/J/J/S/F/P/P/P/P/F/W/C/{0}",
			Custom String("N/N/Q/A/F/K/Y/M/F/F/M/S/F/W/F/S/F/R/Y/Y/Z/A/N/N/M/R/R/R/R/S/F/F/P/F/P/H/H/H/H/H/C/C/C/C/F/V/{0}",
			Custom String("F/H/H/H/H/V/H/C/C/P/Y/F/F/V/C"
			))))))))))), Custom String(
			"/")), Array(Color(Black), Color(Red), Custom Color(180, 100, False, 255), Color(Yellow), Color(White), Color(Lime Green),
			Color(Green), Custom Color(255, 200, 100, 255), Color(Turquoise), Custom Color(100, 60, False, 255), Custom Color(255, 65,
			False, 255), Custom Color(255, 255, 190, 255), Custom Color(False, 125, False, 255), Color(Orange), Custom Color(246, 86, 86,
			255), Custom Color(250, 150, 70, 255), Color(Sky Blue), Custom Color(255, 192, 243, 255), Custom Color(255, 108, 141, 255), Custom Color(255, 239, 104, 255), Color(Violet), Color(Rose), Color(Gray), Custom Color(96, 255, 181, 255), Color(Purple))[Index Of Array Value(String Split(Custom String(
			"D/R/M/Y/W/L/G/H/T/S/C/F/V/O/A/P/B/N/Q/X/Z/U/E/J/K"), Custom String("/")), Current Array Element)]);
		Global.ITEM_NAME = Append To Array(String Split(Custom String("焦げ物/牛肉/薄切り牛肉/ステーキ/サイコロステーキ/ジャガイモ/薄切りジャガイモ/フライドポテト/焼きジャガイモ/{0}",
			Custom String("蒸しジャガイモ/マッシュポテト/炒めジャガイモ/パスタ/ゆでパスタ/トマト/薄切りトマト/焼きトマト")), Custom String("/")), Append To Array(String Split(
			Custom String("トマトソース/クリームソース/チーズ/薄切りチーズ/とろけたチーズ/トマトクリームソース/チーズポテト/トマトパスタ/{0}", Custom String(
			"クリームパスタ/トマトクリームパスタ/トマトクリームチーズパスタ/クリームチーズパスタ/クリームチーズソース/トマトクリームチーズソース")), Custom String("/")), Append To Array(String Split(Custom String(
			"生パティ/焼いたパティ/レタス/薄切りレタス/焼いたレタス/炒めたレタス/ハンバーガーバンズ/下バンズ/{0}", Custom String(
			"上バンズ/バンズ＋パティ/バンズ＋チーズ/バンズ＋トマト/バンズ＋レタス/バンズ＋パティ＋チーズ/バンズ＋パティ＋トマト")), Custom String("/")), Append To Array(String Split(Custom String(
			"バンズ＋パティ＋レタス/バンズ＋チーズ＋トマト/バンズ＋チーズ＋レタス/バンズ＋トマト＋レタス/バンズ＋パティ＋チーズ＋トマト/{0}", Custom String(
			"バンズ＋パティ＋チーズ＋レタス/バンズ＋パティ＋トマト＋レタス/バンズ＋チーズ＋トマト＋レタス")), Custom String("/")), Append To Array(String Split(Custom String(
			"バンズ＋パティ＋チーズ＋トマト＋レタス/ミートバーガー/チーズミートバーガー/ベジバーガー/チーズベジバーガー/{0}", Custom String(
			"デラックスバーガー/チーズデラックスバーガー/安物のナイフ/炭化鋼ナイフ/携帯ナイフ/鋭いナイフ/ゲンジの脇差/鶏肉/薄切り鶏肉")), Custom String("/")), Append To Array(String Split(
			Custom String("角切り鶏肉/ネギ/薄切りネギ/刻みネギ/天ぷら粉/コチュジャン/醤油/水飴/コチュジャンソース/{0}", Custom String(
			"醤油ソース/醤油ネギソース/ヤンニョムソース/焼いた鶏肉/鶏肉＋天ぷら粉/薄切り鶏肉＋天ぷら粉")), Custom String("/")), Append To Array(String Split(Custom String(
			"角切り鶏肉＋天ぷら粉/から揚げ/フライドチキン/ヤンニョムチキン/コチュジャンチキン/醤油チキン/{0}", Custom String(
			"ヤンニョムから揚げ/鶏の丸揚げ/炒めたネギ/揚げたネギ/ゆで鶏肉/焼いたネギ/天かす/醤油ネギチキン/生ヤンニョム＋から揚げ")), Custom String("/")), Append To Array(String Split(
			Custom String("潰したトマト/割れた卵/卵/ゆで卵/殻剥きゆで卵/潰したゆで卵/殻剥き卵/キムチチャーハン/卵チャーハン/{0}", Custom String(
			"プルコギサムパプ/混ぜ卵/目玉焼き/スクランブルエッグ/茶碗蒸し/米/ピザ用チーズ/小麦粉/小麦粉生地/小さい小麦粉生地")), Custom String("/")), Append To Array(String Split(
			Custom String("伸ばした小麦粉生地/餃子の皮/ピザ生地/小麦・トルティーヤ/ペパロニ/ベーコン/焼いたベーコン/薄切りしたベーコン/{0}", Custom String(
			"生地＋ソース/チーズピザ/ピザベース/ピザ＋ペパロニ/ピザ＋ベーコン/ピザ＋ジャガイモ/ピザ＋ベーコン＋ジャガイモ")), Custom String("/")), Append To Array(String Split(Custom String(
			"ペパロニピザ/ベーコンピザ/ポテトピザ/ベーコンポテトピザ/卵焼き/焼いたペパロニ/焼いた薄切りベーコン/{0}", Custom String(
			"ゆで牛肉/パン粉/千切り卵焼き/キムチ/薄切りキムチ/刻んだキムチ/炒めたキムチ/卵とキムチの炒飯/豆腐")), Custom String("/")), Append To Array(String Split(Custom String(
			"薄切り豆腐/焼き豆腐/豆腐の炒め物/潰した豆腐/プルコギ丼/キムチプルコギ丼/牛ひき肉/薄切り牛肉＋醤油/{0}", Custom String(
			"プルコギ/春雨/薄切りした春雨/ポーク/薄切りポーク/ポークミンチ/焼いたポーク/揚げたポーク/ボイルドポーク/炒めたポーク/薄切りボイルドポーク")), Custom String("/")), Append To Array(String Split(
			Custom String("ネギ＋キムチ/ネギ＋豆腐/ネギ＋春雨/ネギ＋ポーク/キムチ＋春雨/キムチ＋ポーク/豆腐＋春雨/豆腐＋ポーク/春雨＋ポーク/{0}", Custom String(
			"ネギ＋キムチ＋春雨/ネギ＋キムチ＋ポーク/ネギ＋豆腐＋春雨/ネギ＋豆腐＋ポーク/ネギ＋春雨＋ポーク/キムチ＋春雨＋ポーク")), Custom String("/")), Append To Array(String Split(
			Custom String("豆腐＋春雨＋ポーク/ネギ＋キムチ＋春雨＋ポーク/ネギ＋豆腐＋春雨＋ポーク/生野菜餃子/生キムチ餃子/生肉餃子/{0}", Custom String(
			"焼き野菜餃子/焼きキムチ餃子/焼き肉餃子/蒸し野菜餃子/蒸しキムチ餃子/蒸し肉餃子/ご飯/炒飯/とんかつ")), Custom String("/")), Append To Array(String Split(Custom String(
			"薄切りとんかつ/魚/捌いた魚/魚のミンチ/蒸し魚/蒸しかまぼこ/焼き魚/揚げ魚/捌いた魚＋醤油/{0}", Custom String(
			"煮付け/照り焼き/小盛りご飯/握り寿司/握り寿司2貫/おにぎり/醤油おにぎり/蒸し魚丼/とんかつ+ご飯")), Custom String("/")), Append To Array(String Split(Custom String(
			"カツ丼/薄切りしたゆで鶏肉/ゆで鶏肉＋ご飯/スクランブルエッグ丼/親子丼/白身魚のフライ/薄切りポーク＋天ぷら粉/{0}", Custom String(
			"魚のミンチ＋天ぷら粉/揚げかまぼこ/捌いた魚＋天ぷら粉/から揚げ+ご飯/唐揚げ丼/小さなすいとん生地")), Custom String("/")), Append To Array(String Split(Custom String(
			"すいとん生地/小麦粉の塊/伸ばした小麦粉生地/うどん麺(1|4)/うどん麺(2|4)/うどん麺(3|4)/うどん麺/薄い小麦粉の塊/{0}", Custom String(
			"伸ばした小麦粉の紐/ラーメン麺(1|4)/ラーメン麺(2|4)/ラーメン麺(3|4)/ラーメン麺/出汁/キムチ出汁/煮出し")), Custom String("/")), Append To Array(String Split(
			Custom String("煮たキムチ出汁/ジャージャーソース/すいとん/鳴門巻きすいとん/うどん/鳴門巻きうどん/ラーメン/鳴門巻きラーメン/{0}", Custom String(
			"ジャージャー麺/薄切り豆腐＋キムチ/豆腐炒め＋キムチ/ゆでうどん麺/ゆでラーメン麺/ゆですいとん生地")), Custom String("/")), Append To Array(String Split(Custom String(
			"お雑煮用の餅/お雑煮/水餃子/餃子お雑煮/卵生地/{0}", Custom String("肉の生地/ミートボール/キッチンナイフ/鳴門巻き/薄切り鳴門巻き")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"玉ねぎ/薄切り玉ねぎ/刻んだ玉ねぎ/焼いた玉ねぎ/炒めた玉ねぎ/エビ/焼いたエビ/蒸し{0}",
			 Custom String("エビ/伸ばしたコーン生地/コーン・トルティーヤ/ポークタコス(小麦)/ポークタコス(コーン)")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"牛肉タコス(小麦)/牛肉タコス(コーン)/焼きエビタコス(小麦)/焼きエビタコス(コーン{0}", 
			Custom String(")/蒸しエビタコス(小麦)/蒸しエビタコス(コーン)")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"ポーク+玉ねぎ/牛肉+玉ねぎ/焼きエビ+玉ねぎ/蒸しエビ+玉ねぎ/コーン生地/{0}", 
			Custom String("揚げた小麦粉トルティーヤ/揚げたコーントルティーヤ/ナチョス(小麦)/ナチョス(コーン)")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"ミルク/アイスクリーム/バナナ/チョコ/イチゴ/オレンジ/むきバナナ/刻んだチョコ/溶かしたチョコ/むきオレンジ/マッシュ{0}", Custom String(
			"オレンジ/マッシュイチゴ/マッシュバナナ/チョコミルク/イチゴ+バナナ/チョコパフェ/バナナパフェ/オレンジパフェ")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"イチゴパフェ/バナナパフェ+チョコ/オレンジパフェ+チョコ/イチゴパフェ+チョコ/バナナパフェ+オレンジ/バナナパフェ+イチゴ/{0}", Custom String(
			"オレンジパフェ+イチゴ/バナナパフェ+チョコ+オレンジ/バナナパフェ+チョコ+イチゴ/オレンジパフェ+チョコ+イチゴ")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"バナナパフェ+オレンジ+イチゴ/ミルクシェイク/イチゴバナナシェイク/イチゴシェイク/オレンジシェイク/バナナシェイク/{0}", Custom String(
			"チョコシェイク/チョコバナナ/デラックスパフェ/メープルシロップ/チョコシロップ/チョコ生地/卵パン/チョコパン/ホットケーキ")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"ホットケーキ+ベーコン/ホットケーキ+スクランブルエッグ/チョコシロップホットケーキ/チョコシロップホットケーキ+ベーコン/{0}", Custom String(
			"チョコシロップホットケーキ+スクランブルエッグ/チョコホットケーキ/チョコホットケーキ+ベーコン")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"チョコホットケーキ+スクランブルエッグ/チョコチョコホットケーキ/チョコチョコホットケーキ+ベーコン/{0}", Custom String(
			"チョコチョコホットケーキ+スクランブルエッグ/イチゴホットケーキ/イチゴホットケーキ+ベーコン/イチゴホットケーキ+スクランブルエッグ")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"エナジードリンク/怪しいドリンク/ヘッドシェフの包丁/ジャンプブーツ/調味料パック/掃除機/ダッシュブーツ/{0}", Custom String(
			"まな板帰還スペル/料理複製スペル/ガストーチ/ドーナツ/チョコドーナツ/ラム肉/薄切りラム肉/ラムひき肉")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"焼いたラム肉/焼いた薄切りラム肉/ステーキソース/マッシュルーム/薄切りマッシュルーム/焼きマッシュルーム/{0}", Custom String(
			"白菜/薄切り白菜/ステーキ＋ソース/豚肉＋ステーキソース/スペアリブ/熟成ポークバラ/玉ねぎ＋マッシュルーム")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"玉ねぎ＋白菜/マッシュルーム＋白菜/玉ねぎ＋マッシュルーム＋白菜/野菜出汁/しゃぶしゃぶ/中華火鍋/貝/炒めた貝/{0}", Custom String(
			"パイナップル/薄切りパイナップル/ピザ＋パイナップル/パイナップルピザ/バンズ＋チキン")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"チキンバーガー/薄切り牛肉＋ヤンニョムソース/ヤンニョムプルコギ/焼きおにぎり/ライスヌードル/ゆでライスヌードル/{0}", Custom String(
			"炒めた鶏肉/チキン＋玉ねぎ/ラム肉＋玉ねぎ/チョコミントパフェ/チョコミントシェイク/ミントシロップ/もち米")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"ホットク生地/ホットク/ライスヌードルスープ/チキンタコス(小麦)/ラムタコス(小麦)/ヴォンゴレパスタ/クリームチキン/{0}", Custom String(
			"イチゴ飴がけ串/ネギ＋豆腐＋春雨＋エビ/生エビ餃子/蒸しエビ餃子/焼きエビ餃子/ポッサム/ワイン")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"とろけたチーズパック/フライドチキンパック/ピザベースパック/餃子パック/パティパック/プルコギパック/{0}", Custom String(
			"丼物パック/麺パック/タコベースパック/溶かしたチョコパック/パンセット/ミートパック/$100")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"保存食ボックス/サービングボール/明太子ソース/明太子クリームソース/明太子パスタ/ステーキスパゲッティ/{0}", Custom String(
			"チリソース/プルダックソース/プルダック/バッファローウィング/プルコギピザ/ピザ＋プルコギ/ピザ＋エビ")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"エビピザ/肉餃子+出汁/小籠包/バンズ＋ベーコン/バンズ＋パティ＋ベーコン/バンズ＋ベーコン＋チーズ/{0}", Custom String(
			"バンズ＋パティ＋ベーコン＋チーズ/ベーコンチーズバーガー/薄切りポーク＋ヤンニョムソース")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"ジェユクポックム/ジェユク丼/ジェユク丼＋卵/エビ+天ぷら粉/海苔/海苔＋天ぷら粉/揚げた海苔/{0}", Custom String(
			"揚げたエビ/揚げたエビ＋海苔/天丼/軍艦巻き/フィッシュ・アンド・チップス/プルダックソース＋麺")), Custom String("/")),
			Append To Array(String Split(Custom String(
			"プルダックポックンミョン/チキンブリトー（小麦）/チキンブリトー（コーン）/葱チヂミ生地/{0}", Custom String(
			"キムチチヂミ生地/ネギチヂミ/キムチチヂミ")), Custom String("/")),
			Empty Array))))))))))))))))))))))))))))))))))));
		Global.ITEM_SCORE = Mapped Array(String Split(
			Custom String(
			"0/0/0/3/3/0/0/4/3/0/3/0/0/0/0/0/0/0/0/0/0/0/0/3/4/4/6/6/5/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/{0}",
			Custom String(
			"0/0/0/0/0/0/0/0/0/0/3/4/4/5/6/6/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/3/3/4/4/4/5/{0}",
			Custom String(
			"4/0/0/0/0/0/5/0/0/0/0/0/0/0/0/5/5/5/0/3/3/3/0/0/0/0/0/0/0/0/0/0/0/0/0/0/7/0/0/0/0/0/7/7/7/{0}",
			Custom String(
			"7/4/0/0/0/0/5/0/0/0/0/7/0/0/0/0/0/5/7/0/0/3/0/0/0/0/0/3/0/3/3/0/0/0/0/0/0/0/0/0/0/0/0/0/0/{0}",
			Custom String(
			"0/0/0/0/0/0/0/0/5/6/6/5/6/6/3/3/4/5/0/0/0/1/3/3/3/1/5/5/1/3/5/3/4/3/5/7/0/5/4/7/5/0/0/3/0/{0}",
			Custom String(
			"5/7/0/0/0/0/3/3/4/0/0/5/0/0/0/0/0/0/0/0/0/3/4/5/7/5/7/5/4/5/0/0/0/0/3/6/6/0/0/3/0/0/0/0/0/{0}",
			Custom String(
			"0/0/0/0/3/0/0/0/6/5/6/5/6/5/6/5/0/0/0/0/0/0/0/4/4/1/1/1/1/1/1/0/0/0/0/0/0/0/2/0/3/3/3/3/0/{0}",
			Custom String(
			"0/0/0/0/0/0/0/0/0/3/3/3/3/3/3/4/4/0/0/0/0/0/3/4/4/3/4/4/4/5/5/5/6/6/4/5/5/0/0/0/0/0/0/0/0/{0}",
			Custom String(
			"0/0/4/5/0/0/0/7/7/0/0/0/2/0/0/7/0/7/7/0/0/0/0/0/7/7/0/0/0/0/0/7/0/7/0/7/7/0/0/2/0/0/7/7/0/{0}",
			Custom String(
			"0/0/7/7/7/7/7/7/7/0/0/7/7/7/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/7/7/0/0/7/7/9/0/0/7/0/7/0/{0}",
			Custom String(
			"0/0/0/8/0/7/8/9/0/0/0/0/0/0/9/7/7/0/7/9/9/0/0/8/8"
			))))))))))), Custom String("/")), Index Of Array Value(String Split(Custom String("0/1/2/3/4/5/6/7/8/9"), Custom String("/")), Current Array Element) * 5);
		Global.CUTTING_NEEDED = Array(99, 5, 5, 3, 99, 5, 99, 99, 99, 3, 99, 99, 99, 99, 5, 99, 99, 99, 99, 2, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 5, 99, 99, 99, 1, 9, 9, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 5, 5, 99, 5, 5, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 3, 99, 99, 99, 99, 99, 99, 1, 1, 5, 99, 7, 99, 7, 99, 99, 99, 99, 99, 99, 99, 99, 1, 3, 3, 99, 3, 99, 99, 2, 2, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 5, 5, 99, 99, 99, 5, 7, 99, 99, 99, 99, 99, 99, 99, 99, 5, 99, 5, 5, 99, 99, 99, 3, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 99, 5, 99, 5, 5, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 3, 99, 99, 99, 99, 99, 3, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 5, 99, 5, 5, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 3, 3, 99, 99, 99, 99, 3, 3, 5, 3, 5, 99, 99, 5, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 5, 4, 99, 4, 99, 99, 3, 99, 99, 3, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 8, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99);
		Global.CUTTING_RESULT = Array(FALSE, 2, 154, 4, FALSE, 6, FALSE, FALSE, FALSE, 10, FALSE, FALSE, FALSE, FALSE, 15, FALSE, FALSE, FALSE, FALSE, 20, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 34, FALSE, FALSE, FALSE, Array(38, 39), 140, 140, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 67, 68, FALSE, 70, 71, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 216, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 104, 102, 103, FALSE, 108, FALSE, 112, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, Array(116, 116), 227, Array(229, 229), FALSE, Array(235, 235), FALSE, FALSE, 124, 138, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 143, 144, FALSE, FALSE, FALSE, 148, 151, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 158, FALSE, 160, 161, FALSE, FALSE, FALSE, 166, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, Array(208, 208), FALSE, 197, FALSE, Array(199, 199), 200, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, Array(231, 231), FALSE, FALSE, FALSE, FALSE, FALSE, Array(237, 237), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 267, FALSE, 269, 270, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 293, 294, FALSE, FALSE, FALSE, FALSE, 301, 302, 306, 304, 307, FALSE, FALSE, 305, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 365, 366, FALSE, 368, FALSE, FALSE, 371, FALSE, FALSE, 374, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 389, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, Array(21, 21), Array(85, 85), Array(127, 127), Array(186, 187), Array(32, 32), Array(156, 156), Array(215, 226), Array(255, 256), Array(286, 287), Array(303, 303), Array(335, 336), Array(1, 159), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE);
		Global.GRILLING_NEEDED = Array(99, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 2, 3, 3, 5, 5, 5, 5, 5, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 5, 4, 3, 6, 5, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5);
		Global.GRILLING_RESULT = Array(FALSE, 3, 4, FALSE, FALSE, 8, 11, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 16, FALSE, FALSE, FALSE, FALSE, 21, 21, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 32, FALSE, 35, 36, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 80, 399, FALSE, 94, 91, 91, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 21, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 137, 123, FALSE, 138, FALSE, FALSE, 126, 132, 133, 134, 135, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 145, FALSE, FALSE, FALSE, 149, 150, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 162, 165, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 203, 203, FALSE, FALSE, FALSE, FALSE, FALSE, 207, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 396, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 271, FALSE, FALSE, FALSE, FALSE, 274, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 303, FALSE, FALSE, FALSE, 303, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 367, 368, FALSE, FALSE, FALSE, FALSE, 372, 372, FALSE, FALSE, FALSE, FALSE, 377, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 391, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 443, 446, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE);
		Global.FRYING_NEEDED = Array(99, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 7, 5, 4, 5, 5, 5, 4, 3, 3, 3, 3, 3, 3, 3, 5, 7, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5);
		Global.FRYING_RESULT = Array
	}
}

rule("Global subroutine: Data init2")
{
	event
	{
		Subroutine;
		dataInit2;
	}

	actions
	{
		Global.POT_TIME = Array
		Global.POT_RESULT = Array(FALSE, 139, FALSE, FALSE, FALSE, 9, 9, FALSE, FALSE, FALSE, FALSE, FALSE, 13, FALSE, FALSE, 17, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 93, 216, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 17, FALSE, 101, FALSE, FALSE, FALSE, 111, FALSE, FALSE, FALSE, 111, FALSE, FALSE, FALSE, 194, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 164, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 191, 192, 193, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 201, 201, 202, FALSE, FALSE, FALSE, FALSE, 206, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 257, FALSE, FALSE, FALSE, FALSE, FALSE, 255, FALSE, FALSE, FALSE, FALSE, FALSE, 256, 243, 244, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 275, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 398, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 416, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 448, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE);
		Global.PAN_NEEDED = Array(99, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 5, 2, 5, 3, 5, 5, 5, 5, 5, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 5, 5, 5, 6, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 3, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 99, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 6, 6, 5, 5);
		Global.PAN_RESULT = Array(FALSE, 3, 4, FALSE, FALSE, 8, 11, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 16, FALSE, FALSE, FALSE, FALSE, 21, 21, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 32, FALSE, 35, 36, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 399, FALSE, 94, 91, 91, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 89, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 109, FALSE, FALSE, FALSE, 110, FALSE, 136, FALSE, FALSE, 21, FALSE, FALSE, FALSE, 120, FALSE, FALSE, FALSE, 137, 123, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 145, 145, FALSE, FALSE, 149, 150, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 156, FALSE, FALSE, FALSE, 162, 165, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 188, 189, 190, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 195, FALSE, FALSE, FALSE, 203, 203, FALSE, FALSE, FALSE, FALSE, FALSE, 207, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 396, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 335, 264, FALSE, FALSE, FALSE, FALSE, 271, 272, 272, FALSE, FALSE, 274, FALSE, FALSE, 277, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 303, FALSE, FALSE, FALSE, 303, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 336, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 367, 368, FALSE, FALSE, FALSE, FALSE, 372, 372, FALSE, FALSE, FALSE, FALSE, 378, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 387, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 395, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 407, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 417, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 455, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 468, FALSE, FALSE, FALSE, 473, 474, FALSE, FALSE);
		Global.IMPACT_RESULT = Array(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 10, FALSE, FALSE, FALSE, FALSE, 98, 98, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 104, 103, 103, FALSE, 108, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 115, 117, 118, 119, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 151, 151, FALSE, FALSE, FALSE, FALSE, FALSE, 31, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 211, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 230, FALSE, FALSE, FALSE, FALSE, FALSE, 236, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 276, 293, 294, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 306, FALSE, 307, FALSE, FALSE, 305, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE);
		Global.RAW_MIX = Array(21025, 21026, 6127, 6129, 7021, 13017, 13018, 13022, 13030, 13029, 15038, 15040, 15041, 15043, 15044, 15046,
			15048, 15051, 17018, 17119, 18021, 20038, 20040, 20042, 20043, 20045, 20046, 20049, 20052, 32038, 32041, 32042, 32043, 32047,
			32048, 32049, 32053, 34038, 34040, 34041, 34042, 34044, 34045, 34047, 34050, 39040, 39044, 39049, 39053, 39052, 39054, 66072,
			67072, 68072, 70077, 73075, 73077, 74075, 74076, 76085, 77085, 78085, 79085, 79084, 113125, 121127, 124127, 124130, 21022,
			71144, 71151, 71158, 71161, 144158, 144161, 151158, 151161, 158161, 167158, 169144, 171071, 167161, 170144, 172071, 168158,
			169151, 173071, 168161, 170151, 174071, 169161, 170158, 175071, 171161, 172158, 175144, 176161, 177158, 180144, 181071, 178161,
			179158, 180151, 182071, 168118, 183118, 184118, 167175, 169172, 170171, 168175, 169174, 170173, 2077, 156194, 145152,
			145195, 109195, 105109, 106145, 77199, 199211, 209209, 77211, 194201, 194196, 194197, 110214, 194216, 110194, 196218, 197218,
			110217, 216218, 72160, 72200, 72199, 84194, 110225, 84218, 231231, 231232, 231233, 232232, 237237, 237238, 237239, 238238,
			227227, 257243, 255243, 256243, 255245, 148143, 150143, 243258, 243193, 258260, 259193, 108114, 262184, 34152, 104214, 104217,
			104225, 246267, 248267, 250267, 165272, 4272, 274272, 275272, 286120, 286277, 287120, 287277, 288120, 288277, 289120, 289277,
			295303, 306307, 295296, 309324, 306324, 305324, 307324, 308296, 303301, 296302, 296301, 296304, 296299, 310301, 310304, 310306, 311304, 311299, 312299, 314304, 314299, 315299, 317299, 311302, 312302, 313302, 312301, 313301, 313304, 315301, 316301, 316304, 318304, 317302, 318302, 319302, 319301, 320299, 321304, 322301, 323302, 335332, 337123, 337110, 335333, 336332, 343123, 343110, 336333, 337299, 338299, 339299, 340123, 340110, 346123, 346110, 349123, 349110, 332303, 303262, 303324,
			303362, 3369, 160369, 269371, 269374, 371374, 379374, 380371, 381269, 243382, 2383, 365383, 127389, 38085, 39392, 2079, 399272, 368272, 404310, 404329, 405262, 243398, 18085, 75299, 178273, 414118, 374166, 400120, 401120, 13387, 245255, 77419, 63064,
			18435, 13436, 3025, 79439, 399440, 399439, 156127, 273127, 187241, 38138, 40138, 32449, 41138, 20449, 20450, 32451, 44138, 39452, 79160, 194455, 109456, 72273, 72459, 461462, 194463, 209459, 7204, 256440, 217120, 217277, 70117, 143117
			);
		Global.RAW_RESULT = Array(28, 27, 130, 131, 23, 24, 25, 26, 27, 28, 42, 45, 47, 49, 50, 52, 53, 54, 22, 125, 29, 41, 44, 47, 48,
			50, 51, 53, 54, 40, 44, 45, 46, 50, 51, 52, 54, 43, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 81, 82, 83, 78, 76, 79,
			77, 79, 87, 88, 96, 86, 97, 127, 128, 129, 131, 30, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 176, 176, 177, 177, 177,
			178, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 183, 183, 183, 183, 184, 184, 184, 184, 185, 186, 187, 183, 183,
			183, 184, 184, 184, 155, 152, 153, 105, 106, 146, 146, 205, 209, 210, 212, 213, 214, 214, 215, 217, 218, 215, 215, 219,
			219, 221, 222, 224, 225, 226, 226, 232, 233, 234, 234, 238, 239, 240, 240, 228, 246, 248, 250, 252, 253, 254, 259, 260, 261,
			261, 262, 263, 107, 215, 219, 226, 247, 249, 251, 286, 287, 288, 289, 278, 279, 280, 281, 282, 283, 284, 285,
			308, 309, 324, 325, 326, 327, 328, 329, 330, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 320, 321, 322, 323, 331, 331, 331, 331, 337, 338, 339, 340, 343, 344, 345, 346, 349, 350, 351, 341, 342, 347, 348, 350, 351, 333, 334, 329,
			363, 375, 376, 379, 380, 381, 382, 382, 382, 383, 384, 385, 390, 392, 393, 394, 400, 401, 402, 403, 406, 408, 412, 413, 414, 415, 418, 409, 410, 411, 252, 369, 354,
			436, 437, 438, 440, 441, 442, 444, 445, 447, 449, 450, 450, 451, 451, 452, 452, 452, 453, 454, 456, 457, 458, 460, 463, 464, 465, 466, 467, 469, 470, 471, 472
			);
		Global.MIXING_RECIPE = Mapped Array(Global.ITEM_NAME, Empty Array);
		Global.MIXING_RESULT = Global.MIXING_RECIPE;
		For Global Variable(checkingIndex, False, Count Of(Global.RAW_MIX), True);
			Modify Global Variable At Index(MIXING_RECIPE, Global.RAW_MIX[Global.checkingIndex] % 1000, Append To Array, Round To Integer(
				Global.RAW_MIX[Global.checkingIndex] / 1000, Down));
			Modify Global Variable At Index(MIXING_RECIPE, Round To Integer(Global.RAW_MIX[Global.checkingIndex] / 1000, Down),
				Append To Array, Global.RAW_MIX[Global.checkingIndex] % 1000);
			Modify Global Variable At Index(MIXING_RESULT, Global.RAW_MIX[Global.checkingIndex] % 1000, Append To Array,
				Global.RAW_RESULT[Global.checkingIndex]);
			Modify Global Variable At Index(MIXING_RESULT, Round To Integer(Global.RAW_MIX[Global.checkingIndex] / 1000, Down),
				Append To Array, Global.RAW_RESULT[Global.checkingIndex]);
		End;
		Global.MENU_LIST = Array(Array(3, 4, 7, 10, 23, 24, 25, 26, 28, 27), Array(7, 23, 55, 56, 57, 58, 59, 60), Array(84, 85, 86, 87, 88,
			89, 90, 96), Array(7, 23, 126, 132, 133, 134, 135), Array(193, 188, 189, 190, 191, 192), Array(105, 106, 107, 146, 152, 153,
			194, 101, 103, 109, 110, 111, 156, 218), Array(196, 202, 203, 209, 210, 211, 213, 214, 215, 219, 220, 223, 226), Array(193,
			246, 247, 248, 249, 250, 251, 259, 260, 261, 264, 111), Array(278, 279, 280, 281, 282, 283, 284, 285, 293, 294),
			Array(308, 310, 311, 312, 313, 324, 325, 326, 327, 328, 329, 330, 331),
			Array(337, 338, 339, 337, 338, 339, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 362, 363),
			Array(3, 4, 162, 165, 367, 377, 418, 375, 378, 384, 385, 156)
			);
		Global.HAZARD_MENU_LIST = Array(Array(0, 8, 9, 11, 13, 15, 16, 20, 32, 139), Array(0, 3, 4, 8, 9, 10, 11, 16, 20, 35,
			36, 139, 140), Array(0, 80, 91, 92, 93, 94, 95, 216), Array(0, 8, 9, 10, 11, 120, 293, 123, 137, 138), Array(0,
			91, 92, 94, 120, 293, 145, 147, 148, 148, 150, 158, 162, 163, 164, 165, 166, 176, 177, 178, 179, 180, 181, 253, 254), Array(0,
			1, 2, 3, 4, 33, 34, 35, 36, 77, 100, 102, 104, 108, 112, 142, 143, 144, 145, 154, 155, 195), Array(0, 101, 102, 103, 106,
			109, 110, 111, 162, 163, 164, 165, 166, 194, 195, 204, 218, 84, 85, 90), 
			Array(0, 190, 109, 110, 101, 102, 103, 120, 293), 
			Array(0, 162, 163, 165, 3, 4, 32, 274, 275, 271, 272, 139, 164, 166),
			Array(0, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323),
			Array(0, 332, 333, 335, 336, 101, 102, 103, 109, 110, 111, 118, 120, 293, 123, 138, 299, 306),
			Array(0, 271, 372, 374, 383)
			);
		Global.FRIDGE_LIST = Array(Array(1, 5, 19, 12, 14, 18), Array(37, 1, 14, 33, 19, 5), Array(66, 72, 69, 73, 74, 75), Array(114, 14,
			113, 121, 122, 5), Array(159, 142, 114, 69, 157, 147), Array(1, 142, 112, 100, 33, 77), Array(198, 159, 112, 100, 66, 72), Array(114, 266, 184, 100, 241, 258), Array(114, 1, 290, 159, 273, 268),
			Array(295, 296, 298, 297, 300, 299),
			Array(114, 332, 298, 100, 122, 299),
			Array(268, 370, 373, 74, 241, 75)
			);
		Global.MELT_LIST = Array(296, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 402, 403);
		Global.ADDITIONAL_MATERIAL_LIST = Array(
			rrayrray(1, 419), FALSE, Array(159, 419), Array(159, 419), FALSE, FALSE, FALSE, FALSE, FALSE, 1, 364, FALSE, FALSE, FALSE, FALSE, FALSE, 388, FALSE, Array(66, 72), FALSE, 73, 77, FALSE, FALSE, FALSE, FALSE, FALSE, 404, 404, FALSE, FALSE, FALSE, 405, 397, 66, 364, 386, 18, 75, FALSE, FALSE, 273, 273, 159, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 435, FALSE, FALSE, FALSE, 439, 439, Array(1, 77), FALSE, FALSE, 273, FALSE, 241, FALSE, FALSE, FALSE, FALSE, 122, FALSE, Array(73, 159), Array(73, 159), Array(73, 159), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, Array(273, 459), 459, 5, FALSE, 440, Array(66, 112), Array(66, 112), FALSE, FALSE, 69, 142
		);
		Global.WEAVER_MENU_LIST = Array(
			Array(411, 437),
			Array(393, 453),
			Array(412, 441, 442),
			Array(391, 443, 446),
			Array(416, 417, 448),
			Array(395, 455, 456, 457),
			Array(396, 206, 207, 464, 465, 466),
			Array(408, 252, 468),
			Array(409, 410, 469, 470),
			Array(402, 403, 413),
			Array(407, 473, 474),
			Array(203, 274)
		);
		Global.STAGE_NAME = String Split(Custom String("ステーキ&パスタ/バーガー/フライドチキン/ピザ/餃子/韓国風ご飯料理/寿司&丼物/麺/タコス/アイスクリーム{0}",
				Custom String("/ホットケーキ/肉屋食堂")), Custom String("/"));
		Global.upgradePrice = Array(Array(100, 250, 750), Array(100, 50, 50), Array(100, 100, 100, 100), Array(100, 100, 100));
		Global.UPGRADE_CODE = Array(Array(265, -1, -2), Array(0, 1, 2), Array(3, 4, 5, 6), Array(7, 8, 9));
		Global.KNIFE = Array(61, 265, 62, 63, 64, 65, 354);
        Global.PERK_LIST = Array(352, 353, 355, 356, 357, 358, 359, 360, 361, 433, 434);
		Global.KNIFE_AMOUNT = Array(1.200, 1.500, 1.500, 1.500, 3, 1.200, 6);
		Global.KNIFE_DECREASE = Array(0.150, 0.100, 0.050, 0.050, 0.050, 0.100, 0.030);
		Global.UPGRADE_NAME = String Split(Custom String("保存用バット購入/ランダムアイテム購入/プライヤー強化/鍋強化/グリル強化/フライパン強化/個人のスピードアップ/チームの営業タイムアップ"), Custom String("/"));
		Global.UPGRADE_NAME = String Split(
			Custom String("保存用バット購入/ランダムアイテム購入/保存食ボックス購入/プライヤー強化/鍋強化/グリル強化/フライパン強化/{0}",
						Custom String("個人のスピードアップ/チームの営業タイムアップ/コイン交換")),
						Custom String("/"));
	}
}

rule("Global subroutine: Data init3")
{
	event
	{
		Subroutine;
		dataInit3;
	}

	actions
	{
		Global.CUSTOMER_LIST = Array(
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76)),
				Array(Hero(Roadhog), Hero(Tracer), Hero(Bastion), Hero(Hanzo), Hero(Zarya), Hero(Mercy), Hero(D.Va), Hero(Mauga), Hero(Hazard), Hero(LifeWeaver)),
				Array(Hero(LifeWeaver), Hero(LifeWeaver)),
				Array(Hero(Soldier: 76), Hero(Soldier: 76))
			),
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Soldier: 76)), 
				Array(Hero(Soldier: 76), Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Bastion), Hero(Bastion)), 
				Array(Hero(Hanzo), Hero(Tracer)), 
				Array(Hero(Zarya), Hero(Bastion)), 
				Array(Hero(Hanzo), Hero(Mercy)), 
				Array(Hero(Hanzo), Hero(Soldier: 76)), 
				Array(Hero(Zarya), Hero(Hanzo), Hero(Mercy)), 
				Array(Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Hanzo), Hero(Roadhog), Hero(Mercy)), 
				Array(Hero(Hanzo), Hero(Zarya), Hero(Bastion)), 
				Array(Hero(Roadhog), Hero(Mercy), Hero(Tracer)), 
				Array(Hero(Tracer), Hero(Hanzo), Hero(Zarya)), 
				Array(Hero(Hanzo), Hero(Zarya), Hero(Bastion), Hero(Mercy))
			), 
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Soldier: 76)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Mercy)), 
				Array(Hero(Hanzo), Hero(Bastion), Hero(Hanzo), Hero(Bastion), Hero(Bastion)), 
				Array(Hero(Hazard), Hero(Roadhog), Hero(LifeWeaver)), 
				Array(Hero(Hazard), Hero(Bastion), Hero(Bastion), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Roadhog), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Mercy), Hero(Mercy), Hero(Hazard)), 
				Array(Hero(D.Va), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76)), 
				Array(Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya)), 
				Array(Hero(D.Va), Hero(Mercy), Hero(Mercy), Hero(Tracer), Hero(Tracer), Hero(Tracer), Hero(Tracer)), 
				Array(Hero(Roadhog), Hero(Hazard), Hero(Zarya), Hero(Zarya), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Bastion), Hero(Bastion), Hero(Bastion), Hero(LifeWeaver)), 
				Array(Hero(Moira), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(LifeWeaver), Hero(Soldier: 76)), 
				Array(Hero(D.Va), Hero(Moira), Hero(Hazard), Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya), Hero(D.Va), Hero(LifeWeaver))
			), 
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76),Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Soldier: 76)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Mercy)), 
				Array(Hero(Hanzo), Hero(Bastion), Hero(Hanzo), Hero(Bastion), Hero(Bastion)), 
				Array(Hero(Hazard), Hero(Roadhog), Hero(LifeWeaver)), 
				Array(Hero(Hazard), Hero(Bastion), Hero(Bastion), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Roadhog), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Mercy), Hero(Mercy), Hero(Hazard)), 
				Array(Hero(D.Va), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76)),
				Array(Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya)), 
				Array(Hero(D.Va), Hero(Mercy), Hero(Mercy), Hero(Tracer), Hero(Tracer), Hero(Tracer), Hero(Tracer)), 
				Array(Hero(Moira), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(LifeWeaver), Hero(Soldier: 76)), 
				Array(Hero(D.Va), Hero(Moira), Hero(Hazard), Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya), Hero(LifeWeaver), Hero(LifeWeaver))
			), 
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Soldier: 76)), 
				Array(Hero(Hanzo), Hero(Bastion), Hero(Hanzo), Hero(Bastion), Hero(Bastion)), 
				Array(Hero(Hazard), Hero(Roadhog), Hero(LifeWeaver)), 
				Array(Hero(D.Va), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76)), 
				Array(Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya)), 
				Array(Hero(Moira), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(LifeWeaver), Hero(Soldier: 76)), 
				Array(Hero(D.Va), Hero(Moira), Hero(Hazard), Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya), Hero(D.Va), Hero(LifeWeaver))
			))[Global.stageMode];
		Global.STAGE_CODE = Array(
			Array(Array(0), Array(0), Array(0), Array(0)),
			Array(Array(0), Array(2), Array(3), Array(0), Array(2), Array(0), Array(3), Array(6), Array(2), Array(1), Array(6), Array(3), Array(1), Array(6), Array(1)), 
			Array(Array(0), Array(2), Array(9), Array(6), Array(3), Array(5), Array(4), Array(7), Array(8), Array(1), Array(10), Array(11),
				Array(Random Integer(0, 11)), 
				Array(Random Integer(0, 11)), 
				Random Value In Array(Array(Array(5, 6), Array(4, 8), Array(2, 3), Array(0, 1), Array(0, 3), Array(2, 6), Array(9, 10), Array(7, 10)))),
			Array(
					Array(Random Integer(0, 5)),
					Array(Random Integer(6, 11)), 
					Array(Random Integer(0, 5)),
					Array(Random Integer(6, 11)), 
					Array(Random Integer(0, 5)),
					Array(Random Integer(6, 11)), 
					Array(Random Integer(0, 5)),
					Array(Random Integer(6, 10)),
					Random Value In Array(Array(Array(5, 6), Array(4, 7), Array(3, 8), Array(2, 3), Array(9, 10))),
					Random Value In Array(Array(Array(0, 1), Array(3, 7), Array(7, 8), Array(2, 6), Array(7, 10))), 
					Random Value In Array(Array(Array(5, 6), Array(4, 7), Array(3, 8), Array(2, 3), Array(9, 10))), 
					Random Value In Array(Array(Array(0, 1), Array(3, 7), Array(7, 8), Array(2, 6), Array(7, 10))), 
					Random Value In Array(Array(Array(0, 1, 3),	Array(2, 5, 6), Array(3, 4, 7), Array(3, 7, 8), Array(3, 7, 10), Array(8, 9, 10)))
			)
		)[Global.stageMode];
	}
}

rule("Global subroutine: Start stage")
{
	event
	{
		Subroutine;
		startStage;
	}

	actions
	{
		Global.isVipAngry = False;
		Global.isBonusStage = Global.stage > 7 && Global.stageMode == 3 ? True : False;
		If(Global.isBonusStage);
			Global.failCount = 0;
		End;
		Global.currentCustomer = Global.CUSTOMER_LIST[Global.stage];
		Global.currentMenu = Empty Array;
		Global.skipSetup = False;
		All Players(Team 1).missSurveCount = 1;
		Global.cuttingPlayer[0] = Null;
		Global.cuttingPlayer[1] = Null;
		For Global Variable(loadingMenu, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
			Modify Global Variable(currentMenu, Append To Array, Global.MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenu]]);
		End;
		Global.loadingMenu = Randomized Array(Global.currentMenu);
		Global.hintText = Array(Custom String(""));
		If(Global.difficulty == 0 && Global.stageMode == 1 && Workshop Setting Toggle(Custom String("設定"), Custom String("カジュアルダイニングチュートリアルを表示"), False, 3));
			Call Subroutine(setHint);
		End;
		Global.currentMenuHaz = Empty Array;
		For Global Variable(loadingMenuHaz, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
			Modify Global Variable(currentMenuHaz, Append To Array,
				Global.HAZARD_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuHaz]]);
		End;
		Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
		Global.currentMenuWeaver = Empty Array;
		For Global Variable(loadingMenuWeaver, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
			Modify Global Variable(currentMenuWeaver, Append To Array,
				Global.WEAVER_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuWeaver]]);
		End;
		Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
		Global.fridgeCode = Global.FRIDGE_LIST[Global.STAGE_CODE[Global.stage]];
		Set Objective Description(All Players(All Teams), Custom String("営業準備"), Visible To);
		Create Progress Bar HUD Text(All Players(All Teams), Match Time * Evaluate Once(100 / Global.setUpTime), Custom String(""), Top,
			True, Custom Color(200, 255, False, 150 + Sine From Radians(Total Time Elapsed * 5) * 105), Null, Visible To Values and Color,
			Default Visibility);
		Global.globalText[False] = Last Text ID;
		Global.scoringIndex = Hero Icon String(First Of(Global.CUSTOMER_LIST[Global.stage]));
		For Global Variable(systemScore, True, Count Of(Global.CUSTOMER_LIST[Global.stage]), True);
			If(!String Contains(Global.scoringIndex, Hero Icon String(Global.CUSTOMER_LIST[Global.stage][Global.systemScore])));
				Global.scoringIndex = String("{0} {1}", Global.scoringIndex, Hero Icon String(
					Global.CUSTOMER_LIST[Global.stage][Global.systemScore]));
			End;
		End;
		Create HUD Text(All Players(All Teams), Custom String(" {0} \r\n　　　　　　　　　　　　　\r\n 料理 : {1} \r\n 客 : {2}", Custom String(
			"{0}{2}stage {1}", Array(Custom String("入門レベル"), Custom String("熟練レベル"), Custom String("プロレベル"), Custom String(
			"Hell's Kitchen"))[Global.difficulty], Custom String("{0} / {1}", Global.stage + True, Count Of(Global.STAGE_CODE)), Global.isBonusStage ? Custom String("\r\n Bonus ") : Custom String(
			" - ")), Count Of(Global.STAGE_CODE[Global.stage]) > 1 ? Custom String("フュージョン")
			: Global.STAGE_NAME[Global.STAGE_CODE[Global.stage]], Global.scoringIndex), Null, Custom String(
			"\r\n\r\n\r\n\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
			Left, -2, Custom Color(Evaluate Once(Array(140, 110, 255, 255)[Global.difficulty]), Evaluate Once(Array(255, 180, 225, 120)
			[Global.difficulty]), Evaluate Once(Array(180, 255, 120, 120)[Global.difficulty]), 200 + Sine From Radians(
			Total Time Elapsed * 5) * 55), Null, Null, Visible To String and Color, Default Visibility);
		Global.globalText[True] = Last Text ID;
		Set Match Time(Global.setUpTime);
		Wait Until(Global.skipSetup, Global.setUpTime);
		Global.isVipAngry = False;
		Big Message(All Players(All Teams), Custom String("営業開始!"));
		Destroy Progress Bar HUD Text(Global.globalText[False]);
		Destroy HUD Text(Global.globalText[True]);
		Destroy HUD Text(Global.globalText[2]);
		Global.isOpen = True;
		Global.stageColor = Color(Violet);
		Global.stageScore = Null;
		Global.visibleScore = Null;
		Global.systemScore = Null;
		Chase Global Variable At Rate(visibleScore, Global.systemScore, Absolute Value(Global.visibleScore - Global.systemScore)
			* 2 + True, Destination and Rate);
		Create Progress Bar HUD Text(All Players(All Teams), Global.visibleScore, Custom String("{0}%", Round To Integer(
			Global.visibleScore, To Nearest)), Top, 2, Global.stageColor, Global.stageColor, Visible To Values and Color,
			Default Visibility);
		Global.globalText[False] = Last Text ID;
		Create HUD Text(All Players(All Teams), Custom String("　　　　　注文書　　　　　"), Null, Custom String(
			"\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
			Left, False, Custom Color(Evaluate Once(Array(140, 110, 255, 255)[Global.difficulty]), Evaluate Once(Array(255, 180, 225, 120)
			[Global.difficulty]), Evaluate Once(Array(180, 255, 120, 120)[Global.difficulty]), 200 + Sine From Radians(
			Total Time Elapsed * 5) * 55), Null, Null, Visible To and Color, Default Visibility);
		Global.globalText[True] = Last Text ID;
		Set Objective Description(All Players(All Teams), Custom String("Stage {0}", Global.stage + True), Visible To);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(222.007, True, 165.207), 200);
		Set Match Time(Global.stageTime);
		Start Rule(callCustomer, Restart Rule);
		All Players(Team 1).score = Null;
		Wait(0.016, Ignore Condition);
		Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
		If(Global.visibleScore < 100);
			Global.failCount += True;
			Big Message(All Players(All Teams), Global.isBonusStage ? Custom String("{0}fgC80013FF>ボーナス営業失敗!", Global.tx) : Custom String("{0}fgC80013FF>営業失敗!{0}fgFFFFFFFF> ({1} / {2})",
				Global.tx, Global.failCount, Global.failEnd));
			Play Effect(All Players(Team 1), Doomfist Meteor Strike Impact Sound, Null, Vector(222.007, True, 165.207), 200);
			Global.scbRank[3] += 1;
			If(Global.failCount == Global.failEnd);
				Global.isVictory = False;
				Call Subroutine(gameSummary);
			End;
		Else;
			Global.stageColor = Color(Turquoise);
			Global.systemScore -= 100;
			Global.visibleScore = Null;
			Play Effect(All Players(Team 1), Lúcio Sound Barrier Cast Sound, Null, Vector(222.007, True, 165.207), 200);
			If(Global.difficulty >= 2);
				Big Message(All Players(All Teams), Custom String("押し寄せる客!"));
				Communicate(All Players(Team 1), Push Forward);
				Global.loadNext += 1;
				Global.customerCallTime -= 3;
				Wait(0.016, Ignore Condition);
				Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
				If(Global.visibleScore < 100);
					Global.failCount += True;
					Big Message(All Players(All Teams), Global.isBonusStage ? Custom String("{0}fgC80013FF>ボーナス営業失敗!", Global.tx) : Custom String("{0}fgC80013FF>営業失敗!{0}fgFFFFFFFF> ({1} / {2})",
						Global.tx, Global.failCount, Global.failEnd));
					Play Effect(All Players(Team 1), Doomfist Meteor Strike Impact Sound, Null, Vector(222.007, True, 165.207), 200);
					Global.scbRank[3] += 1;
					If(Global.failCount == Global.failEnd);
						Global.isVictory = False;
						Call Subroutine(gameSummary);
					End;
				Else;
					Global.stageColor = Color(Rose);
					Global.systemScore -= 100;
					Global.visibleScore = Null;
					Big Message(All Players(All Teams), Custom String("全従業員ボーナス!"));
					All Players(Team 1).score += 20;
					Play Effect(All Players(Team 1), Lúcio Sound Barrier Cast Sound, Null, Vector(222.007, True, 165.207), 200);
					Wait(0.016, Ignore Condition);
					Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
					If(Global.visibleScore < 100);
						Big Message(All Players(All Teams), Custom String("営業完了!"));
						Global.scbRank[1] += 1;
						All Players(Team 1).score += 10;
					Else;
						Big Message(All Players(All Teams), Custom String("{0}fgFF3291FF>ファンタスティックな営業!", Global.tx));
						Global.scbRank[0] += 1;
						All Players(Team 1).score += 30;
						All Players(Team 2).customerStatus = -1;
					End;
					Global.stage += True;
					Global.totalScore[0] += Global.stageScore + Round To Integer(Match Time, To Nearest);
					Global.customerCallTime -= 0.100;
					Play Effect(All Players(Team 1), DVa Self Destruct Explosion Sound, Null, Vector(222.007, True, 165.207), 200);
					For Global Variable(scoringIndex, False, Number Of Players(Team 1), True);
						Global.scoringPlayer = All Players(Team 1)[Global.scoringIndex];
						If(Global.scoringPlayer.score > False);
							Small Message(Global.scoringPlayer, Custom String("  給料 +${0}", Global.scoringPlayer.score));
							Global.scoringPlayer.dollar += Global.scoringPlayer.score;
							Global.scoringPlayer.scbDollar += Global.scoringPlayer.score;
						End;
					End;
				End;
				Global.customerCallTime += 3;
			Else;
				Big Message(All Players(All Teams), Custom String("全従業員ボーナス!"));
				All Players(Team 1).score += 20;
				Wait(0.016, Ignore Condition);
				Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
				If(Global.visibleScore < 100);
					Big Message(All Players(All Teams), Custom String("営業完了!"));
					Global.scbRank[2] += 1;
				Else;
					Global.stageColor = Color(Rose);
					Global.systemScore -= 100;
					Global.visibleScore = Null;
					Big Message(All Players(All Teams), Custom String("押し寄せる客!"));
					Play Effect(All Players(Team 1), Lúcio Sound Barrier Cast Sound, Null, Vector(222.007, True, 165.207), 200);
					Global.customerCallTime -= 3;
					Communicate(All Players(Team 1), Push Forward);
					Global.loadNext += 1;
					Wait(0.016, Ignore Condition);
					Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
					If(Global.visibleScore < 100);
						Big Message(All Players(All Teams), Custom String("立派な営業!"));
						Global.scbRank[1] += 1;
						All Players(Team 1).score += 10;
					Else;
						Big Message(All Players(All Teams), Custom String("{0}fgFF3291FF>ファンタスティックな営業!", Global.tx));
						Global.scbRank[0] += 1;
						All Players(Team 1).score += 30;
						All Players(Team 2).customerStatus = -1;
					End;
					Global.customerCallTime += 3;
				End;
				Global.stage += True;
				Global.totalScore[0] += Global.stageScore + Round To Integer(Match Time, To Nearest);
				Global.customerCallTime -= 0.100;
				Play Effect(All Players(Team 1), DVa Self Destruct Explosion Sound, Null, Vector(222.007, True, 165.207), 200);
				Small Message(Filtered Array(All Players(Team 1), Current Array Element.score > Null), Custom String("  給料 +${0}",
					Local Player.score));
				For Global Variable(scoringIndex, False, Number Of Players(Team 1), True);
					Global.scoringPlayer = All Players(Team 1)[Global.scoringIndex];
					If(Global.scoringPlayer.score > False);
						Global.scoringPlayer.dollar += Global.scoringPlayer.score;
						Global.scoringPlayer.scbDollar += Global.scoringPlayer.score;
					End;
				End;
			End;
		End;
		Global.isOpen = False;
		Stop Chasing Global Variable(visibleScore);
		Destroy Progress Bar HUD Text(Global.globalText[False]);
		Destroy HUD Text(Global.globalText[True]);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(
			"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Left, -1, Null, Null, Null, Visible To, Default Visibility);
		Global.globalText[2] = Last Text ID;
		Modify Global Variable(upgradeList, Remove From Array By Index, False);
		If(!Count Of(Global.upgradeList));
			Global.upgradeList = Array(Hero(Mei), Hero(Juno), Hero(Junkrat), Hero(Torbjörn));
		End;
		If(Count Of(Global.STAGE_CODE[Global.stage]) && (!Global.isBonusStage || Global.failCount == 0));
			Create Dummy Bot(First Of(Global.upgradeList), Team 2, 17, Vector(196.268, True, 194.391), Null);
		End;
		Wait(0.200, Ignore Condition);
		Global.stageTime -= Global.isBonusStage ? 0 : 5;
		Loop If(Count Of(Global.STAGE_CODE[Global.stage]) && (!Global.isBonusStage || Global.failCount == 0));
		If(Global.difficulty != 3 && Global.stageMode == 3);
			Big Message(All Players(All Teams), Custom String("中間スコア : {0}", Global.totalScore[0]));
			Global.stage = 0;
			Global.difficulty += True;
			Global.failCount = 0;
			Global.customerCallTime = Array(16, 12, 8, 4, 32)[Global.difficulty];
			Global.setUpTime = Array(120, 40, 30, 30, 120)[Global.difficulty];
			Global.scoreDecrease = Array(Array(Null, Null, Null, Null), Array(5, Null, 5, 5), Array(15, Null, 15, 35), Array(50, Null, 50, 50))
				[Global.difficulty];
			Global.despawnTime = Array(30, 25, 20, 15, 60)[Global.difficulty];
			Global.additionalScore = Array(Null, 5, 10, 15)[Global.difficulty];
			Global.failEnd = Array(5, 3, 3, 3)[Global.difficulty];
			Global.stageTime -= 30;
			Global.STAGE_CODE = Array(
				Array(Random Integer(0, 5)),
				Array(Random Integer(6, 11)), 
				Array(Random Integer(0, 5)),
				Array(Random Integer(6, 11)), 
				Array(Random Integer(0, 5)),
				Array(Random Integer(6, 11)), 
				Array(Random Integer(0, 5)),
				Array(Random Integer(6, 10)),  
				Random Value In Array(Array(Array(5, 6), Array(4, 7), Array(3, 8), Array(2, 3), Array(9, 10))),
				Random Value In Array(Array(Array(0, 1), Array(3, 7), Array(7, 8), Array(2, 6), Array(7, 10))), 
				Random Value In Array(Array(Array(5, 6), Array(4, 7), Array(3, 8), Array(2, 3), Array(9, 10))), 
				Random Value In Array(Array(Array(0, 1), Array(3, 7), Array(7, 8), Array(2, 6), Array(7, 10))), 
				Random Value In Array(Array(Array(0, 1, 3),	Array(2, 5, 6), Array(3, 4, 7), Array(3, 7, 8), Array(3, 7, 10), Array(8, 9, 10)))
			);
			Big Message(All Players(All Teams), Custom String("レベル上昇！幸運を祈ります!"));
			Loop;
		Else;
			If(!Count Of(Global.STAGE_CODE[Global.stage]));
				Global.stage = 0;
				Global.isVictory = True;
			End;
			Call Subroutine(gameSummary);
		End;
	}
}

rule("Global subroutine: Item physics")
{
	event
	{
		Subroutine;
		itemPhysics;
	}

	actions
	{
		For Global Variable(checkingIndex, False, Count Of(Global.itemPosition), True);
			If(Global.itemCode[Global.checkingIndex] != -1);
				If(Distance Between(Ray Cast Hit Position(Global.itemPosition[Global.checkingIndex],
					Global.itemPosition[Global.checkingIndex] + Global.itemVelocity[Global.checkingIndex], Null, Null, False),
					Global.itemPosition[Global.checkingIndex]) < Magnitude Of(Global.itemVelocity[Global.checkingIndex]));
					If(Y Component Of(Global.itemPosition[Global.checkingIndex]) > 1.800);
						If(Distance Between(Global.itemPosition[Global.checkingIndex], Vector(208.330, False, 186.208)) < 25);
							Global.checkingCustomerIndex = Index Of Array Value(Global.customerPosition, First Of(Filtered Array(Global.customerPosition,
								Distance Between(Current Array Element, Global.itemPosition[Global.checkingIndex]) < 2)));
							Global.checkingTableIndex = Global.customerIndex[Global.checkingCustomerIndex];
							If(Global.checkingCustomerIndex != -1 && !Global.tableCustomer[Global.checkingTableIndex].customerStatus);
								If(Global.tableOrderCode[Global.checkingTableIndex] == Global.itemCode[Global.checkingIndex]);
									Global.tableCustomer[Global.checkingTableIndex].customerStatus = Global.itemProgress[Global.checkingIndex] == Null && (Array Contains(
										Global.currentMenu, Global.itemCode[Global.checkingIndex]) || Array Contains(Global.currentMenuWeaver, Global.itemCode[Global.checkingIndex])) ? 4 : 1;
									Global.itemLastControl[Global.checkingIndex].scbMissed += Count Of(Filtered Array(Mapped Array(Array Slice(Global.customerIndex, False, Global.checkingCustomerIndex),
										Global.tableCustomer[Current Array Element]), Current Array Element.byOrder == 1));
									Global.itemLastControl[Global.checkingIndex].score -= Count Of(Filtered Array(Mapped Array(Array Slice(Global.customerIndex, False, Global.checkingCustomerIndex),
										Global.tableCustomer[Current Array Element]), Current Array Element.byOrder == 1)) * 5;
									Filtered Array(Mapped Array(Array Slice(Global.customerIndex, False, Global.checkingCustomerIndex),
										Global.tableCustomer[Current Array Element]), Current Array Element.byOrder == 1).customerStatus = 3;
									Modify Global Variable At Index(itemCooker, Global.checkingIndex, Append To Array, Global.itemLastControl[Global.checkingIndex]);
									For Global Variable(scoringIndex, False, Count Of(Global.itemCooker[Global.checkingIndex]), True);
										Global.itemCooker[Global.checkingIndex][Global.scoringIndex].score += True;
										Global.itemCooker[Global.checkingIndex][Global.scoringIndex].score += Max(3 - Count Of(All Players(Team 1)), 0);
										Global.itemCooker[Global.checkingIndex][Global.scoringIndex].scbCooked += 1;
										All Players(Team 1).score += Global.isBonusStage ? True : False;
										All Players(Team 1).score += Global.stageMode != 3 ? True : False;
									End;
									Global.itemLastControl[Global.checkingIndex].scbSurved += 1;
									Global.itemLastControl[Global.checkingIndex].score += Global.isBonusStage ? True : False;
								Else;
									Global.tableCustomer[Global.checkingTableIndex].knifeText = Global.itemLastControl[Global.checkingIndex];
									Global.tableCustomer[Global.checkingTableIndex].customerStatus = 2;
									Global.itemLastControl[Global.checkingIndex].score -= 5;
									Global.itemLastControl[Global.checkingIndex].scbMissed += 1;
								End;
								Global.itemPosition[Global.checkingIndex] = Vector(False, False, False);
								Global.itemCode[Global.checkingIndex] = -1;
								Destroy Effect(Global.itemEffect[Global.checkingIndex]);
								Destroy In-World Text(Global.itemText[Global.checkingIndex]);
								Global.itemCount -= True;
							End;
                        Else;
                            If(Global.POT_RESULT[Global.itemCode[Global.checkingIndex]]);
                                Global.potIndex = Index Of Array Value(Global.POT_POSITION, First Of(Filtered Array(Global.POT_POSITION, Distance Between(
                                    Current Array Element, Global.itemPosition[Global.checkingIndex]) < 0.500)));
                                If(Global.potIndex != -1 && !Global.potTime[Global.potIndex]);
                                    Global.potData[Global.potIndex] = Global.POT_RESULT[Global.itemCode[Global.checkingIndex]];
                                    Global.potTime[Global.potIndex] = Max(Global.POT_TIME[Global.itemCode[Global.checkingIndex]] - Global.potPower, True);
                                    Global.potData[Global.potIndex + 2] = Append To Array(Global.itemCooker[Global.checkingIndex],
                                        Global.itemLastControl[Global.checkingIndex]);
                                    Global.itemPosition[Global.checkingIndex] = Vector(False, False, False);
                                    Global.itemCode[Global.checkingIndex] = -1;
                                    Destroy Effect(Global.itemEffect[Global.checkingIndex]);
                                    Destroy In-World Text(Global.itemText[Global.checkingIndex]);
                                    Global.itemCount -= True;
                                    If(Global.potIndex);
                                        Start Rule(pot1, Restart Rule);
                                    Else;
                                        Start Rule(pot0, Restart Rule);
                                    End;
                                    Continue;
                                End;
                            End;
                            If(Global.storageLevel > -1 && Global.itemCode[Global.checkingIndex] != False && Global.itemControled[Global.checkingIndex] == False);
                                Global.storageIndex = Index Of Array Value(Global.STORAGE_POSITION, First Of(Filtered Array(Global.STORAGE_POSITION, Distance Between(
                                    Current Array Element, Global.itemPosition[Global.checkingIndex]) < 0.200)));
                                If(Global.storageIndex != -1 && Global.storageIndex <= Global.storageLevel && Global.storageData[Global.storageIndex][0] == False);
                                    Global.storageData[Global.storageIndex] = Array(Global.itemCode[Global.checkingIndex], Global.itemDurability[Global.checkingIndex], Global.itemProgress[Global.checkingIndex], Global.itemCooker[Global.checkingIndex]);
                                    Global.itemPosition[Global.checkingIndex] = Vector(False, False, False);
                                    Global.itemCode[Global.checkingIndex] = -1;
                                    Destroy Effect(Global.itemEffect[Global.checkingIndex]);
                                    Destroy In-World Text(Global.itemText[Global.checkingIndex]);
                                    Global.itemCount -= True;
                                    Play Effect(All Players(All Teams), Sombra Translocating Sound, Null, Global.STORAGE_POSITION[Global.storageIndex], 80);
                                    Continue;
                                End;
                            End; 
                        End;
					End;
					Global.normal = Ray Cast Hit Normal(Global.itemPosition[Global.checkingIndex],
						Global.itemPosition[Global.checkingIndex] + Global.itemVelocity[Global.checkingIndex], Null, Null, False);
					If(Global.itemControled[Global.checkingIndex]);
						Global.itemPrevPosition[Global.checkingIndex] = Global.itemPosition[Global.checkingIndex];
						Global.itemPosition[Global.checkingIndex] = Ray Cast Hit Position(
							Global.itemPosition[Global.checkingIndex] + Global.normal * 0.200,
							Global.itemPosition[Global.checkingIndex] + Global.itemVelocity[Global.checkingIndex] * 3.250 + 2 * Global.normal * Dot Product(
							-1 * Global.itemVelocity[Global.checkingIndex], Global.normal) * 1.250, Null, Null, False)
							- Global.itemVelocity[Global.checkingIndex] * 0.200;
					Else;
						If(Magnitude Of(Global.itemVelocity[Global.checkingIndex]) > 0.250 && Global.IMPACT_RESULT[Global.itemCode[Global.checkingIndex]]);
							Play Effect(All Players(All Teams), Bad Explosion, Global.ITEM_COLOR[Global.itemCode[Global.checkingIndex]],
								Global.itemPosition[Global.checkingIndex], True);
							If(Count Of(Global.IMPACT_RESULT[Global.itemCode[Global.checkingIndex]]) == False);
								Play Effect(All Players(All Teams), Junkrat Frag Launcher Explosion Sound, Null, Global.itemPosition[Global.checkingIndex], 75);
								Modify Global Variable At Index(itemCooker, Global.checkingIndex, Append To Array, Global.itemLastControl[Global.checkingIndex]);
								Global.itemCode[Global.checkingIndex] = Global.IMPACT_RESULT[Global.itemCode[Global.checkingIndex]];
								Global.itemProgress[Global.checkingIndex] = Null;
							End;
						End;
						Global.itemVelocity[Global.checkingIndex] = (Global.itemVelocity[Global.checkingIndex] + 2 * Global.normal * Dot Product(
							-1 * Global.itemVelocity[Global.checkingIndex], Global.normal)) * 0.500;
					End;
					Global.itemNormal[Global.checkingIndex] = Global.normal;
				Else;
					If(Magnitude Of(Global.itemVelocity[Global.checkingIndex]) >= 0.011);
						Global.itemPosition[Global.checkingIndex] += Global.itemVelocity[Global.checkingIndex] * 0.999;
					End;
					Global.itemVelocity[Global.checkingIndex] += Down * 0.009;
				End;
			End;
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Global subroutine: Item cooking")
{
	event
	{
		Subroutine;
		itemCooking;
	}

	actions
	{
		For Global Variable(cookingIndex, False, Count Of(Global.itemPosition), True);
			If(Global.itemCode[Global.cookingIndex] != -1 && Y Component Of(Global.itemPosition[Global.cookingIndex]) > 1.750);
				If(Distance Between(Global.itemPosition[Global.cookingIndex], Vector(224.552, 2, 161.294)) < 1);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Global.itemPosition[Global.cookingIndex], 0.750);
					Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Null, Vector(224.552, 2, 161.294), 15);
					Global.itemVelocity[Global.cookingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.005 + Vector(False, 0.075,
						False);
					Global.itemDespawn[Global.cookingIndex] = Array Contains(Global.MELT_LIST, Global.itemCode[Global.cookingIndex]) ? 99 : Null;
					If(Global.itemStatus[Global.cookingIndex] == 2);
						Global.itemProgress[Global.cookingIndex] += Global.fryingPower;
					Else;
						Global.itemStatus[Global.cookingIndex] = 2;
						Global.itemProgress[Global.cookingIndex] = Global.fryingPower;
					End;
					If(Global.itemProgress[Global.cookingIndex] >= Global.FRYING_NEEDED[Global.itemCode[Global.cookingIndex]]);
						Global.itemCode[Global.cookingIndex] = Global.FRYING_RESULT[Global.itemCode[Global.cookingIndex]];
						Global.itemProgress[Global.cookingIndex] = Null;
						Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Null, Vector(224.552, 2, 161.294), 100);
						Modify Global Variable At Index(itemCooker, Global.cookingIndex, Append To Array, Global.itemLastControl[Global.cookingIndex]);
					End;
				Else If(Distance Between(Global.itemPosition[Global.cookingIndex], Vector(223.169, 2, 157.009)) < 0.550 || Distance Between(
						Global.itemPosition[Global.cookingIndex], Vector(224.003, 2, 157.566)) < 0.550);
					Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Global.itemPosition[Global.cookingIndex], True);
					Global.itemDespawn[Global.cookingIndex] = Array Contains(Global.MELT_LIST, Global.itemCode[Global.cookingIndex]) ? 99 : Null;
					If(Global.itemStatus[Global.cookingIndex] == 3);
						Global.itemProgress[Global.cookingIndex] += Global.grillingPower;
					Else;
						Global.itemStatus[Global.cookingIndex] = 3;
						Global.itemProgress[Global.cookingIndex] = Global.grillingPower;
					End;
					If(Global.itemProgress[Global.cookingIndex] >= Global.GRILLING_NEEDED[Global.itemCode[Global.cookingIndex]]);
						Global.itemCode[Global.cookingIndex] = Global.GRILLING_RESULT[Global.itemCode[Global.cookingIndex]];
						Global.itemProgress[Global.cookingIndex] = Null;
						Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Null, Vector(223.575, 2, 157.296), 50);
						Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Global.itemPosition[Global.cookingIndex], 0.500);
						Global.itemVelocity[Global.cookingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.005 + Vector(False, 0.075,
							False);
						Modify Global Variable At Index(itemCooker, Global.cookingIndex, Append To Array, Global.itemLastControl[Global.cookingIndex]);
					End;
				Else If(Distance Between(Global.itemPosition[Global.cookingIndex], Vector(224.926, 2, 158.167)) < 0.550);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Global.itemPosition[Global.cookingIndex], True);
					Global.itemDespawn[Global.cookingIndex] = Array Contains(Global.MELT_LIST, Global.itemCode[Global.cookingIndex]) ? 99 : Null;
					Global.itemVelocity[Global.cookingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.003 + Vector(False, 0.050,
						False);
					If(Global.itemStatus[Global.cookingIndex] == 4);
						Global.itemProgress[Global.cookingIndex] += Global.panPower;
					Else;
						Global.itemStatus[Global.cookingIndex] = 4;
						Global.itemProgress[Global.cookingIndex] = Global.panPower;
					End;
					If(Global.itemProgress[Global.cookingIndex] >= Global.PAN_NEEDED[Global.itemCode[Global.cookingIndex]]);
						Global.itemCode[Global.cookingIndex] = Global.PAN_RESULT[Global.itemCode[Global.cookingIndex]];
						Global.itemProgress[Global.cookingIndex] = Null;
						Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Null, Vector(224.926, 2, 158.167), 50);
						Modify Global Variable At Index(itemCooker, Global.cookingIndex, Append To Array, Global.itemLastControl[Global.cookingIndex]);
					End;
				End;
			End;
		End;
		Wait(True, Ignore Condition);
		Loop;
	}
}

rule("Global subroutine: Despawn item")
{
	event
	{
		Subroutine;
		despawnItem;
	}

	actions
	{
		For Global Variable(despawnIndex, False, Count Of(Global.itemCode), True);
			If(Global.itemCode[Global.despawnIndex] != -1 && !Global.itemControled[Global.despawnIndex]);
				If(Array Contains(Global.MELT_LIST, Global.itemCode[Global.despawnIndex]));
					Play Effect(All Players(All Teams), Ring Explosion, Global.ITEM_COLOR[Global.itemCode[Global.despawnIndex]],
					Global.itemPosition[Global.despawnIndex], 1.2);
					Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue),
					Global.itemPosition[Global.despawnIndex], 1);
				End;
				Global.itemDespawn[Global.despawnIndex] += 
					Array Contains(Global.MELT_LIST, Global.itemCode[Global.despawnIndex]) ? 20 : 
					Global.itemCode[Global.despawnIndex] == False ? 2 : 
					(Array Contains(Global.STAGE_CODE[Global.stage], 11) || (Global.difficulty == 4 && Global.totalScore[0] == 11)) 
					&& Array Contains(Global.ADDITIONAL_MATERIAL_LIST, Global.itemCode[Global.despawnIndex]) ? 0.5 : 
					True;
				If(Global.itemDespawn[Global.despawnIndex] > Global.despawnTime);
					Destroy Effect(Global.itemEffect[Global.despawnIndex]);
					Destroy In-World Text(Global.itemText[Global.despawnIndex]);
					Global.itemPosition[Global.despawnIndex] = Down;
					Global.itemCode[Global.despawnIndex] = -1;
					Global.itemCount -= True;
				Else If(Global.itemDespawn[Global.despawnIndex] > Global.despawnTime / 3 || Global.itemProgress[Global.despawnIndex] != Null);
					Global.itemProgress[Global.despawnIndex] += 0.001;
				End;
			End;
			If((Array Contains(Global.currentMenu, Global.itemCode[Global.despawnIndex]) || Array Contains(Global.currentMenuWeaver, Global.itemCode[Global.despawnIndex]))
				&& Global.itemDespawn[Global.despawnIndex] < Global.despawnTime / 3 && Global.itemProgress[Global.despawnIndex] == Null);
				Play Effect(All Players(All Teams), Heal Target Active Effect, Global.ITEM_COLOR[Global.itemCode[Global.despawnIndex]],
					Global.itemPosition[Global.despawnIndex], 0.500);
			End;
		End;
		Wait(2, Ignore Condition);
		Loop;
	}
}

rule("Global subroutine: Call customer")
{
	event
	{
		Subroutine;
		callCustomer;
	}

	actions
	{
		Global.customerPosition = Empty Array;
		Global.customerIndex = Empty Array;
		Global.tableFilled = Mapped Array(Global.TABLE_POSITION, False);
		Global.reservedOrder = Empty Array;
		Global.spawningCustomerTable = Random Value In Array(Filtered Array(Mapped Array(Global.tableFilled,
			Current Array Element ? -1 : Current Array Index), Current Array Element != -1));
		Global.tableFilled[Global.spawningCustomerTable] = True;
		Wait(0.016, Ignore Condition);
		While(True);
			If(Global.spawningCustomerTable != -1 && Number Of Players(Team 2) < 15);
				Create Dummy Bot(First Of(Global.currentCustomer), Team 2, -1, Vector(196.268, True, 194.391), Null);
				Modify Global Variable(currentCustomer, Remove From Array By Index, False);
				If(Global.currentCustomer == Empty Array);
					Global.currentCustomer = Randomized Array(Global.CUSTOMER_LIST[Global.stage]);
				End;
				Global.tableCustomer[Global.spawningCustomerTable] = Last Created Entity;
				Last Created Entity.durability = Global.reservedOrder;
				Last Created Entity.customerPath = Global.TABLE_PATH[Global.spawningCustomerTable];
				Last Created Entity.tableIndex = Global.spawningCustomerTable;
			End;
			Global.spawningCustomerTable = Random Value In Array(Filtered Array(Mapped Array(Global.tableFilled,
				Current Array Element ? -1 : Current Array Index), Current Array Element != -1));
			Global.tableFilled[Global.spawningCustomerTable] = True;
			If(First Of(Global.currentCustomer) == Hero(Mercy));
				Global.reservedOrder = First Of(Global.loadingMenu);
				Modify Global Variable(loadingMenu, Remove From Array By Index, False);
				If(Global.loadingMenu == Empty Array);
					Global.loadingMenu = Randomized Array(Global.currentMenu);
				End;
				Wait(0.016, Ignore Condition);
				Small Message(All Players(All Teams), Custom String("  {0}fg00E697FF>#{1}{0}FGffffffFF>テーブル[{0}fgFFFF00FF>{2}{0}FGffffffFF>]予約!  ", Global.tx, Global.spawningCustomerTable + True,
					Global.ITEM_NAME[Global.reservedOrder]));
				If(Array Contains(Global.STAGE_CODE[Global.stage], 11) || (Global.difficulty == 4 && Global.totalScore[0] == 11));
					If(Count Of(Global.ADDITIONAL_MATERIAL_LIST[Global.reservedOrder]) > 1);
						For Player Variable(Event Player, additionalMaterialIndex, False, Count Of(Global.ADDITIONAL_MATERIAL_LIST[Global.reservedOrder]), True);
							Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50, -70)) * 0.100,
								Global.ADDITIONAL_MATERIAL_LIST[Global.reservedOrder][Event Player.additionalMaterialIndex], Null, Null);
							Call Subroutine(createItem);
						End;
					Else;
						Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50, -70)) * 0.100,
							Global.ADDITIONAL_MATERIAL_LIST[Global.reservedOrder], Null, Null);
						Call Subroutine(createItem);
					End;
				End;
			End;
			Wait Until(Global.loadNext > 0, Count Of(Filtered Array(Global.tableFilled, Current Array Element)) + Global.customerCallTime);
			Wait Until(Count Of(Filtered Array(Global.tableFilled, Current Array Element)) <= Array(4, 5, 6, 8, 4)[Global.difficulty] || (Global.stageColor != Color(Violet) && Global.difficulty != 4), 999);
			Wait Until(Count Of(Filtered Array(Global.tableFilled, Current Array Element)) <= Array(6, 8, 8, 10, 4)[Global.difficulty], 999);
			If(Global.loadNext);
				Global.loadNext -= True;
			End;
			Abort If(!Global.isOpen || Match Time < 25);
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("Global subroutine: Pot 0")
{
	event
	{
		Subroutine;
		pot0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Sound, Null, Global.POT_POSITION[False], 80);
		While(Global.potTime[False] > 1);
			Wait(True, Ignore Condition);
			Global.potTime[False] -= True;
		End;
		Wait(True, Ignore Condition);
		Wait Until(Global.itemCount < 32, 9999);
		Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Null, Global.POT_POSITION[False], 80);
		Global.createItemData = Array(Global.POT_POSITION[False], Vector(-0.550, Random Real(0.400, 0.800), 0.840) * 0.050,
			Global.potData[False], Null, Global.potData[2]);
		Call Subroutine(createItem);
		Global.potTime[False] -= True;
	}
}

rule("Global subroutine: Pot 1")
{
	event
	{
		Subroutine;
		pot1;
	}

	actions
	{
		Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Sound, Null, Global.POT_POSITION[True], 80);
		While(Global.potTime[True] > 1);
			Wait(True, Ignore Condition);
			Global.potTime[True] -= True;
		End;
		Wait(True, Ignore Condition);
		Wait Until(Global.itemCount < 32, 9999);
		Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Null, Global.POT_POSITION[True], 80);
		Global.createItemData = Array(Global.POT_POSITION[True], Vector(-0.550, Random Real(0.400, 0.800), 0.840) * 0.050,
			Global.potData[True], Null, Global.potData[3]);
		Call Subroutine(createItem);
		Global.potTime[True] -= True;
	}
}

rule("Global subroutine: Rotating fridge")
{
	event
	{
		Subroutine;
		rotatingFridge;
	}

	actions
	{
		Wait Until(Count Of(Global.STAGE_CODE[Global.stage]) > 1, 99999);
		While(True);
			For Global Variable(fridgeRotation, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
				Wait(3, Ignore Condition);
				Loop If(Count Of(Global.STAGE_CODE[Global.stage]) == 1);
				Play Effect(All Players(All Teams), Sombra Translocating Sound, Null, Vector(233.690, 2, 163.772), 100);
				Global.fridgeCode = Global.FRIDGE_LIST[Global.STAGE_CODE[Global.stage][Global.fridgeRotation]];
			End;
		End;
	}
}

rule("Host Player: Select Mode")
{
	event
	{
		Subroutine;
		selectMode;
	}

	actions
	{
		Wait Until(Is Button Held(Host Player, Button(Reload)) || Is Button Held(Host Player, Button(Jump)), 99999);
		If(Is Button Held(Host Player, Button(Reload)));
			Global.stageMode = (Global.stageMode + True) % 4;
			Wait Until(!Is Button Held(Host Player, Button(Reload)), 99999);
			Loop;
		End;
		Destroy HUD Text(Global.globalText[0]);
		Destroy HUD Text(Global.globalText[1]);
		Destroy HUD Text(Global.globalText[2]);
		Wait(0.018, Ignore Condition);
	}
}

rule("Host Player: Select Permission")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.selectPlayer = Player Closest To Reticle(Host Player, All Teams);
		If(Is Dummy Bot(Global.selectPlayer));
			Global.selectPlayer = Null;
		End;
		If(Distance Between(Host Player, Global.selectPlayer) > 5);
			Global.selectPlayer = Null;
		End;
		Wait(0.250, Ignore Condition);
		Loop;
	}
}

rule("Host Player: Set Permission")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Button Held(Host Player, Button(Ability 2)) == True;
	}

	actions
	{
		If(Global.selectPlayer != Null);
			Global.selectPlayer.permission = (Global.selectPlayer.permission + True) % 3;
			Small Message(All Players(All Teams), Custom String("  {0}{1} - {2} 役職変更!  ", Hero Icon String(Hero Of(Global.selectPlayer)),
				Global.selectPlayer, Global.permissionText[0][Global.selectPlayer.permission]));
		Else If(Global.difficulty == 4);
			Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, Random Value In Array(Global.KNIFE), 100, Null);
			Call Subroutine(createItem);
            Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, Random Value In Array(Global.PERK_LIST), 100, Null);
			Call Subroutine(createItem);
		End;
		Global.cuttingPlayer[0] = Null;
		Global.cuttingPlayer[1] = Null;
	}
}

rule("Global subroutine: Knife Hud")
{
	event
	{
		Subroutine;
		knifeHud;
	}

	actions
	{
		If(Event Player.knifeCode == 0);
			Create HUD Text(Event Player, Custom String(" {1} - {0}% ", Round To Integer(Event Player.durability, Up), Evaluate Once(
				Global.ITEM_NAME[Global.KNIFE[Event Player.knifeCode]])), Null, Custom String("\r\n"), Right, True, Custom Color(
				255 - Event Player.durability * 0.950, Event Player.durability * 2.320, Event Player.durability * 0.270, 255), Null, Null,
				String and Color, Default Visibility);
			Event Player.knifeText = Last Text ID;
		Else If(Event Player.knifeCode == 1);
			Create HUD Text(Event Player, Custom String(" {1} - {0}% ", Round To Integer(Event Player.durability, Up), Evaluate Once(
				Global.ITEM_NAME[Global.KNIFE[Event Player.knifeCode]])), Null, Custom String("\r\n"), Right, True, Custom Color(
				255 - Event Player.durability * 1.860, Event Player.durability * 2.550, Event Player.durability * 0.870, 255), Null, Null,
				String and Color, Default Visibility);
			Event Player.knifeText = Last Text ID;
        Else If(Event Player.knifeCode == 6);
			Create HUD Text(Event Player, Custom String(" {1} - {0}% ", Round To Integer(Event Player.durability, Up), Evaluate Once(
				Global.ITEM_NAME[Global.KNIFE[Event Player.knifeCode]])), Null, Custom String("\r\n"), Right, True, Custom Color(
				Event Player.durability * 1.760, 0, Event Player.durability * 2.500, 255), Null, Null,
				String and Color, Default Visibility);
			Event Player.knifeText = Last Text ID;
		Else If(Event Player.knifeCode != -1);
			Create HUD Text(Event Player, Custom String(" {1} - {0}% ", Round To Integer(Event Player.durability, Up), Evaluate Once(
				Global.ITEM_NAME[Global.KNIFE[Event Player.knifeCode]])), Null, Custom String("\r\n"), Right, True, Custom Color(
				255 - Event Player.durability * 2.250, Event Player.durability * 2.300, Event Player.durability * 1.510, 255), Null, Null,
				String and Color, Default Visibility);
			Event Player.knifeText = Last Text ID;
		End;
	}
}

rule("Global subroutine: Perk Hud")
{
	event
	{
		Subroutine;
		perkHud;
	}

	actions
	{
		Abort If(Event Player.itemPerk == -1);
		Create HUD Text(Event Player, 
			Array(
				Ability Icon String(Hero(Roadhog), Button(Ability 2)),
				Ability Icon String(Hero(Ana), Button(Ultimate)),
				Ability Icon String(Hero(Baptiste), Button(Crouch)),
				Ability Icon String(Hero(Ashe), Button(Ability 2)),
				Ability Icon String(Hero(Sigma), Button(Ability 1)),
				Ability Icon String(Hero(Reinhardt), Button(Ability 1)),
				Ability Icon String(Hero(Kiriko), Button(Ability 1)),
				Ability Icon String(Hero(Baptiste), Button(Ultimate)),
				Ability Icon String(Hero(Torbjörn), Button(Ultimate)),
				Ability Icon String(Hero(Symmetra), Button(Ultimate)),
				Ability Icon String(Hero(Wrecking Ball), Button(Ability 1))
			)[Event Player.itemPerk], 
			Custom String("{1}{0}", Array(True, True, False, False, False, False, False, False, False, True, True)[Event Player.itemPerk] ? Custom String("") : Custom String("-{0}%",
			Round To Integer(Event Player.itemPerkDurability, Up)), 
			Evaluate Once(Global.ITEM_NAME[Global.PERK_LIST[Event Player.itemPerk]])), 
			Custom String("〔{0}〕", 
				Array(
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Jump)),
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Secondary Fire)),
					Input Binding String(Button(Ability 1)),
					Input Binding String(Button(Ability 1)),
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Secondary Fire)),
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Ultimate))
				)[Event Player.itemPerk]
				), Right, True, Global.ITEM_COLOR[Global.PERK_LIST[Event Player.itemPerk]], Global.ITEM_COLOR[Global.PERK_LIST[Event Player.itemPerk]], Color(White),
                String and Color, Default Visibility);
		Event Player.itemPerkText = Last Text ID;
	}
}

rule("Player: Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
        If(Event Player.itemPerk == 5);
			Apply Impulse(Event Player, Up, 5, To World, Cancel Contrary Motion);
            Apply Impulse(Event Player, Forward, 15, To Player, Cancel Contrary Motion);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player, 1);
            Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Null, Event Player, 20);
            Event Player.itemPerkDurability -= 2;
            Call Subroutine(destroyPerk);
        Else If(Event Player.itemPerk == 6);
            Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Null, Event Player, 50);
            Play Effect(All Players(All Teams), Bad Pickup Effect, Color(White), Evaluate Once(Position Of(Event Player)), 2);
            Teleport(Event Player, Vector(231.369, 2.5, 166.183));
            Set Facing(Event Player, Direction Towards(Vector(231.369, 2.5, 166.183), Vector(233.665, 2.100, 163.795)), To World);
            Wait(0.016, Ignore Condition);
            Play Effect(All Players(All Teams), Bad Pickup Effect, Color(White), Evaluate Once(Position Of(Event Player)), 2);
            Event Player.itemPerkDurability -= 3;
            Call Subroutine(destroyPerk);
        End;
	}
}

rule("Player: Double Jump")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Air(Event Player) == True;
	}

	actions
	{
        If(Event Player.itemPerk == 2);
            Wait Until(Is Button Held(Event Player, Button(Jump)) != True && Is In Air(Event Player) == True, 99999);
            Wait Until(Is Button Held(Event Player, Button(Jump)) == True || Is In Air(Event Player) == False, 99999);
            Abort If Condition Is False;
            If(Hero Of(Event Player) != Hero(Juno) || Hero Of(Event Player) != Hero(Genji));
                Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
                Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 1);
                Play Effect(All Players(All Teams), Moira Fade Reappear Sound, Null, Event Player, 20);
            End;
            Event Player.itemPerkDurability -= 1;
            Call Subroutine(destroyPerk);
        Else;
            Disallow Button(Event Player, Button(Jump));
            Wait Until(Is In Air(Event Player) == False, 99999);
            Allow Button(Event Player, Button(Jump));
        End;
	}
}

rule("Global subroutine: Purchase Upgrade")
{
	event
	{
		Subroutine;
		purchaseUpgrade;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("  {2}{0}{1}",
            Global.UPGRADE_NAME[Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade]],
            Local Player == Event Player ? Custom String(" -${0}", Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade])
            : Custom String(""), Hero Icon String(Hero Of(Event Player))));
        If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 0);
            Global.storageLevel += True;
            Wait(0.016, Ignore Condition);
            Global.upgradePrice[1] = Array(Global.storageLevel >= 7 ? 9999 : Global.upgradePrice[1][0] + 50, Global.upgradePrice[1][1], Global.upgradePrice[1][2]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 1);
            Abort If(Global.itemCount == 32);
            Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
                -70)) * 0.100, Random Value In Array(Array(352, 352, 352, 352, 352, 353, 355, 355, 355, 355, 355, 356, 356, 356, 356, 356, 357, 357, 358, 358, 358, 359, 359, 360, 361, 361, 434, 434)), 100, Null);
            Call Subroutine(createItem);
            Global.upgradePrice[1] = Array(Global.upgradePrice[1][0], Global.upgradePrice[1][1], Global.upgradePrice[1][2]);
		Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 2);
			Abort If(Global.itemCount == 32);
            Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
                -70)) * 0.100, 433, 100, Null);
            Call Subroutine(createItem);
            Global.upgradePrice[1] = Array(Global.upgradePrice[1][0], Global.upgradePrice[1][1], Global.upgradePrice[1][2]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 3);
            Global.fryingPower += 0.250;
            Global.upgradePrice[2] = Array(Global.upgradePrice[2][0] + Random Integer(100, 150), Global.upgradePrice[2][1], Global.upgradePrice[2][2], Global.upgradePrice[2][3]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 4);
            Global.potPower += 1;
            Global.upgradePrice[2] = Array(Global.upgradePrice[2][0], Global.upgradePrice[2][1] + Random Integer(200, 300), Global.upgradePrice[2][2], Global.upgradePrice[2][3]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 5);
            Global.grillingPower += 0.250;
            Global.upgradePrice[2] = Array(Global.upgradePrice[2][0], Global.upgradePrice[2][1], Global.upgradePrice[2][2] + Random Integer(100, 150), Global.upgradePrice[2][3]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 6);
            Global.panPower += 0.250;
            Global.upgradePrice[2] = Array(Global.upgradePrice[2][0], Global.upgradePrice[2][1], Global.upgradePrice[2][2], Global.upgradePrice[2][3] + Random Integer(100, 150));
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 7);
            Event Player.playerSpeed += 10;
            Global.upgradePrice[3] = Array(Global.upgradePrice[3][False] + Random Integer(25, 75), Global.upgradePrice[3][1], Global.upgradePrice[3][2]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 8);
            Global.stageTime += 5;
            Global.upgradePrice[3] = Array(Global.upgradePrice[3][False], Global.upgradePrice[3][True] + Random Integer(25, 50), Global.upgradePrice[3][2]);
		Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 9);
			Abort If(Global.itemCount == 32);
            Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
                -70)) * 0.100, 432, 100, Null);
            Call Subroutine(createItem);
            Global.upgradePrice[3] = Array(Global.upgradePrice[3][False], Global.upgradePrice[3][True], Global.upgradePrice[3][2]);
        End;
	}
}

rule("Global subroutine: Save Progress")
{
	event
	{
		Subroutine;
		saveProgress;

	}

	actions
	{
		For Player Variable(Event Player, progressIndex, False, Count Of(Global.playerProgress), True);
			If(Global.playerProgress[Event Player.progressIndex][0] == Custom String("{0}", Event Player));
				Global.playerProgress[Event Player.progressIndex] = Array(
					Custom String("{0}", Event Player), 
					Event Player.dollar, 
					Event Player.permission, 
					Event Player.playerSpeed, 
					Event Player.scbCooked, 
					Event Player.scbCutted, 
					Event Player.scbSurved, 
					Event Player.scbMissed, 
					Event Player.scbDollar, 
					Event Player.knifeCode, 
					Event Player.durability, 
					Event Player.scbScore, 
					Event Player.itemPerk, 
					Event Player.itemPerkDurability
				);
				Break;
			End;
		End;
		Wait(4, Ignore Condition);
		Loop;
	}
}

rule("Global subroutine: Load Progress")
{
	event
	{
		Subroutine;
		loadProgress;
	}

	actions
	{
		For Player Variable(Event Player, progressIndex, False, Count Of(Global.playerProgress), True);
			If(Global.playerProgress[Event Player.progressIndex][0] == Custom String("{0}", Event Player));
				Event Player.dollar = Global.playerProgress[Event Player.progressIndex][1];
				Event Player.permission = Global.playerProgress[Event Player.progressIndex][2];
				Event Player.playerSpeed = Global.playerProgress[Event Player.progressIndex][3];
				Event Player.scbCooked = Global.playerProgress[Event Player.progressIndex][4];
				Event Player.scbCutted = Global.playerProgress[Event Player.progressIndex][5];
				Event Player.scbSurved = Global.playerProgress[Event Player.progressIndex][6];
				Event Player.scbMissed = Global.playerProgress[Event Player.progressIndex][7];
				Event Player.scbDollar = Global.playerProgress[Event Player.progressIndex][8];
				Event Player.knifeCode = Global.playerProgress[Event Player.progressIndex][9];
				Event Player.durability = Global.playerProgress[Event Player.progressIndex][10];
				Event Player.scbScore = Global.playerProgress[Event Player.progressIndex][11];
                Event Player.itemPerk = Global.playerProgress[Event Player.progressIndex][12];
                Event Player.itemPerkDurability = Global.playerProgress[Event Player.progressIndex][13];
				If(Event Player.playerSpeed == Null || Event Player.playerSpeed == False);
					Event Player.playerSpeed = 90;
				End;
				If(Event Player.durability == Null || Event Player.durability == False);
					Event Player.durability = 100;
				Else If(Event Player.durability > 100);
					Event Player.durability = Event Player.durability / 100;
				End;
				Set Move Speed(Event Player, Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player))
					? Event Player.playerSpeed * 0.916 : Event Player.playerSpeed);
				Small Message(Event Player, Custom String("  おかえりなさいませ! セーブデータを読み込みました!  "));
				Abort;
			End;
		End;
		Modify Global Variable(playerProgress, Append To Array, Array(
				Custom String("{0}", Event Player), 
				Event Player.dollar, 
				Event Player.permission, 
				Event Player.playerSpeed, 
				Event Player.scbCooked, 
				Event Player.scbCutted, 
				Event Player.scbSurved, 
				Event Player.scbMissed, 
				Event Player.scbDollar, 
				Event Player.knifeCode, 
				Event Player.durability, 
				Event Player.scbScore, 
				Event Player.itemPerk, 
				Event Player.itemPerkDurability
			));
	}
}

rule("Global routine: Super Drink!")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.superDrink == -1;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("  ザ・ワールド!  "));
		Set Move Speed(All Players(Team 1), 200);
		For Global Variable(superDrink, False, 6, True);
			Set Status(All Players(Team 1)[Global.superDrink], Null, Burning, 20);
			All Players(Team 1)[Global.superDrink].durability = All Players(Team 1)[Global.superDrink].durability * 100;
			Wait(0.016, Ignore Condition);
		End;
		Global.panPower += 10;
		Global.fryingPower += 10;
		Global.grillingPower += 10;
		Global.potPower += 10;
		Wait(0.800, Ignore Condition);
		Set Slow Motion(50);
		Wait(20, Ignore Condition);
		Set Slow Motion(100);
		For Global Variable(superDrink, False, 6, True);
			Clear Status(All Players(Team 1)[Global.superDrink], Burning);
			Set Move Speed(All Players(Team 1)[Global.superDrink], Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(All Players(Team 1)[Global.superDrink]))
				? All Players(Team 1)[Global.superDrink].playerSpeed * 0.916 : All Players(Team 1)[Global.superDrink].playerSpeed);
			All Players(Team 1)[Global.superDrink].durability = All Players(Team 1)[Global.superDrink].durability / 100;
			Wait(0.016, Ignore Condition);
		End;
		Global.panPower -= 10;
		Global.fryingPower -= 10;
		Global.grillingPower -= 10;
		Global.potPower -= 10;
		Global.superDrink = 0;
	}
}

rule("Player routine: serveBot")
{
    event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

    actions
    {
		Start Scaling Player(Event Player, 0.5, True);
		Start Modifying Hero Voice Lines(Event Player, 10, True);
		Start Forcing Dummy Bot Name(Event Player, Custom String("サービングボール"));
		Wait(0.5, Ignore Condition);
		Teleport(Event Player, Vector(220.86, 10.40, 166.95));
		Clear Status(Event Player, Rooted);
		Set Move Speed(Event Player, 100);
		Create In-World Text(Has Spawned(Event Player) ? All Players(All Teams) : Null, Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(Event Player)),
			Global.permissionText[0][1], Custom String("サービングボール")), Event Player, 1, Do Not Clip,
			Visible To Position String and Color, Global.permissionText[1][1], Default Visibility);
		Wait(0.016, Ignore Condition);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1))), 100, To World,
			Direction and Turn Rate);
		Wait(1.5, Ignore Condition);
        Wait Until(Global.isOpen == True, 9999);
        While(Global.isOpen && Count Of(Filtered Array(All Players(Team 1), !Is Dummy Bot(Current Array Element))) < 6);
			Set Move Speed(Event Player, 100);
			Event Player.svbFindIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Current Array Element, Position Of(Event Player))
			< 3.000 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Position Of(Event Player)))));
			Wait(0.016, Ignore Condition);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Event Player.svbFindIndex != -1 ? Global.itemPosition[Event Player.svbFindIndex] : Vector(222.08, 2.48, 165.06)), 300, To World, None);
			If(Distance Between(Position Of(Event Player), Vector(220.86, 1.00, 166.95)) > 3.000);
				Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), Vector(220.86, 1.00, 166.95)), True,
				To World, Replace existing throttle, None);
				Wait(Distance Between(Position Of(Event Player), Vector(220.86, 1.00, 166.95)) / 5.500, Ignore Condition);
			End;
			Stop Throttle In Direction(Event Player);
			If(Event Player.svbFindIndex != Empty Array);
				Wait(0.250, Ignore Condition);
                Start Holding Button(Event Player, Button(Primary Fire));
				Wait(0.250, Ignore Condition);
				If(Event Player.controlingIndex != -1);
					If(Array Contains(Global.tableOrderCode, Global.itemCode[Event Player.controlingIndex]));
						Event Player.svbTableIndex = Index Of Array Value(Global.tableOrderCode, Global.itemCode[Event Player.controlingIndex]);
						Event Player.customerPath = Global.TABLE_PATH[Event Player.svbTableIndex + 13];
						Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
						For Player Variable(Event Player, svbPathIndex, False, 2, True);
							Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
								To World, Replace existing throttle, None);
							Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath) + Vector(0, 1, 0)), 300, To World, None);
							Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / 5.500,
								Ignore Condition);
							Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
							If(!Global.isOpen);
								Call Subroutine(destroyServeBot);
							End;
						End;
						Stop Throttle In Direction(Event Player);
						Start Facing(Event Player, Direction Towards(Position Of(Event Player), Global.TABLE_POSITION[Event Player.svbTableIndex]), 300, To World, None);
						Wait(0.500, Ignore Condition);
						Stop Holding Button(Event Player, Button(Primary Fire));
						Wait(0.500, Ignore Condition);
						For Player Variable(Event Player, svbPathIndex, 2, 4, True);
							Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
								To World, Replace existing throttle, None);
							Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
							Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / 5.500,
								Ignore Condition);
							Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
							If(!Global.isOpen);
								Call Subroutine(destroyServeBot);
							End;
						End;
						Stop Throttle In Direction(Event Player);
					Else;
						Wait(0.016, Ignore Condition);
						Stop Holding Button(Event Player, Button(Primary Fire));
						Wait(0.032, Ignore Condition);
						Global.itemVelocity[Event Player.svbFindIndex] += Facing Direction Of(Event Player) * 0.130;
					End;
				End;
                Stop Holding Button(Event Player, Button(Primary Fire));
            End;
            Wait(0.700, Ignore Condition);
        End;
		Call Subroutine(destroyServeBot);
    }
}

rule("Player subroutine: Destroy ServeBot")
{
	event
	{
		Subroutine;
		destroyServeBot;
	}

	actions
	{
		Stop Throttle In Direction(Event Player);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Clear Status(Event Player, Phased Out);
		Set Status(Event Player, Null, Hacked, 3);
		Wait(0.016, Ignore Condition);
		Set Status(Event Player, Null, Phased Out, 9999);
		Wait(3, Ignore Condition);
		Destroy Dummy Bot(Team 1, Slot Of(Event Player));
		Abort;
	}

}

rule("Global subroutine: Set Hint Text")
{
	event
	{
		Subroutine;
		setHint;
	}

	actions
	{
		If(Global.stage == 0);
			Global.currentCustomer = Array(Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Roadhog));
			Global.loadingMenu = Array(3, 4, 8, 11, 7, 10, 25, 24);
			Global.hintText = Array(
				Custom String("冷蔵庫にある材料で料理して提供してください！\r\n牛肉をフライパンまたはグリルで焼き、左側の#テーブル番号の客に届けてください。"),
				Custom String("材料はまな板で切るか刻んだで別の料理が作れます。\r\n薄切りした牛肉をフライパンまたはグリルで焼いてください。"),
				Custom String("材料の下ごしらえとさまざまな調理器具の活用で多彩な料理が作れます。\r\nじゃがいもを丸ごと焼くとベイクドポテトになり…"),
				Custom String("じゃがいもを薄切りしてフライパンに入れると炒めポテトになり…"),
				Custom String("薄切りしたじゃがいもをフライヤーに入れるとフレンチフライになります。\r\n感覚はつかめましたか？"),
				Custom String("ある食材は強く叩くと変化します。\r\nじゃがいもを鍋で蒸して、慣性を利用して蒸しじゃがいもを床に投げてみてください。"),
				Custom String("また、一部の食材は組み合わせられます。\r\n茹でたパスタとクリームソースを合わせてみてください。"),
				Custom String("トマトは薄切りして鍋で蒸せばトマトソースが作れますが…\r\n切る代わりに叩くと、より素早く潰したトマトが作れます。"),
				Custom String("お客様にはそれぞれ異なる特性があります。\r\n大食いの場合、得点は多く得られますが、料理を2回提供する必要があります。"),
				Custom String("さまざまなレシピの組み合わせをマスターしてクリアに挑戦してください。\r\n幸運を祈ります！")
			);
		Else If(Global.stage == 1);
			Global.loadingMenu = Array(85, 90, 84, 88, 87, 86, 96, 89);
			Global.hintText = Array(
				Custom String("薄切りした鶏肉 + 天ぷら粉 > フライヤー"),
				Custom String("鶏肉 + 天ぷら粉 > フライヤー"),
				Custom String("角切り鶏肉 + 天ぷら粉 > フライヤー"),
				Custom String("すべての調味料はフライドチキンに追加できます。\r\n醤油 + 水飴"),
				Custom String("コチュジャン + 水飴"),
				Custom String("コチュジャン + 醤油 + 水飴"),
				Custom String("薄切りネギ + 醤油ソース"),
				Custom String("から揚げ + ヤンニョムソース > フライパンで炒める")
			);
		Else If(Global.stage == 2);
			Global.loadingMenu = Array(126, 7);
			Global.hintText = Array(
				Custom String("小麦粉をピザ生地になるまで叩いてください。\r\nピザ生地 + トマトソース + ピザチーズ > グリルで焼く")
			);
		Else If(Global.stage == 3);
			Global.currentCustomer = Array(Hero(Tracer), Hero(Bastion), Hero(Bastion));
			Global.hintText = Array(
				Custom String(""),
				Custom String("注意してください！後から来たお客様を先に提供すると失敗するお客様のタイプがあります。"),
				Custom String("このようなお客様には、注文書の順番に提供することをおすすめします。")
			);
		Else If(Global.stage == 4);
			Global.currentCustomer = Array(Hero(Hanzo), Hero(Tracer));
			Global.hintText = Array(
				Custom String("フード評論家から高評価を得ると、多くのお客様を呼び寄せます。")
			);
		Else If(Global.stage == 5);
			Global.currentCustomer = Array(Hero(Zarya), Hero(Bastion));
			Global.hintText = Array(
				Custom String("フードファイターは3つの料理を提供する必要があります。")
			);
		Else If(Global.stage == 6);
			Global.currentCustomer = Array(Hero(Hanzo), Hero(Mercy));
			Global.hintText = Array(
				Custom String(""),
				Custom String("予約客は入場前に事前に注文を行います。\r\n中央に短時間表示される予約メッセージを注意深く見て覚えてください！")
			);
		Else;
			Global.hintText = Array(Custom String(""));
		End;
	}

}

rule("Global subroutine: Scoreboard")
{
	event
	{
		Subroutine;
		gameSummary;
	}

	actions
	{
		Global.isOpen = False;
		Global.skipSetup = False;
		Set Status(All Players(Team 1), Null, Rooted, 9999);
		Destroy All HUD Text;
		Destroy All In-World Text;
		Destroy All Progress Bar HUD Text;
		Disable Game Mode HUD(All Players(All Teams));
		Wait(2, Ignore Condition);
		Start Camera(All Players(Team 1), Ray Cast Hit Position(Local Player + Vector(0, 2 + 0.100, 0), Local Player + Vector(0, 2 + 0.100,
			0) + Facing Direction Of(Local Player) * (-0.500 + 1 * -3), Null, All Players(All Teams), False), Local Player + (Eye Position(
			Local Player) - Local Player) + Facing Direction Of(Local Player) * 20, 20);
		Wait(0.100, Ignore Condition);
		Start Camera(All Players(Team 1), Vector(206.991, 2, 188.239), Vector(222.559, 4.963, 164.417), 6);
		Wait(0.100, Ignore Condition);
		Teleport(All Players(Team 1)[4], Vector(207.200, 2.400, 181.990));
		Teleport(All Players(Team 1)[2], Vector(209.040, 2.400, 181.850));
		Teleport(All Players(Team 1)[0], Vector(210.380, 2.400, 182.040));
		Teleport(All Players(Team 1)[1], Vector(211.340, 2.400, 182.700));
		Teleport(All Players(Team 1)[3], Vector(212.080, 2.400, 183.830));
		Teleport(All Players(Team 1)[5], Vector(212.340, 2.400, 185.510));
		Set Facing(All Players(Team 1), Direction Towards(Vector(210.380, 2.400, 182.040), Vector(206.991, 2, 188.239)), To World);
		Wait(1.800, Ignore Condition);
		Create In-World Text(All Players(Team 1), Custom String("最終スコア : 〔{0}〕", Global.totalScore[0]), Vector(210.140, Sine From Degrees(Min(
			Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 18) * 5.750, 183.430), 3, Do Not Clip,
			Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 0, 255),
			Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		If(Global.stageMode != 4);
			If(Global.totalScore[0] > Global.totalScore[Global.stageMode][0]);
				Create In-World Text(All Players(Team 1), Custom String("ハイスコア更新!! この画面をキャプチャーしてhttps://ow-restaurant.com/jaに送ってください"), Vector(210.140,
					Sine From Degrees(Min(Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 14) * 5.750, 183.430), 1, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150,
					Sine From Radians(Total Time Elapsed * 9) * 50 + 200, 255), Default Visibility);
				Play Effect(All Players(Team 1), DVa Self Destruct Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
			Else;
				Create In-World Text(All Players(Team 1), Custom String("ハイスコア : 〔{0}〕", Custom String("{0} : {1}", Global.totalScore[Global.stageMode][1], Global.totalScore[Global.stageMode][0])), Vector(210.140, Sine From Degrees(
					Min(Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 14) * 5.750, 183.430), 1, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, 0, 0, 255), Default Visibility);
			End;
		End;
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("{0} 〔{2}〕\r\n  {1}", Hero Icon String(Hero Of(
			Local Player)), Local Player, Global.permissionText[0][Local Player.permission]), Vector(207.140, Sine From Degrees(Min(
			Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 8) * 5.750, 183.430), 2.500, Do Not Clip,
			Visible To Position String and Color, Global.permissionText[1][Local Player.permission], Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("タイム : 〔{0}〕\r\nモード: 〔{1}〕\r\n結果: 〔{2}〕",
			Evaluate Once(Custom String("{0}時間{1}分{2}秒", Round To Integer(Total Time Elapsed / 3600, Down), Round To Integer(
			Total Time Elapsed / 60 % 60, Down), Round To Integer(Total Time Elapsed % 60, Down))), Custom String("{0}", Array(Custom String("練習モード"),
			Custom String("カジュアルダイニング"), Custom String("ファインダイニング"), Custom String("マスターシェフチャレンジ"), Custom String("カスタムコース"))[Global.stageMode]), Custom String("{0} / {1}", Array(Custom String("入門レベル"),
			Custom String("熟練レベル"), Custom String("プロレベル"), Custom String("Hell's Kitchen"))[Global.difficulty],
			Global.isVictory ? Custom String("クリア!") : Custom String("Stage {0} で失敗", Global.stage + 1))), Vector(214.140,
			Sine From Degrees(Min(Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 8) * 7.750, 183.430), 2, Do Not Clip,
			Visible To Position String and Color, Custom Color(Array(140, 110, 255, 255, 255)[Global.difficulty], Array(255, 180, 225, 120,
			50)[Global.difficulty], Array(180, 255, 120, 120, 145)[Global.difficulty], 255), Default Visibility);
		Wait(6, Ignore Condition);
		For Global Variable(cookingIndex, False, 6, True);
			All Players(Team 1)[Global.cookingIndex].scbScore += All Players(Team 1)[Global.cookingIndex].scbCooked + All Players(Team 1)[Global.cookingIndex].scbSurved - (All Players(Team 1)[Global.cookingIndex].scbMissed * 5);
		End;
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("個人総収入 : 〔{0}〕\r\n個人活躍スコア : 〔{1}〕", Local Player.scbDollar, Local Player.scbScore),
			Vector(207.140, 3, 183.430), 2, Do Not Clip, Visible To Position String and Color, Custom Color(255, 255, Sine From Radians(
			Total Time Elapsed * 8) * 105 + 150, 255), Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("成功した営業 : 〔{0}〕",
			Global.scbRank[0] + Global.scbRank[1] + Global.scbRank[2]), Vector(214.140, 3.800, 185.430), 2, Do Not Clip,
			Visible To Position String and Color, Color(Lime Green), Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("料理に寄与 : 〔{0}〕\r\n包丁さばきの回数 : 〔{1}〕",
			Local Player.scbCooked, Local Player.scbCutted), Vector(207.140, 2.400, 183.430), 1.500, Do Not Clip,
			Visible To Position String and Color, Custom Color(255, 255, 255, 255), Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String(
			"ファンタスティックな営業 : 〔{0}〕\r\n立派な営業 : 〔{1}〕\r\n失敗した営業 : 〔{2}〕", Global.scbRank[0], Global.scbRank[1], Global.scbRank[3]), Vector(
			214.140, 2.900, 185.430), 1.500, Do Not Clip, Visible To Position String and Color, Custom Color(0, 220, 0, 255),
			Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("サービング成功 : 〔{0}〕", Local Player.scbSurved),
			Vector(207.140, 2.200, 183.430), 1.500, Do Not Clip, Visible To Position String and Color, Custom Color(255, 255, 255, 255),
			Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("全体サービング成功 : 〔{0}〕\r\n全体サービング失敗 : 〔{1}〕",
			Global.scbSurved[4], Global.scbSurved[5]), Vector(214.140, 1.900, 185.430), 2, Do Not Clip,
			Visible To Position String and Color, Color(Rose), Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("サービングミス : 〔{0}〕", Local Player.scbMissed),
			Vector(207.140, 2.000, 183.430), 1.500, Do Not Clip, Visible To Position String and Color, Custom Color(255, 255, 255, 255),
			Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String(
			"ファンタスティックなサービング : 〔{0}〕\r\n迅速なサービング : 〔{1}〕\r\n完成度の高い料理 : 〔{2}〕", Global.scbSurved[0], Global.scbSurved[1],
			Global.scbSurved[2]), Vector(214.140, 1, 185.430), 1.500, Do Not Clip, Visible To Position String and Color, Color(Sky Blue),
			Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		If(Global.stageMode != 4);
			If(Global.isVictory && (Global.totalScore[0] > (Global.stageMode == 3 ? 13000 : 6000)));
				Create In-World Text(All Players(Team 1), Custom String("ランク : 〔★★★★★★★〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[0], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[1], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[2], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[3], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[4], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[5], 1, Visible To Position and Radius);
			Else If(Global.isVictory && (Global.totalScore[0] > (Global.stageMode == 3 ? 11500 : 5500)));
				Create In-World Text(All Players(Team 1), Custom String("ランク : 〔★★★★★★〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[0], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[1], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[2], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[3], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[4], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[5], 1, Visible To Position and Radius);
			Else If(Global.isVictory && (Global.totalScore[0] > (Global.stageMode == 3 ? 10000 : 5000)));
				Create In-World Text(All Players(Team 1), Custom String("ランク : 〔★★★★★〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else If(Global.totalScore[0] > (Global.stageMode == 3 ? 8500 : 4500));
				Create In-World Text(All Players(Team 1), Custom String("ランク : 〔★★★★☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else If(Global.totalScore[0] > (Global.stageMode == 3 ? 7000 : 4000));
				Create In-World Text(All Players(Team 1), Custom String("ランク : 〔★★★☆☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else If(Global.totalScore[0] > (Global.stageMode == 3 ? 5000 : 3000));
				Create In-World Text(All Players(Team 1), Custom String("ランク : 〔★★☆☆☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else If(Global.totalScore[0] > (Global.stageMode == 3 ? 2500 : 1500));
				Create In-World Text(All Players(Team 1), Custom String("ランク : 〔★☆☆☆☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else;
				Create In-World Text(All Players(Team 1), Custom String("ランク : 〔☆☆☆☆☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			End;
		End;
		Destroy All Dummy Bots;
		Wait(10, Ignore Condition);
		Global.skipSetup = True;
		Set Status(All Players(Team 1), Null, Rooted, 9999);
		Teleport(All Players(Team 1)[4], Vector(207.200, 2.400, 181.990));
		Teleport(All Players(Team 1)[2], Vector(209.040, 2.400, 181.850));
		Teleport(All Players(Team 1)[0], Vector(210.380, 2.400, 182.040));
		Teleport(All Players(Team 1)[1], Vector(211.340, 2.400, 182.700));
		Teleport(All Players(Team 1)[3], Vector(212.080, 2.400, 183.830));
		Teleport(All Players(Team 1)[5], Vector(212.340, 2.400, 185.510));
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[0]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String(
				"{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[0])), Global.permissionText[0][All Players(Team 1)
				[0].permission], All Players(Team 1)[0]), Custom String("個人総収入 : 〔{0}〕\r\n個人活躍スコア : 〔{1}〕\r\n料理に寄与 : 〔{2}〕", All Players(Team 1)[0].scbDollar, All Players(Team 1)[0].scbScore,
				All Players(Team 1)[0].scbCooked), Custom String("サービング成功 : 〔{0}〕\r\nサービングミス : 〔{1}〕", All Players(Team 1)[0].scbSurved,
				All Players(Team 1)[0].scbMissed)), All Players(Team 1)[0], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[0].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[1]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String(
				"{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[1])), Global.permissionText[0][All Players(Team 1)
				[1].permission], All Players(Team 1)[1]), Custom String("個人総収入 : 〔{0}〕\r\n個人活躍スコア : 〔{1}〕\r\n料理に寄与 : 〔{2}〕", All Players(Team 1)[1].scbDollar, All Players(Team 1)[1].scbScore,
				All Players(Team 1)[1].scbCooked), Custom String("サービング成功 : 〔{0}〕\r\nサービングミス : 〔{1}〕", All Players(Team 1)[1].scbSurved,
				All Players(Team 1)[1].scbMissed)), All Players(Team 1)[1], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[1].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[2]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String(
				"{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[2])), Global.permissionText[0][All Players(Team 1)
				[2].permission], All Players(Team 1)[2]), Custom String("個人総収入 : 〔{0}〕\r\n個人活躍スコア : 〔{1}〕\r\n料理に寄与 : 〔{2}〕", All Players(Team 1)[2].scbDollar, All Players(Team 1)[2].scbScore,
				All Players(Team 1)[2].scbCooked), Custom String("サービング成功 : 〔{0}〕\r\nサービングミス : 〔{1}〕", All Players(Team 1)[2].scbSurved,
				All Players(Team 1)[2].scbMissed)), All Players(Team 1)[2], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[2].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[3]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String(
				"{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[3])), Global.permissionText[0][All Players(Team 1)
				[3].permission], All Players(Team 1)[3]), Custom String("個人総収入 : 〔{0}〕\r\n個人活躍スコア : 〔{1}〕\r\n料理に寄与 : 〔{2}〕", All Players(Team 1)[3].scbDollar, All Players(Team 1)[3].scbScore,
				All Players(Team 1)[3].scbCooked), Custom String("サービング成功 : 〔{0}〕\r\nサービングミス : 〔{1}〕", All Players(Team 1)[3].scbSurved,
				All Players(Team 1)[3].scbMissed)), All Players(Team 1)[3], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[3].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[4]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String(
				"{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[4])), Global.permissionText[0][All Players(Team 1)
				[4].permission], All Players(Team 1)[4]), Custom String("個人総収入 : 〔{0}〕\r\n個人活躍スコア : 〔{1}〕\r\n料理に寄与 : 〔{2}〕", All Players(Team 1)[4].scbDollar, All Players(Team 1)[4].scbScore,
				All Players(Team 1)[4].scbCooked), Custom String("サービング成功 : 〔{0}〕\r\nサービングミス : 〔{1}〕", All Players(Team 1)[4].scbSurved,
				All Players(Team 1)[4].scbMissed)), All Players(Team 1)[4], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[4].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[5]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String(
				"{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[5])), Global.permissionText[0][All Players(Team 1)
				[5].permission], All Players(Team 1)[5]), Custom String("個人総収入 : 〔{0}〕\r\n個人活躍スコア : 〔{1}〕\r\n料理に寄与 : 〔{2}〕", All Players(Team 1)[5].scbDollar, All Players(Team 1)[5].scbScore,
				All Players(Team 1)[5].scbCooked), Custom String("サービング成功 : 〔{0}〕\r\nサービングミス : 〔{1}〕", All Players(Team 1)[5].scbSurved,
				All Players(Team 1)[5].scbMissed)), All Players(Team 1)[5], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[5].permission], Default Visibility);
		Start Camera(All Players(Team 1), Vector(207.710, 2.500, 187.110), Vector(222.559, 4.963, 164.417), 6);
		Wait(7, Ignore Condition);
		Start Camera(All Players(Team 1), Vector(206.991, 2, 188.239), Vector(222.559, 4.963, 164.417), 6);
		Wait(7, Ignore Condition);
		Start Camera(All Players(Team 1), Ray Cast Hit Position(Local Player + Vector(0, 2 + 0.100, 0), Local Player + Vector(0, 2 + 0.100,
			0) + Facing Direction Of(Local Player) * (-0.500 - 3), Null, All Players(All Teams), False), Local Player + (Eye Position(
			Local Player) - Local Player) + Facing Direction Of(Local Player) * 20, 20);
		Clear Status(All Players(Team 1), Rooted);
		Wait(60, Ignore Condition);
		Set Status(All Players(Team 1), Null, Rooted, 9999);
		Wait(0.500, Ignore Condition);
		Global.skipSetup = False;
		Set Invisible(All Players(Team 1), All);
		Teleport(All Players(Team 1)[4], Vector(207.200, 2.400, 181.990));
		Teleport(All Players(Team 1)[2], Vector(209.040, 2.400, 181.850));
		Teleport(All Players(Team 1)[0], Vector(210.380, 2.400, 182.040));
		Teleport(All Players(Team 1)[1], Vector(211.340, 2.400, 182.700));
		Teleport(All Players(Team 1)[3], Vector(212.080, 2.400, 183.830));
		Teleport(All Players(Team 1)[5], Vector(212.340, 2.400, 185.510));
		Start Camera(All Players(Team 1), Vector(206.991, 2, 188.239), Vector(222.559, 4.963, 164.417), 6);
		Wait(30, Ignore Condition);
		If(Global.isVictory || Global.isBonusStage);
			Declare Team Victory(Team 1);
		Else;
			Declare Team Victory(Team 2);
		End;
		Wait(2.750, Ignore Condition);
		Restart Match;
	}
}
