variables
{
	global:
		0: itemPosition
		1: itemVelocity
		2: itemCode
		3: itemEffect
		4: itemText
		5: itemControled
		6: itemProgress
		7: itemStatus
		8: itemDespawn
		9: itemLastControl
		10: itemCooker
		11: checkingIndex
		12: normal
        13: storageData
		14: createItemData
		15: creatingItemIndex
		16: cookingIndex
		17: despawnIndex
		18: ITEM_NAME
		19: ITEM_COLOR
		20: ITEM_SCORE
		21: CUTTING_NEEDED
		22: CUTTING_RESULT
		23: GRILLING_NEEDED
		24: GRILLING_RESULT
		25: FRYING_NEEDED
		26: FRYING_RESULT
		27: POT_TIME
		28: POT_RESULT
		29: PAN_NEEDED
		30: PAN_RESULT
		31: STORAGE_POSITION
		32: IMPACT_RESULT
		33: MIXING_RECIPE
		34: MIXING_RESULT
		35: FRIDGE_POSITION
		36: fridgeCode
		37: potIndex
		38: POT_POSITION
		39: potData
		40: potTime
		41: cuttingPlayer
		42: itemCount
		43: TABLE_POSITION
		44: TABLE_PATH
		45: loadingMenu
		46: spawningCustomerTable
		47: currentCustomer
		48: customerPosition
		49: customerIndex
		50: tableFilled
		51: tableOrderCode
		52: failCount
		53: tableCustomer
		54: checkingCustomerIndex
		55: checkingTableIndex
		56: stage
		57: isOpen
		58: despawnTime
		59: visibleScore
		60: systemScore
		61: globalText
		62: stageColor
		63: STAGE_NAME
		64: STAGE_CODE
		65: CUSTOMER_LIST
		66: FRIDGE_LIST
		67: MENU_LIST
		68: customerCallTime
		69: scoringIndex
		70: difficulty
		71: scoreDecrease
		72: failEnd
		73: setUpTime
		74: tx
		75: upgradeList
		76: scoringPlayer
		77: fryingPower
		78: grillingPower
		79: potPower
		80: panPower
		81: upgradePrice
		82: UPGRADE_CODE
		83: currentUpgrade
		84: KNIFE
		85: KNIFE_AMOUNT
		86: KNIFE_DECREASE
		87: orderedKnives
		88: upgradeColor
		89: fridgeRotation
		90: ALLOWED_HEROS
		91: currentMenu
		92: additionalScore
		93: totalScore
		94: RAW_MIX
		95: RAW_RESULT
		96: reservedOrder
		97: playerProgress
		98: stageScore
		99: storageLevel
		100: itemPrevPosition
		101: CUTTING_POSITION
		102: loadingMenuWeaver
		103: PERK_LIST
		104: itemDurability
		105: itemNormal
		106: loadNext
		107: isVictory
		108: superDrink
		109: HAZARD_MENU_LIST
		110: currentMenuHaz
		111: loadingMenuHaz
		112: isVipAngry
		113: stageTime
		114: UPGRADE_NAME
		115: skipSetup
		116: stageMode
		117: selectPlayer
		118: permissionText
		119: ADDITIONAL_MATERIAL_LIST
		120: WEAVER_MENU_LIST
		121: currentMenuWeaver
		122: isBonusStage
		124: scbRank
		125: scbSurved
        127: storageIndex

	player:
		0: controlingIndex
		1: cookingIndex
		2: cuttingAmount
		3: handPosition
		4: mixingIndex
		5: customerPath
		6: tableIndex
		7: byOrder
		8: score
		9: customerStatus
		10: customerEffect
		11: orderCount
		12: orderTimeOut
		13: playerColor
		14: customerSpeed
		15: orderedTime
		16: playerText
		17: tableText
		18: dollar
		20: durability
		21: selectedUpgrade
		22: knifeText
		23: knifeCode
		24: shaftEffect
		25: lastOrderTime
		26: scbScore
		27: cuttingIndex
		28: playerSpeed
		29: missSurveCount
		30: permission
		31: altNamePlate
		32: scbCooked
		33: scbCutted
		34: scbSurved
		35: scbMissed
		36: scbDollar
		37: itemPerk
		38: itemPerkDurability
        39: itemPerkText
        40: playerEffectStatus
        41: perkIndex
		42: progressIndex
		43: additionalMaterialIndex
		44: isController
		46: svbFindIndex
		47: svbTableIndex
		48: svbPathIndex
		49: tipsProb
}

subroutines
{
	0: itemPhysics
	1: itemCooking
	2: despawnItem
	3: pot0
	4: pot1
	5: callCustomer
	6: startStage
	7: dataInit
	8: rotatingFridge
	9: createItem
	10: selectMode
	11: dataInit2
	12: saveProgress
	13: loadProgress
	14: gameSummary
	15: knifeHud
    16: purchaseUpgrade
    17: perkHud
	18: dataInit3
	20: destroyItem
	21: destroyServeBot
	22: dropTips
	23: destroyPerk
}

disabled rule("GLOBAL==========================================================================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Global: Setting")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Disable Built-In Game Mode Completion;
		Create Dummy Bot(All Heroes, Host Player, False, Null, Null);
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String("______________________________________________________________________________________________________________________________〼"));
		Global.tx = String Split(First Of(Last Created Entity), Empty Array);
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String("______________________________________________________________________________________________________________________________ࡀ"));
		Global.tx = String Slice(String Replace(Custom String("______________________________________________________________________________________________________________________________〼"),
			Global.tx, First Of(Last Created Entity)), 126, True);
		Destroy All Dummy Bots;
		Call Subroutine(dataInit);
		Call Subroutine(dataInit2);
		Global.itemPosition = Empty Array;
		Global.itemVelocity = Empty Array;
		Global.itemCode = Empty Array;
		Global.itemEffect = Empty Array;
		Global.itemText = Empty Array;
		Global.itemControled = Empty Array;
		Global.itemProgress = Empty Array;
		Global.itemStatus = Empty Array;
		Global.itemDespawn = Empty Array;
		Global.customerPosition = Empty Array;
		Global.customerIndex = Empty Array;
		Global.playerProgress = Empty Array;
		Global.tableOrderCode = Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1);
		Global.TABLE_PATH = Array(Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(208.989, True, 195.792),
			Vector(212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(222.009, True, 184.971),
			Vector(223.481, True, 182.685), Vector(222.079, True, 181.774), Vector(219.244, True, 189.250), Vector(221.141, True, 190.510),
			Vector(214.349, True, 200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(208.989, True,
			195.792), Vector(212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(222.009, True,
			184.971), Vector(225.568, True, 179.360), Vector(224.230, 1, 178.473), Vector(219.244, True, 189.250), Vector(221.141, True,
			190.510), Vector(214.349, True, 200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(
			208.989, True, 195.792), Vector(212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(
			222.009, True, 184.971), Vector(227.739, True, 175.986), Vector(226.487, True, 175.061), Vector(219.244, 1, 189.250), Vector(
			221.141, True, 190.510), Vector(214.349, True, 200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559),
			Vector(208.989, True, 195.792), Vector(212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181),
			Vector(218.262, True, 182.700), Vector(219.831, True, 180.291), Vector(218.748, True, 179.586), Vector(218.262, True, 182.700),
			Vector(220.207, True, 187.791), Vector(219.244, True, 189.250), Vector(221.141, True, 190.510), Vector(214.349, True,
			200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(208.989, True, 195.792), Vector(
			212.385, True, 190.614), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(218.262, True, 182.700), Vector(
			222.010, True, 177.008), Vector(220.973, True, 176.288), Vector(218.262, True, 182.700), Vector(220.207, True, 187.791),
			Vector(219.244, True, 189.250), Vector(221.141, True, 190.510), Vector(214.349, True, 200.372)), Array(Vector(200.987, True,
			197.362), Vector(204.190, True, 192.559), Vector(208.989, True, 195.792), Vector(212.385, True, 190.614), Vector(209.842, True,
			183.840), Vector(211.701, True, 181), Vector(218.262, True, 182.700), Vector(224.166, True, 173.622), Vector(223.159, True,
			172.946), Vector(218.262, True, 182.700), Vector(220.207, True, 187.791), Vector(219.244, True, 189.250), Vector(221.141, True,
			190.510), Vector(214.349, True, 200.372)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(
			199.370, True, 189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(
			207.347, 1, 175.935), Vector(209.066, True, 173.280), Vector(210.132, True, 173.916), Vector(207.347, True, 175.935), Vector(
			201.998, True, 176.004), Vector(201.036, True, 177.430), Vector(199.438, True, 176.441), Vector(193.083, True, 186.114)),
			Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(199.370, True, 189.455), Vector(202.923, True,
			183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(207.347, True, 175.935), Vector(211.256, True,
			169.981), Vector(212.334, True, 170.592), Vector(207.347, 1, 175.935), Vector(201.998, True, 176.004), Vector(201.036, True,
			177.430), Vector(199.438, True, 176.441), Vector(193.083, True, 186.114)), Array(Vector(200.987, True, 197.362), Vector(
			204.190, True, 192.559), Vector(199.370, True, 189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840),
			Vector(211.701, True, 181), Vector(207.347, True, 175.935), Vector(213.435, True, 166.540), Vector(214.493, True, 167.247),
			Vector(207.347, True, 175.935), Vector(201.998, True, 176.004), Vector(201.036, True, 177.430), Vector(199.438, True, 176.441),
			Vector(193.083, True, 186.114)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(199.370, True,
			189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(203.692, True,
			173.416), Vector(205.357, True, 170.869), Vector(206.777, True, 171.818), Vector(201.036, True, 177.430), Vector(199.438, True,
			176.441), Vector(193.083, True, 186.114)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559), Vector(
			199.370, True, 189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181), Vector(
			203.692, True, 173.416), Vector(207.703, 1, 167.399), Vector(208.911, True, 168.442), Vector(201.036, True, 177.430), Vector(
			199.438, True, 176.441), Vector(193.083, True, 186.114)), Array(Vector(200.987, True, 197.362), Vector(204.190, True, 192.559),
			Vector(199.370, True, 189.455), Vector(202.923, True, 183.995), Vector(209.842, True, 183.840), Vector(211.701, True, 181),
			Vector(203.692, True, 173.416), Vector(209.687, True, 164.181), Vector(211.116, True, 165.024), Vector(201.036, True, 177.430),
			Vector(199.438, True, 176.441), Vector(193.083, True, 186.114)), Array(Vector(200.948, True, 197.385), Vector(204.298, True,
			192.378), Vector(209.089, True, 195.609), Vector(212.482, True, 190.428), Vector(211.361, True, 184.273), Vector(217.183, True,
			172.578), Vector(209.024, True, 182.535), Vector(202.871, True, 184.017), Vector(199.540, True, 189.047), Vector(204.295, True,
			192.378), Vector(200.916, True, 197.370)),
				Array (
					Vector(226.255, True, 170.245),
					Vector(219.825, True, 180.305),
					Vector(226.255, True, 170.245),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(226.255, True, 170.245),
					Vector(221.945, True, 176.905),
					Vector(226.255, True, 170.245),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(226.255, True, 170.245),
					Vector(223.975, True, 173.655),
					Vector(226.255, True, 170.245),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(214.565, True, 176.645),
					Vector(216.505, True, 178.285),
					Vector(214.565, True, 176.645),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(216.615, True, 173.465),
					Vector(218.785, True, 174.915),
					Vector(216.615, True, 173.465),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(218.815, True, 170.035),
					Vector(221.025, True, 171.555),
					Vector(218.815, True, 170.035),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(214.565, True, 176.645),
					Vector(212.245, True, 175.335),
					Vector(214.565, True, 176.645),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(216.615, True, 173.465),
					Vector(214.385, True, 172.025),
					Vector(216.615, True, 173.465),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(218.815, True, 170.035),
					Vector(216.605, True, 168.605),
					Vector(218.815, True, 170.035),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(215.505, True, 162.955),
					Vector(208.865, True, 173.165),
					Vector(215.505, True, 162.955),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(215.505, True, 162.955),
					Vector(211.035, True, 169.815),
					Vector(215.505, True, 162.955),
					Vector(220.86, True, 166.95)
				),
				Array (
					Vector(215.505, True, 162.955),
					Vector(213.235, True, 166.495),
					Vector(215.505, True, 162.955),
					Vector(220.86, True, 166.95)
				)
			);
		Global.TABLE_POSITION = Array(Vector(221.112, 2, 181.216), Vector(223.297, 2, 177.848), Vector(225.495, 2, 174.507), Vector(
			217.763, 2, 179.027), Vector(219.955, 2, 175.671), Vector(222.138, 2, 172.319), Vector(211.069, 2, 174.658), Vector(213.244, 2,
			171.301), Vector(215.431, 2, 167.950), Vector(207.710, 2, 172.466), Vector(209.900, 2, 169.116), Vector(212.074, 2, 165.771));
		Global.tableFilled = Mapped Array(Global.TABLE_POSITION, False);
		Global.fryingPower = 1;
		Global.grillingPower = 1;
		Global.potPower = 0;
		Global.panPower = 1;
		Global.POT_POSITION = Array(Vector(228.192, 2.200, 160.310), Vector(229.009, 2.200, 160.853));
		Global.FRIDGE_POSITION = Array(Vector(232.349, 2.850, 162.947), Vector(233.665, 2.850, 163.795), Vector(234.967, 2.850, 164.652),
			Vector(232.349, 1.750, 162.947), Vector(233.665, 1.750, 163.795), Vector(234.967, 1.750, 164.652));
		Global.CUTTING_POSITION = Array(Vector(231.369, 2, 166.183), Vector(222.109, 2, 156.602));
		Global.STORAGE_POSITION = Array(Vector(222.149, 2.045, 159.937), Vector(222.431, 2.045, 160.111), Vector(222.723, 2.045, 160.292), Vector(222.986, 2.045, 160.456), Vector(225.983, 2.045, 162.307), Vector(226.276, 2.045, 162.492), Vector(226.536, 2.045, 162.668), Vector(226.827, 2.045, 162.861));
		Global.storageData = Array(Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False), Array(False, False, False));
        Global.currentUpgrade = -1;
		Global.stage = 0;
		Global.totalScore = Array(Array(0, Custom String("연습 모드")), Array(0, Custom String("없음")), Array(0, Custom String("없음")), Array(0, Custom String("없음")));
		Global.permissionText = Array(Array(Custom String("요리사"), Custom String("홀 서버"), Custom String("수습생"), Custom String("헤드셰프")),
			Array(Color(Orange), Color(Green), Color(White), Color(Red)));
		Create In-World Text(Global.selectPlayer != Null ? Host Player : Null, Custom String("〔{0}〕 - 직책 변경", Input Binding String(Button(
			Ability 2))), Global.selectPlayer + Vector(0, 2, 0), 0.900, Do Not Clip, Visible To Position and String, Color(Red),
			Visible Never);
		Create HUD Text(First Of(True), Null, Null, Custom String("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), Top, 3, Null, Null, Null, None,
			Default Visibility);
		Create In-World Text(Local Player.controlingIndex == -1 ? Null : Local Player, Custom String("×"), Eye Position(Local Player) + Update Every Frame(Facing Direction Of(Local Player)) * 5, 3, Do Not Clip, Visible To and Position, Color(Red),
			Default Visibility);
		Create In-World Text(Players Within Radius(Vector(228.504, 2, 160.663), 10, Team 1, Off), Custom String("솥"), Vector(228.504,
			2.750, 160.663), 3, Do Not Clip, Visible To, Color(Violet), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(228.192, 2.200, 160.310), 10, Team 1, Off), Custom String("{0}초",
			Global.potTime[False]), Vector(228.192, 2.200, 160.310), 2, Do Not Clip, Visible To String and Color,
			Global.potTime[False] ? Color(Red) : Color(Green), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(229.009, 2.200, 160.853), 10, Team 1, Off), Custom String("{0}초",
			Global.potTime[True]), Vector(229.009, 2.200, 160.853), 2, Do Not Clip, Visible To String and Color,
			Global.potTime[True] ? Color(Red) : Color(Green), Default Visibility);
		Create Effect(Global.potTime[False] ? All Players(All Teams) : Null, Cloud, Color(White), Global.POT_POSITION[False], 0.400,
			Visible To);
		Create Effect(Global.potTime[True] ? All Players(All Teams) : Null, Cloud, Color(White), Global.POT_POSITION[True], 0.400,
			Visible To);
		Create In-World Text(Players Within Radius(Vector(223.583, 2, 157.286), 10, Team 1, Off), Custom String("그릴"), Vector(223.583,
			3, 157.286), 3, Do Not Clip, Visible To, Color(Orange), Default Visibility);
		Create Effect(Players Within Radius(Vector(222.641, 2, 155.415), 4, All Teams, Off), Smoke Sound, Null, Vector(222.641, 2,
			155.415), 200, Visible To);
		Create In-World Text(Players Within Radius(Vector(224.926, 2, 158.167), 10, Team 1, Off), Custom String("팬"), Vector(224.926,
			2.750, 158.167), 3, Do Not Clip, Visible To, Color(Red), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(233.778, 2, 167.685), 10, Team 1, Off), Custom String("싱크대"), Vector(233.778,
			3, 167.685), 3, Do Not Clip, Visible To, Color(Aqua), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(233.690, 2, 163.772), 10, Team 1, Off), Custom String("냉장고"), Vector(233.690,
			3.500, 163.772), 3, Do Not Clip, Visible To, Color(Sky Blue), Default Visibility);
		Create HUD Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element) + Facing Direction Of(
			Current Array Element) * 1.500, Vector(234.340, 2, 168.146)) < 1.500), Custom String("〔{0}〕:  물 내리기  ", Input Binding String(
			Button(Interact))), Null, Custom String("\r\n"), Top, 6, Color(Aqua), Null, Null, Visible To and String, Default Visibility);
		Create In-World Text(Players Within Radius(Vector(231.369, 2, 166.183), 10, Team 1, Off), Custom String("도마"), Vector(231.369,
			3, 166.183), 3, Do Not Clip, Visible To, Color(Lime Green), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(222.109, 2, 156.602), 10, Team 1, Off), Custom String("도마"), Vector(222.109,
			3, 156.602), 3, Do Not Clip, Visible To, Color(Lime Green), Default Visibility);
		Create HUD Text(Filtered Array(All Players(Team 1), Min(Distance Between(Eye Position(Current Array Element) + Facing Direction Of(
			Current Array Element) * 1.500, Vector(231.369, 2, 166.183)), Distance Between(Eye Position(Current Array Element) + Facing Direction Of(Current Array Element) * 1.500, Vector(222.109, 2, 156.602))) < 1.500),
			Local Player.knifeCode + True ? Custom String("〔{0}〕:  썰기  ", Input Binding String(Button(Interact))) : Custom String("  칼이 없습니다  "), Null, Custom String("\r\n"), Top, 6, Local Player.knifeCode + True ? Color(Lime Green) : Color(Red), Null,
			Null, Visible To String and Color, Default Visibility);
		Create In-World Text(Players Within Radius(Vector(224.552, 2, 161.294), 10, Team 1, Off), Custom String("튀김기"), Vector(224.552,
			3, 161.294), 3, Do Not Clip, Visible To, Color(Yellow), Default Visibility);
		Create Effect(Players Within Radius(Vector(224.552, 2, 161.294), 2.500, All Teams, Off), Energy Sound, Null, Vector(224.552, 2,
			161.294), 40, Visible To);
		For Global Variable(checkingIndex, False, 6, True);
			Create Effect(First Of(True), Sphere, Global.ITEM_COLOR[Global.fridgeCode[Evaluate Once(Global.checkingIndex)]],
				Global.FRIDGE_POSITION[Global.checkingIndex], 0.500, Color);
			Create In-World Text(Players Within Radius(Global.FRIDGE_POSITION[Evaluate Once(Global.checkingIndex)], 5, All Teams, Off),
				Global.ITEM_NAME[Global.fridgeCode[Evaluate Once(Global.checkingIndex)]], Global.FRIDGE_POSITION[Global.checkingIndex], 2,
				Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.fridgeCode[Evaluate Once(Global.checkingIndex)]],
				Default Visibility);
		End;
		Create In-World Text(Players Within Radius(Vector(214.447, 2, 155.251), 15, Team 1, Off), Custom String("〔{0}〕: 영웅 변경",
			Input Binding String(Button(Interact))), Vector(214.447, 2, 155.251), 3, Do Not Clip, Visible To String and Color, Color(Rose),
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[0]), 4, Team 1, Off), Custom String("{0}", Global.storageData[0][0] ? Global.ITEM_NAME[Global.storageData[0][0]] : Global.storageLevel >= 0 ? Custom String("비어 있음") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[0]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[0][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[1]), 4, Team 1, Off), Custom String("{0}", Global.storageData[1][0] ? Global.ITEM_NAME[Global.storageData[1][0]] : Global.storageLevel >= 1 ? Custom String("비어 있음") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[1]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[1][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[2]), 4, Team 1, Off), Custom String("{0}", Global.storageData[2][0] ? Global.ITEM_NAME[Global.storageData[2][0]] : Global.storageLevel >= 2 ? Custom String("비어 있음") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[2]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[2][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[3]), 4, Team 1, Off), Custom String("{0}", Global.storageData[3][0] ? Global.ITEM_NAME[Global.storageData[3][0]] : Global.storageLevel >= 3 ? Custom String("비어 있음") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[3]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[3][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[4]), 4, Team 1, Off), Custom String("{0}", Global.storageData[4][0] ? Global.ITEM_NAME[Global.storageData[4][0]] : Global.storageLevel >= 4 ? Custom String("비어 있음") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[4]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[4][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[5]), 4, Team 1, Off), Custom String("{0}", Global.storageData[5][0] ? Global.ITEM_NAME[Global.storageData[5][0]] : Global.storageLevel >= 5 ? Custom String("비어 있음") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[5]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[5][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[6]), 4, Team 1, Off), Custom String("{0}", Global.storageData[6][0] ? Global.ITEM_NAME[Global.storageData[6][0]] : Global.storageLevel >= 6 ? Custom String("비어 있음") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[6]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[6][0]],
			Default Visibility);
		Create In-World Text(Players Within Radius(Evaluate Once(Global.STORAGE_POSITION[7]), 4, Team 1, Off), Custom String("{0}", Global.storageData[7][0] ? Global.ITEM_NAME[Global.storageData[7][0]] : Global.storageLevel >= 7 ? Custom String("비어 있음") : Custom String(" ")), Evaluate Once(Global.STORAGE_POSITION[7]), 0.900, Do Not Clip, Visible To String and Color, Global.ITEM_COLOR[Global.storageData[7][0]],
			Default Visibility);
		Create Effect(All Players(All Teams), Light Shaft, Color(Rose), Vector(214.447, True, 155.251), True, Visible To);
		Create HUD Text(First Of(True), Null, Custom String("레스토랑({CUSTOM_CODE}) v{CUSTOM_CODE_VERSION}\r\ndiscord&recipes : ow-restaurant.com/ko"), Null, Right, -2, Null, Custom Color(Array(255, 140, 110,
				255, 123)[Global.stageMode], Array(50, 255, 180, 120, 38)[Global.stageMode], Array(145, 180, 255, 120, 224)
				[Global.stageMode], 255), Null, String and Color, Default Visibility);
		Create HUD Text(Global.difficulty != 4 ? First Of(True) : Null, Custom String(" ${0} ", Local Player.dollar), Custom String("Score : {0}{2}\r\n내 직책 : {1}", Global.totalScore[0],
			Global.permissionText[0][Local Player.permission], Global.stageMode != 4 ? Custom String("\r\nHigh Score : {0}({1})", Global.totalScore[Global.stageMode][1], Global.totalScore[Global.stageMode][0]) : Custom String("")), Custom String("{0}\r\n{1}\r\n{2}", Custom String("{0}\r\n{1}",
			Custom String("{0} 제작 중인 특수 칼:{1}개", Hero Icon String(Hero(Torbjörn)), Global.orderedKnives[0] + Global.orderedKnives[1]), 
			Custom String("{0} 솥:{1}% / 튀김:{2}%", Hero Icon String(Hero(Junkrat)), 100 + 25 * Global.potPower, Global.fryingPower * 100)), 
			Custom String("{0} 팬:{1}% / 그릴:{2}%", Hero Icon String(Hero(Junkrat)), Global.panPower * 100, Global.grillingPower * 100), 
			Custom String("{0} 이속:{1}% / 시간:{2}초", Hero Icon String(Hero(Juno)), Local Player.playerSpeed, Global.stageTime)), Right, -1, Custom Color(
			46, 190, 54, 255), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Wait Until(Is True For Any(All Players(Team 1), Has Spawned(Current Array Element)), 99999);
		Global.ALLOWED_HEROS = Allowed Heroes(First Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element))));
		Start Rule(itemPhysics, Do Nothing);
		Start Rule(itemCooking, Do Nothing);
		Start Rule(despawnItem, Do Nothing);
		Global.stageMode = Workshop Setting Combo(Custom String("설정"), Custom String("요리 모드"), 0, Array(Custom String("연습 모드"),
			Custom String("캐주얼 다이닝"), Custom String("파인 다이닝"), Custom String("마스터쿡 챌린지"), Custom String("방장이 선택")), 0);
		If(Global.stageMode == 4);
			Set Status(Host Player, Null, Rooted, 9999);
			Create HUD Text(All Players(Team 1), Null, Null, Custom String("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), Top, -999, Null, Null, Null, Visible To,
				Default Visibility);
			Global.globalText[0] = Last Text ID;
			Create HUD Text(All Players(Team 1), Custom String(" 〔 {0} 〕 ", Array(Custom String("연습 모드"),
			Custom String("캐주얼 다이닝"), Custom String("파인 다이닝"), Custom String("마스터쿡 챌린지"))[Global.stageMode]), 
				Custom String("{0}", Array(
					Custom String("자유롭게 연습할 수 있는 샌드박스 모드 입니다"), 
					Custom String("5개의 메뉴가 등장하는 수습 난이도를 클리어하세요"), 
					Custom String("모든 메뉴가 등장하는 숙련 난이도를 클리어하세요"), 
					Custom String("Hell's Kitchen 클리어에 도전하세요"))[Global.stageMode]),
				Local Player == Host Player ? Custom String("[{0}]: 모드 변경", Input Binding String(Button(Reload)),
				Input Binding String(Button(Jump))) : Custom String(" 방장이 모드를 결정하는 중입니다"), Top, -998, Custom Color(Array(255, 140, 110,
				255, 123)[Global.stageMode], Array(50, 255, 180, 120, 38)[Global.stageMode], Array(145, 180, 255, 120, 224)
				[Global.stageMode], 255), Color(Yellow), Color(White), String and Color, Default Visibility);
			Global.globalText[1] = Last Text ID;
			Create HUD Text(All Players(Team 1), Null, Null, Custom String("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
				Top, -997, Null, Null, Null, Visible To, Default Visibility);
			Global.globalText[2] = Last Text ID;
			Global.stageMode = 0;
			Call Subroutine(selectMode);
		End;
		Global.difficulty = Array(4, 0, 1, 1)[Global.stageMode];
		Global.storageLevel = Array(7, 3, 3, -1, 3)[Global.stageMode];
		Call Subroutine(dataInit3);
		Global.scbRank = Empty Array;
		Global.customerCallTime = Array(16, 12, 8, 4, 16)[Global.difficulty];
		Global.setUpTime = Array(120, 40, 30, 30, 120)[Global.difficulty];
		Global.failEnd = Array(5, 3, 3, 3)[Global.difficulty];
		Global.scoreDecrease = Array(Array(Null, Null, Null, Null), Array(5, Null, 5, 5), Array(15, Null, 15, 35), Array(50, Null, 50, 50))
			[Global.difficulty];
		Global.despawnTime = Array(30, 25, 20, 15, 60)[Global.difficulty];
		Global.additionalScore = Array(Null, 5, 10, 15)[Global.difficulty];
		Global.stageTime = Array(300, 300, 180, 180)[Global.difficulty];
		Create Effect(All Players(Team 1), Sphere, Global.isOpen ? Color(Red) : Color(Lime Green), Vector(227.287, 2.050, 167.679), 0.250,
			Visible To and Color);
		Create In-World Text(Players Within Radius(Vector(227.287, 2.050, 167.679), 5, Team 1, Off), Custom String("영업 개시"), Vector(227.287, 2.050, 167.679), 2, Do Not Clip, Visible To and Color,
			Global.isOpen ? Color(Red) : Color(Green), Default Visibility);
		If(Global.difficulty == 4);
			Set Objective Description(All Players(All Teams), Custom String("연습 모드"), Visible To and String);
			Set Match Time(3599);
			Pause Match Time;
			Create Effect(All Players(All Teams), Sphere, Color(Sky Blue), Vector(232.608, 2.750, 170.455), 0.250, Visible To);
			Create In-World Text(Players Within Radius(Vector(232.413, 2, 170.333), 10, Team 1, Off), Custom String("{0}\r\n{1}", Custom String("〔{1}〕: 모드 {0}",
				Global.stage, Input Binding String(Button(Interact))), Custom String("〔{1}〕: {0}", Count Of(Global.STAGE_CODE[Global.stage]) > 1 ? Custom String("퓨전")
			: Global.STAGE_NAME[Global.totalScore[0]], Input Binding String(Button(Reload)))), Vector(232.608, 2.750, 170.455), 2, Do Not Clip, Visible To and String, Color(Sky Blue),
				Default Visibility);
			Global.totalScore[0] = Global.STAGE_CODE[Global.stage];
			Global.isOpen = False;
			Global.currentCustomer = Global.CUSTOMER_LIST[Global.stage];
			Global.currentMenu = Empty Array;
			For Global Variable(loadingMenu, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
				Modify Global Variable(currentMenu, Append To Array, Global.MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenu]]);
			End;
			Global.loadingMenu = Randomized Array(Global.currentMenu);
			Global.currentMenuHaz = Empty Array;
			For Global Variable(loadingMenuHaz, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
				Modify Global Variable(currentMenuHaz, Append To Array,
					Global.HAZARD_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuHaz]]);
			End;
			Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
			Global.currentMenuWeaver = Empty Array;
			For Global Variable(loadingMenuWeaver, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
				Modify Global Variable(currentMenuWeaver, Append To Array,
					Global.WEAVER_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuWeaver]]);
			End;
			Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
			Global.fridgeCode = Global.FRIDGE_LIST[Global.STAGE_CODE[Global.stage]];
			Global.KNIFE_DECREASE = Mapped Array(Global.KNIFE_DECREASE, Null);
		Else;
			Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50, -70)) * 0.100, Array(12, 12, 12, 15, 4)[Global.stageMode], 100, Null);
			Call Subroutine(createItem);
			Wait(0.100, Ignore Condition);
			Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50, -70)) * 0.100, 
{CUSTOM_HYPE_ITEM_IDX}
			, 100, Null);
			Call Subroutine(createItem);
			Start Rule(startStage, Do Nothing);
		End;
		Start Rule(rotatingFridge, Do Nothing);
		Create In-World Text(Players Within Radius(Vector(206.991, 1, 188.239), 14, All Teams, Off), 
		Custom String("{0} {CUSTOM_TITLE} \r\n\r\n {CUSTOM_DESCRIPTION} ", Icon String(Fire)), 
		Vector(213.2373, 3, 178.7080), 1, Do Not Clip, Visible To Position String and Color,
			Color(Violet), Default Visibility);
		Create In-World Text(Players Within Radius(Vector(206.991, 1, 188.239), 14, All Teams, Off), 
		Custom String("{0} v{CUSTOM_CODE_VERSION}\r\n\r\n{CUSTOM_RELEASE_NOTE}", Ability Icon String(Hero(Torbjörn), Button(Ability 2))), 
		Vector(213.2373, 2, 178.7080), 1, Do Not Clip, Visible To Position String and Color,
			Color(White), Default Visibility);
	}
}

rule("Global subroutine: Create item")
{
	event
	{
		Subroutine;
		createItem;
	}

	actions
	{
		Global.creatingItemIndex = Index Of Array Value(Global.itemCode, -1);
		If(Global.creatingItemIndex == -1);
			Global.creatingItemIndex = Count Of(Global.itemPosition);
		End;
		Create Effect(First Of(True), Sphere, Global.ITEM_COLOR[Global.itemCode[Evaluate Once(Global.creatingItemIndex)]],
			Update Every Frame(Global.itemPosition[Evaluate Once(Global.creatingItemIndex)]), 0.500, Position Radius and Color);
		Global.itemEffect[Global.creatingItemIndex] = Last Created Entity;
		Create In-World Text(Players Within Radius(Global.itemPosition[Evaluate Once(Global.creatingItemIndex)] + Up * 0.400, 10,
			All Teams, Surfaces), Global.ITEM_NAME[Global.itemCode[Evaluate Once(Global.creatingItemIndex)]],
			Global.itemPosition[Evaluate Once(Global.creatingItemIndex)], 2, Do Not Clip, Visible To Position String and Color,
			Global.ITEM_COLOR[Global.itemCode[Evaluate Once(Global.creatingItemIndex)]], Default Visibility);
		Global.itemText[Global.creatingItemIndex] = Last Text ID;
		Global.itemPosition[Global.creatingItemIndex] = Global.createItemData[0];
		Global.itemVelocity[Global.creatingItemIndex] = Global.createItemData[1];
		Global.itemCode[Global.creatingItemIndex] = Global.createItemData[2];
		Global.itemDurability[Global.creatingItemIndex] = Null;
		Global.itemCooker[Global.creatingItemIndex] = Null;
		If(Global.createItemData[3] != Null);
			Global.itemDurability[Global.creatingItemIndex] = Global.createItemData[3];
		End;
		If(Global.createItemData[4] != Null);
			Global.itemCooker[Global.creatingItemIndex] = Global.createItemData[4];
		End;
		Global.itemControled[Global.creatingItemIndex] = False;
		Global.itemDespawn[Global.creatingItemIndex] = Null;
		Global.itemProgress[Global.creatingItemIndex] = Null;
		Global.itemCount += True;
	}
}

disabled rule("PLAYER==========================================================================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Player: Spawn")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	actions
	{
		If(Count Of(All Players(Team 1)) > 0);
			Set Slow Motion(100);
		End;
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Melee));
		Set Ultimate Ability Enabled(Event Player, False);
		Disable Hero HUD(Event Player);
		Disable Messages(Event Player);
		Event Player.controlingIndex = -1;
		Event Player.durability = 100;
		Event Player.playerSpeed = 90;
        Event Player.itemPerk = -1;
		Event Player.isController = False;
		Wait Until(Has Spawned(Event Player), 9999);
		Disable Nameplates(All Players(Team 1), All Players(Team 1));
		Event Player.permission = Event Player == Host Player ? 3 : Workshop Setting Combo(Custom String("설정"), Custom String("플레이어 기본 직책"), 0, Array(Custom String("요리사"), Custom String("홀 서버"), Custom String("수습생")), 4);
		If(Slot Of(Host Player) == -1 && Count Of(Filtered Array(All Players(Team 1), Current Array Element.permission == 3)) == 0);
			Event Player.permission = 3;
		End;
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Status(Event Player, Null, Rooted, 9999);
		Set Move Speed(Event Player, Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player))
			? Event Player.playerSpeed * 0.916 : Event Player.playerSpeed);
		Create HUD Text(Event Player, Null, Null, Custom String("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Left, -99, Null, Null, Null, Visible To, Default Visibility);
		Event Player.tableText[False] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Top, -98, Null, Null, Null, Visible To, Default Visibility);
		Event Player.tableText[True] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Right, -97, Null, Null, Null, Visible To, Default Visibility);
		Event Player.tableText[2] = Last Text ID;
		Start Camera(Event Player, Vector(222.559, 4.963, 164.417), Vector(222.559, 4.963, 164.417) + Direction From Angles((Evaluate Once(
			Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 30), 80);
		Create In-World Text(Event Player, Custom String("〔{0}〕 로 시작", Input Binding String(Button(Jump))), Vector(222.559,
			Sine From Degrees(Min(Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 18) * 3.850, 164.417) + Direction From Angles((Evaluate Once(Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 30), 2.500, Do Not Clip,
			Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 0, 255),
			Default Visibility);
		Event Player.tableText[3] = Last Text ID;
		Create In-World Text(Event Player, Custom String("레 스 토 랑"), Vector(222.559, 5.100, 164.417) + Direction From Angles((
			Evaluate Once(Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 30), 4, Do Not Clip, Visible To Position String and Color,
			Custom Color(Array(140, 110, 255, 255, 255, 60)[Global.difficulty], Array(255, 180, 225, 120, 50, 255)[Global.difficulty],
			Array(180, 255, 120, 120, 145, 255)[Global.difficulty], 255), Default Visibility);
		Event Player.tableText[4] = Last Text ID;
		Create In-World Text(Event Player, Custom String("{CUSTOM_TITLE}"), Vector(222.559, 5.100, 164.417) + Direction From Angles((Evaluate Once(Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 33.500), 1.500, Do Not Clip, Visible To Position String and Color, Color(Orange),
			Default Visibility);
		Event Player.tableText[5] = Last Text ID;
		Create In-World Text(Event Player, Custom String("{CUSTOM_CREATOR_TAG} : {CUSTOM_CODE}\r\nGummyBear#11798\r\n변기클라우드#3523"), Vector(
			222.559, 5.100, 164.417) + Direction From Angles((Evaluate Once(Total Time Elapsed) - Total Time Elapsed) * 5 + 200, 39.500),
			1, Do Not Clip, Visible To Position String and Color, Color(White), Default Visibility);
		Event Player.tableText[6] = Last Text ID;
		Teleport(Event Player, Vector(206.991, 1, 188.239));
		Wait(True, Ignore Condition);
		Wait Until(Is Button Held(Event Player, Button(Jump)), 9999);
		Destroy In-World Text(Event Player.tableText[3]);
		Destroy In-World Text(Event Player.tableText[4]);
		Destroy In-World Text(Event Player.tableText[5]);
		Destroy In-World Text(Event Player.tableText[6]);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(222.559, 4.963, 164.417)), 9999, To World, None);
		Start Camera(Event Player, Eye Position(Event Player), Vector(222.559, 4.963, 164.417), 6);
		Set Invisible(Event Player, All);
		Wait(2, Ignore Condition);
		Clear Status(Event Player, Rooted);
		Stop Camera(Event Player);
		Stop Facing(Event Player);
		Wait(0.016, Ignore Condition);
		Set Invisible(Event Player, None);
		Destroy HUD Text(Event Player.tableText[False]);
		Destroy HUD Text(Event Player.tableText[True]);
		Destroy HUD Text(Event Player.tableText[2]);
		Create In-World Text(Has Spawned(Event Player) ? All Players(All Teams) : Null, Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(Event Player)),
			Global.permissionText[0][Event Player.permission], Event Player), Event Player, 1, Do Not Clip,
			Visible To Position String and Color, Global.permissionText[1][Event Player.permission], Default Visibility);
		Event Player.altNamePlate = Last Text ID;
		Call Subroutine(loadProgress);
		Call Subroutine(knifeHud);
		Call Subroutine(perkHud);
		Start Rule(saveProgress, Do Nothing);
	}
}

rule("Player: Control item")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.permission != 2;
	}

	actions
	{
		Abort If(Array Contains(Global.cuttingPlayer, Event Player));
		Event Player.controlingIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500) < 1.500 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500))));
		If(Event Player.controlingIndex == -1);
			Abort If(Global.itemCount >= 32);
			Event Player.handPosition = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
				Event Player) * 1.500, Null, Null, False);
			Event Player.controlingIndex = Index Of Array Value(Global.FRIDGE_POSITION, First Of(Sorted Array(Filtered Array(
				Global.FRIDGE_POSITION, Distance Between(Current Array Element, Event Player.handPosition) < 1), Distance Between(
				Event Player.handPosition, Current Array Element))));
			If(Event Player.controlingIndex != -1 && Global.fridgeCode[Event Player.controlingIndex]);
				Abort If(Event Player.permission == 1 || Event Player.permission == 2);
                Global.createItemData = Array(Global.FRIDGE_POSITION[Event Player.controlingIndex], Vector(False, False, False),
                    Global.fridgeCode[Event Player.controlingIndex], Null, Null);
                Call Subroutine(createItem);
                Event Player.controlingIndex = Global.creatingItemIndex;
            Else;
                Event Player.controlingIndex = Index Of Array Value(Global.STORAGE_POSITION, First Of(Sorted Array(Filtered Array(
                    Global.STORAGE_POSITION, Distance Between(Current Array Element, Event Player.handPosition) < 1), Distance Between(
                    Event Player.handPosition, Current Array Element))));
                If(Event Player.controlingIndex != -1 && Global.storageData[Event Player.controlingIndex][0]);
                    Abort If(Event Player.permission == 1 || Event Player.permission == 2);
                    Global.createItemData = Array(Global.STORAGE_POSITION[Event Player.controlingIndex], Vector(False, False, False),
                        Global.storageData[Event Player.controlingIndex][0], Global.storageData[Event Player.controlingIndex][1], Global.storageData[Event Player.controlingIndex][3]);
                    Call Subroutine(createItem);
                    Global.itemProgress[Global.creatingItemIndex] = Global.storageData[Event Player.controlingIndex][2];
                    Global.storageData[Event Player.controlingIndex] = Array(False, False, False);
                    Event Player.controlingIndex = Global.creatingItemIndex;
                Else;
                    Event Player.controlingIndex = -1;
                    Abort;
                End;
			End;
		End;
		Global.itemControled[Event Player.controlingIndex] = True;
		Global.itemLastControl[Event Player.controlingIndex] = Event Player;
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), Top, 5, Null, Null, Null, None,
			Default Visibility);
		Event Player.tableText[True] = Last Text ID;
		If(Array Contains(Global.KNIFE, Global.itemCode[Event Player.controlingIndex]));
			Create HUD Text(Event Player, Custom String("〔{0}〕:  칼 장착  ", Input Binding String(Button(Interact))), Null, Custom String("\r\n"),
				Top, 4, Global.ITEM_COLOR[Global.itemCode[Event Player.controlingIndex]], Null, Null, String, Default Visibility);
			Event Player.tableText[False] = Last Text ID;
        Else If(Array Contains(Global.PERK_LIST, Global.itemCode[Event Player.controlingIndex]));
			Create HUD Text(Event Player, Custom String("〔{0}〕:  아이템 장착  ", Input Binding String(Button(Interact))), Null, Custom String("\r\n"),
				Top, 4, Global.ITEM_COLOR[Global.itemCode[Event Player.controlingIndex]], Null, Null, String, Default Visibility);
			Event Player.tableText[False] = Last Text ID;
		Else If(18 == Global.itemCode[Event Player.controlingIndex]);
			Create HUD Text(Event Player, Custom String("〔{0}〕:  줍기  ", Input Binding String(Button(Interact))), Null, Custom String("\r\n"),
				Top, 4, Color(Yellow), Null, Null, String, Default Visibility);
			Event Player.tableText[False] = Last Text ID;
		Else If(Event Player.knifeCode == 3 || Event Player.knifeCode == 6);
			Create HUD Text(Event Player, Custom String("〔{0}〕:  썰기  ", Input Binding String(Button(Interact))), Null, Custom String("\r\n"),
				Top, 4, Color(Lime Green), Null, Null, String, Default Visibility);
			Event Player.tableText[False] = Last Text ID;
		End;
		While(Is Button Held(Event Player, Button(Primary Fire)) && Distance Between(Global.itemPosition[Event Player.controlingIndex],
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500) < 1.500);
			Wait(0.016, Ignore Condition);
			Global.itemVelocity[Event Player.controlingIndex] = (Eye Position(Event Player) + Facing Direction Of(Event Player)
				* 1.500 - Global.itemPosition[Event Player.controlingIndex]) * 0.400;
		End;
		Event Player.mixingIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500, Current Array Element)
			< 0.500 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500))));
		If(Event Player.mixingIndex != -1);
			Event Player.cookingIndex = Index Of Array Value(Global.MIXING_RECIPE[Global.itemCode[Event Player.controlingIndex]],
				Global.itemCode[Event Player.mixingIndex]);
			If(Event Player.cookingIndex == -1);
				Global.itemDespawn[Event Player.controlingIndex] = Null;
				Global.itemControled[Event Player.controlingIndex] = False;
			Else;
				Global.itemCode[Event Player.mixingIndex] = Global.MIXING_RESULT[Global.itemCode[Event Player.controlingIndex]][Event Player.cookingIndex];
				Global.itemProgress[Event Player.mixingIndex] = Global.itemProgress[Event Player.controlingIndex] == Null && Global.itemProgress[Event Player.mixingIndex] == Null ? Null : 0.001;
				Global.itemStatus[Event Player.mixingIndex] = Null;
				Global.itemDespawn[Event Player.mixingIndex] = Null;
				Modify Global Variable At Index(itemCooker, Event Player.mixingIndex, Append To Array, Append To Array(
					Global.itemCooker[Event Player.controlingIndex], Event Player));
				Call Subroutine(destroyItem);
				Play Effect(All Players(All Teams), Soldier: 76 Sprint Start Sound, Null, Event Player, 200);
			End;
		Else;
			Global.itemDespawn[Event Player.controlingIndex] = Null;
			Global.itemControled[Event Player.controlingIndex] = False;
		End;
		Event Player.controlingIndex = -1;
		Destroy HUD Text(Event Player.tableText[False]);
		Destroy HUD Text(Event Player.tableText[True]);
	}
}

rule("Player: Interact")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		If(Event Player.controlingIndex == -1);
			Event Player.cuttingIndex = Index Of Array Value(Global.CUTTING_POSITION, First Of(Filtered Array(Global.CUTTING_POSITION,
				Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500, Current Array Element) < 1.500)));
			If(Event Player.cuttingIndex != -1);
				Abort If(Event Player.permission == 1 || Event Player.permission == 2);
				Abort If(Global.cuttingPlayer[Event Player.cuttingIndex] != Null || Event Player.knifeCode == -1);
				Global.cuttingPlayer[Event Player.cuttingIndex] = Event Player;
				While(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Global.CUTTING_POSITION[Event Player.cuttingIndex]) < 1.500 && Is Button Held(Event Player, Button(Interact)));
					Event Player.cookingIndex = Filtered Array(Mapped Array(Global.itemPosition, Distance Between(Current Array Element,
						Global.CUTTING_POSITION[Event Player.cuttingIndex]) < 1 ? Current Array Index : -1), Current Array Element != -1);
					If(Event Player.cookingIndex != Empty Array);
						Event Player.cuttingAmount = Global.KNIFE_AMOUNT[Event Player.knifeCode] * (Event Player.durability / 200 + 0.500);
						While(Event Player.cookingIndex != Empty Array);
							Global.itemVelocity[Event Player.cookingIndex] += Direction From Angles(Random Integer(False, 360), False) * 0.010 + Up * (
								0.020 + 0.025 / Event Player.cuttingAmount);
							Global.itemDespawn[Event Player.cookingIndex] = Null;
							If(Global.itemStatus[Event Player.cookingIndex] == 1);
								Global.itemProgress[Event Player.cookingIndex] += Event Player.cuttingAmount;
							Else;
								Global.itemStatus[Event Player.cookingIndex] = 1;
								Global.itemProgress[Event Player.cookingIndex] = Event Player.cuttingAmount;
							End;
							If(Global.itemProgress[Event Player.cookingIndex] >= Global.CUTTING_NEEDED[Global.itemCode[Event Player.cookingIndex]]);
								If(!Count Of(Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]]));
									Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null,
										Global.CUTTING_POSITION[Event Player.cuttingIndex], 200);
									Modify Global Variable At Index(itemCooker, Event Player.cookingIndex, Append To Array, Event Player);
									Global.itemCode[Event Player.cookingIndex] = Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]];
									Global.itemProgress[Event Player.cookingIndex] = Null;
								Else If(Global.itemCount + Count Of(Global.CUTTING_RESULT[Event Player.cookingIndex]) < 32);
									Global.createItemData = Array(Global.itemPosition[Event Player.cookingIndex], Direction From Angles(Random Integer(False, 360),
										False) * 0.010 + Up * (0.020 + 0.025 / Event Player.cuttingAmount), Last Of(Global.CUTTING_RESULT[Global.itemCode[First Of(
										Event Player.cookingIndex)]]), Null, Null);
									Call Subroutine(createItem);
									Global.itemCode[Event Player.cookingIndex] = First Of(Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]]);
									Global.itemProgress[Event Player.cookingIndex] = Null;
									Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null,
										Global.CUTTING_POSITION[Event Player.cuttingIndex], 200);
									Modify Global Variable At Index(itemCooker, Event Player.cookingIndex, Append To Array, Event Player);
								End;
							End;
							Modify Player Variable(Event Player, cookingIndex, Remove From Array By Index, False);
							Event Player.durability -= Global.KNIFE_DECREASE[Event Player.knifeCode];
							If(Event Player.durability <= 0);
								Event Player.knifeCode = -1;
								Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Null, Global.CUTTING_POSITION[Event Player.cuttingIndex],
									100);
								Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null,
									Global.CUTTING_POSITION[Event Player.cuttingIndex], 75);
								Play Effect(Event Player, Bad Explosion, Color(Red), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
									False);
								Destroy HUD Text(Event Player.knifeText);
								Global.cuttingPlayer[Event Player.cuttingIndex] = Null;
								Abort;
							End;
						End;
						Play Effect(All Players(All Teams), Good Explosion, Color(White), Global.CUTTING_POSITION[Event Player.cuttingIndex], True);
						Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null,
							Global.CUTTING_POSITION[Event Player.cuttingIndex], 75);
						Event Player.scbCutted += 1;
					End;
					Wait Until(!Is Button Held(Event Player, Button(Interact)),
						Event Player.cuttingIndex == 1 && Event Player.knifeCode == 2 ? 0.300 : 0.500);
					If(!Is Button Held(Event Player, Button(Interact)));
						Break;
					End;
				End;
				Global.cuttingPlayer[Event Player.cuttingIndex] = Null;
				Wait(Event Player.knifeCode == 5 ? 0.010 : 0.400, Ignore Condition);
			Else If(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500, Vector(234.340, 2, 168.146))
					< 1.500);
				Event Player.cookingIndex = Filtered Array(Mapped Array(Global.itemPosition, Distance Between(Current Array Element, Vector(
					233.911, 1.821, 167.590)) < 0.500 ? Current Array Index : -1), Current Array Element != -1);
				If(Event Player.cookingIndex != Empty Array);
					While(Event Player.cookingIndex != Empty Array);
						Destroy Effect(Global.itemEffect[Event Player.cookingIndex]);
						Destroy In-World Text(Global.itemText[Event Player.cookingIndex]);
						Wait(0.016, Ignore Condition);
						Global.itemPosition[Event Player.cookingIndex] = Down;
						Global.itemVelocity[Event Player.cookingIndex] = Null;
						Global.itemCode[Event Player.cookingIndex] = -1;
						Global.itemCount -= True;
						Modify Player Variable(Event Player, cookingIndex, Remove From Array By Index, False);
					End;
					Play Effect(All Players(All Teams), Good Explosion, Color(Aqua), Vector(233.911, 1.821, 167.590), True);
					Play Effect(All Players(All Teams), Brigitte Whip Shot Heal Area Sound, Null, Vector(233.911, 1.821, 167.590), 100);
				End;
			Else If(Global.currentUpgrade != -1 && Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(217.370, 2, 172.520)) < 1.500);
				If(Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade] > Event Player.dollar);
					Play Effect(Event Player, Explosion Sound, Null, Vector(217.370, 2, 172.520), 50);
					Small Message(Event Player, Custom String("  $ 돈이 부족합니다"));
					Wait(True, Ignore Condition);
				Else;
					Event Player.dollar -= Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade];
					Event Player.scbScore += Round To Integer(Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade] / 20, Down);
					If(Global.currentUpgrade);
						Call Subroutine(purchaseUpgrade);
					Else;
						If(Event Player.selectedUpgrade == 2);
							Small Message(Event Player, Custom String("  전설 칼 뽑기 -${0}", Global.upgradePrice[Global.currentUpgrade][2]));
							Small Message(Event Player, Custom String("  다음번에 상인이 칼을 가져올 것 입니다  "));
							Global.orderedKnives[1] += True;
						Else If(Event Player.selectedUpgrade == 1);
							Small Message(Event Player, Custom String("  특수 칼 뽑기 -${0}", Global.upgradePrice[Global.currentUpgrade][1]));
							Small Message(Event Player, Custom String("  다음번에 상인이 칼을 가져올 것 입니다  "));
							Global.orderedKnives[0] += True;
						Else;
							Abort If(Global.itemCount == 32);
							Small Message(Event Player, Custom String("  {0} 구매 -${1}",
								Global.ITEM_NAME[Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade]],
								Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade]));
							Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
								-70)) * 0.100, Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade], 100, Null);
							Call Subroutine(createItem);
						End;
					End;
					Set Move Speed(Event Player, Event Player.playerSpeed);
					All Players(Team 2).customerStatus = 1;
					Play Effect(All Players(All Teams), Buff Impact Sound, Null, Vector(217.370, 2, 172.520), 100);
					Play Effect(All Players(All Teams), Good Pickup Effect, Global.upgradeColor[Event Player.selectedUpgrade], Vector(217.370, 2,
						172.520), 2);
				End;
			Else If(Distance Between(Position Of(Event Player), Vector(215.343, True, 155.834)) < 1);
				Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero Of(Event Player)));
				Wait(0.016, Ignore Condition);
				Set Player Allowed Heroes(Event Player, Global.ALLOWED_HEROS);
				Wait Until(Has Spawned(Event Player), 99999);
				Teleport(Event Player, Vector(215.343, True, 155.834));
				Wait(False, Ignore Condition);
				Set Facing(Event Player, Vector(0.830, False, 0.560), To World);
				Set Move Speed(Event Player, Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player))
					? Event Player.playerSpeed * 0.916 : Event Player.playerSpeed);
			Else If(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(232.608, 2.750, 170.455)) < 1 && Global.difficulty == 4 && Global.isOpen == False);
				Global.stage = (Global.stage + True) % Count Of(Global.STAGE_CODE);
				Global.totalScore[0] = Global.STAGE_CODE[Global.stage];
				Global.currentCustomer = Global.CUSTOMER_LIST[Global.stage];
				Global.currentMenu = Empty Array;
				For Global Variable(loadingMenu, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
					Modify Global Variable(currentMenu, Append To Array, Global.MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenu]]);
				End;
				Global.loadingMenu = Randomized Array(Global.currentMenu);
				Global.currentMenuHaz = Empty Array;
				For Global Variable(loadingMenuHaz, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
					Modify Global Variable(currentMenuHaz, Append To Array,
						Global.HAZARD_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuHaz]]);
				End;
				Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
				Global.currentMenuWeaver = Empty Array;
				For Global Variable(loadingMenuWeaver, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
					Modify Global Variable(currentMenuWeaver, Append To Array,
						Global.WEAVER_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuWeaver]]);
				End;
				Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
				Global.fridgeCode = Global.FRIDGE_LIST[Global.STAGE_CODE[Global.stage]];
			Else If(Event Player.permission == 3 && Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(227.287, 2.050, 167.679)) < 1 && Global.difficulty != 4 && Global.isOpen == False && Match Time > 3);
				Small Message(All Players(All Teams), Custom String("  준비 시간을 생략합니다! "));
				Communicate(Event Player, Countdown);
				Set Match Time(3);
				Wait(3, Ignore Condition);
				Global.skipSetup = True;
			Else If(Event Player.permission != 3 && Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(227.287, 2.050, 167.679)) < 1 && Global.difficulty != 4 && Global.isOpen == False && Match Time > 3);
				Small Message(All Players(All Teams), Custom String("  헤드셰프만 준비 시간을 생략할 수 있습니다 "));
				Communicate(Event Player, Press the Attack);
				Wait(0.75, Ignore Condition);
			Else If(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(227.287, 2.050, 167.679)) < 1 && Global.difficulty == 4);
				If(Global.isOpen);
					Global.isOpen = False;
					Small Message(All Players(All Teams), Custom String("  임시 개장 종료! "));
					Destroy HUD Text(Global.globalText[True]);
					All Players(Team 2).customerStatus = -1;
					Wait(1.5, Ignore Condition);
				Else;
					Global.isOpen = True;
					Small Message(All Players(All Teams), Custom String("  임시 개장! 이제 실전입니다! "));
					Create HUD Text(All Players(All Teams), Custom String("　　　　　주문서　　　　　"), Null, Custom String("\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
						Left, False, Color(Yellow), Null, Null, Visible To and Color, Default Visibility);
					Global.globalText[True] = Last Text ID;
					Wait(0.016, Ignore Condition);
					Start Rule(callCustomer, Restart Rule);
				End;
			End;
		Else If(Array Contains(Global.KNIFE, Global.itemCode[Event Player.controlingIndex]) && Event Player.durability <= 100);
			If(Event Player.knifeCode + True);
				Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
					Global.KNIFE[Event Player.knifeCode], Event Player.durability, Null);
				Call Subroutine(createItem);
			End;
			Event Player.knifeCode = Index Of Array Value(Global.KNIFE, Global.itemCode[Event Player.controlingIndex]);
			Event Player.durability = Global.itemDurability[Event Player.controlingIndex];
			Destroy HUD Text(Event Player.knifeText);
			Call Subroutine(knifeHud);
			Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Eye Position(Event Player), 100);
			Call Subroutine(destroyItem);
			Wait(1.000, Ignore Condition);
        Else If(Array Contains(Global.PERK_LIST, Global.itemCode[Event Player.controlingIndex]));
			If(Event Player.itemPerk + True);
				Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
					Global.PERK_LIST[Event Player.itemPerk], Event Player.itemPerkDurability, Null);
				Call Subroutine(createItem);
			End;
			Event Player.itemPerk = Index Of Array Value(Global.PERK_LIST, Global.itemCode[Event Player.controlingIndex]);
			Event Player.itemPerkDurability = Global.itemDurability[Event Player.controlingIndex];
			Destroy HUD Text(Event Player.itemPerkText);
			Call Subroutine(perkHud);
			Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Eye Position(Event Player), 100);
			Call Subroutine(destroyItem);
			Wait(1.000, Ignore Condition);
		Else If(18 == Global.itemCode[Event Player.controlingIndex]);
			Event Player.dollar += 100;
			Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Eye Position(Event Player), 100);
			Call Subroutine(destroyItem);
			Wait(1.000, Ignore Condition);
		Else If(Event Player.knifeCode == 3 || Event Player.knifeCode == 6);
			Abort If(Event Player.permission == 1 || Event Player.permission == 2);
			Event Player.cuttingAmount = Global.KNIFE_AMOUNT[Event Player.knifeCode] * (Event Player.durability / 200 + 0.500);
			While(Is Button Held(Event Player, Button(Interact)));
				Event Player.cookingIndex = Event Player.controlingIndex;
				If(Global.itemStatus[Event Player.cookingIndex] == 1);
					Global.itemProgress[Event Player.cookingIndex] += Event Player.cuttingAmount;
				Else;
					Global.itemStatus[Event Player.cookingIndex] = 1;
					Global.itemProgress[Event Player.cookingIndex] = Event Player.cuttingAmount;
				End;
				If(Global.itemProgress[Event Player.cookingIndex] >= Global.CUTTING_NEEDED[Global.itemCode[Event Player.cookingIndex]]);
					If(Count Of(Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]]) == False);
						Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(
							Event Player) * 1.500, 200);
						Modify Global Variable At Index(itemCooker, Event Player.cookingIndex, Append To Array, Event Player);
						Global.itemCode[Event Player.cookingIndex] = Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]];
						Global.itemProgress[Event Player.cookingIndex] = Null;
					Else If(Global.itemCount + Count Of(Global.CUTTING_RESULT[Event Player.cookingIndex]) < 32);
						Global.createItemData = Array(Global.itemPosition[First Of(Event Player.cookingIndex)], Direction From Angles(Random Integer(False,
							360), False) * 0.010 + Up * (0.020 + 0.025 / Event Player.cuttingAmount), Last Of(
							Global.CUTTING_RESULT[Global.itemCode[First Of(Event Player.cookingIndex)]]), Null, Null);
						Call Subroutine(createItem);
						Global.itemCode[Event Player.cookingIndex] = First Of(Global.CUTTING_RESULT[Global.itemCode[Event Player.cookingIndex]]);
						Global.itemProgress[Event Player.cookingIndex] = Null;
						Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(
							Event Player) * 1.500, 200);
						Modify Global Variable At Index(itemCooker, Event Player.cookingIndex, Append To Array, Event Player);
					End;
				End;
				Modify Player Variable(Event Player, cookingIndex, Remove From Array By Index, False);
				Event Player.durability -= Global.KNIFE_DECREASE[Event Player.knifeCode];
				If(Event Player.durability <= 0);
					Event Player.knifeCode = -1;
					Play Effect(Event Player, Bastion Tank Cannon Explosion Sound, Null, Eye Position(Event Player) + Facing Direction Of(Event Player)
						* 1.500, 100);
					Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(
						Event Player) * 1.500, 75);
					Play Effect(Event Player, Bad Explosion, Color(Red), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
						False);
					Destroy HUD Text(Event Player.knifeText);
					Abort;
				End;
				Play Effect(All Players(All Teams), Good Explosion, Color(White), Eye Position(Event Player) + Facing Direction Of(Event Player)
					* 1.500, True);
				Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(
					Event Player) * 1.500, 75);
				Event Player.scbCutted += 1;
				Wait(0.500, Ignore Condition);
			End;
		End;
	}
}

rule("Player subroutine: destroy item")
{
	event
	{
		Subroutine;
		destroyItem;
	}

	actions
	{
		Destroy Effect(Global.itemEffect[Event Player.controlingIndex]);
		Destroy In-World Text(Global.itemText[Event Player.controlingIndex]);
		Wait(0.016, Ignore Condition);
		Global.itemPosition[Event Player.controlingIndex] = Down;
		Global.itemVelocity[Event Player.controlingIndex] = Null;
		Global.itemCode[Event Player.controlingIndex] = -1;
		Global.itemCount -= 1;
	}
}

rule("Player subroutine: destroy perk")
{
	event
	{
		Subroutine;
		destroyPerk;
	}

	actions
	{
		If(Event Player.itemPerkDurability <= 0);
			Event Player.itemPerk = -1;
			Destroy HUD Text(Event Player.itemPerkText);
		End;
	}
}

rule("Player: Reload button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		If(Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500,
					Vector(232.608, 2.750, 170.455)) < 1 && Global.difficulty == 4 && Global.isOpen == False && Count Of(Global.STAGE_CODE[Global.stage]) <= 1);
			Global.totalScore[0] = (Global.totalScore[0] + True) % Count Of(Global.FRIDGE_LIST);
			Global.currentMenu = Empty Array;
			Modify Global Variable(currentMenu, Append To Array, Global.MENU_LIST[Global.totalScore[0]]);
			Global.loadingMenu = Randomized Array(Global.currentMenu);
			Global.currentMenuHaz = Empty Array;
			Modify Global Variable(currentMenuHaz, Append To Array,
					Global.HAZARD_MENU_LIST[Global.totalScore[0]]);
			Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
			Global.currentMenuWeaver = Empty Array;
			Modify Global Variable(currentMenuWeaver, Append To Array,
					Global.WEAVER_MENU_LIST[Global.totalScore[0]]);
			Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
			Global.fridgeCode = Global.FRIDGE_LIST[Global.totalScore[0]];
		End;
		Abort If(Event Player.controlingIndex + True);
		If(Global.currentUpgrade + True && Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500, Vector(
			217.370, 2, 172.520)) < 1.500);
			Event Player.selectedUpgrade = (Event Player.selectedUpgrade + True) % Count Of(Global.upgradePrice[Global.currentUpgrade]);
		Else;
		Abort If(Global.setUpTime <= 0);
		Wait(0.2, Abort When False);
		If(Event Player.itemPerk + True);
			Small Message(Event Player, Custom String("  길게 누르면 아이템을 내려놓습니다 "));
			Wait(2, Abort When False);
			Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
				Global.PERK_LIST[Event Player.itemPerk], Event Player.itemPerkDurability, Null);
			Call Subroutine(createItem);
			Destroy HUD Text(Event Player.itemPerkText);
			Event Player.itemPerk = -1;
		Else If(Event Player.knifeCode + True && Event Player.durability <= 100);
			Small Message(Event Player, Custom String("  길게 누르면 칼을 내려놓습니다 "));
			Wait(2, Abort When False);
			Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
				Global.KNIFE[Event Player.knifeCode], Event Player.durability, Null);
			Call Subroutine(createItem);
			Destroy HUD Text(Event Player.knifeText);
			Event Player.knifeCode = -1;
		End;
		Abort If(Custom String("{0}", Event Player) != Custom String("{CUSTOM_CREATOR_NAME}"));
		Wait(True, Abort When False);
		Small Message(Event Player, Custom String("keep press to outdate warning"));
		Wait(2, Abort When False);
		Create HUD Text(All Players(All Teams), Icon String(Warning), Custom String("업데이트 필요! - 코드 : {CUSTOM_CODE}"), 
		Custom String("버그 수정 및 추가 업데이트를 적용하려면\r\n위의 코드로 게임을 다시 불러와주세요!"), Top,
			2.5, Color(Red), Color(Yellow), Color(White), Visible To and String,
			Default Visibility);
	}
}

rule("Player: Secondary fire button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Event Player.controlingIndex == -1;
	}

	actions
	{
		Event Player.controlingIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500) < 1.500 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500))));
		If(Event Player.itemPerk == 4);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Gray), Eye Position(Event Player) + Facing Direction Of(Event Player)* 3, 0.01);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Gray), Global.itemPosition[Event Player.controlingIndex], 0.01);
			Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Null, Eye Position(Event Player) + Facing Direction Of(Event Player)* 1.500, 50);
			If(Event Player.controlingIndex != -1);
				Call Subroutine(destroyItem);
			End;
			Event Player.controlingIndex = -1;
			Event Player.itemPerkDurability -= 0.5;
			Call Subroutine(destroyPerk);
		Else If(Event Player.itemPerk == 8);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Eye Position(Event Player) + Facing Direction Of(Event Player)* 3, 1);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Global.itemPosition[Event Player.controlingIndex], 1);
			Play Effect(All Players(All Teams), Reinhardt Fire Strike Target Impact Sound, Null, Eye Position(Event Player) + Facing Direction Of(Event Player)* 3, 100);
            If(Event Player.controlingIndex != -1);
                If(Global.itemStatus[Event Player.controlingIndex] == 3);
					Global.itemProgress[Event Player.controlingIndex] += 1;
				Else;
					Global.itemStatus[Event Player.controlingIndex] = 3;
					Global.itemProgress[Event Player.controlingIndex] = 1;
				End;
				If(Global.itemProgress[Event Player.controlingIndex] >= Global.GRILLING_NEEDED[Global.itemCode[Event Player.controlingIndex]]);
					Global.itemCode[Event Player.controlingIndex] = Global.GRILLING_RESULT[Global.itemCode[Event Player.controlingIndex]];
					Global.itemProgress[Event Player.controlingIndex] = Null;
					Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Null, Global.itemPosition[Event Player.controlingIndex], 50);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Global.itemPosition[Event Player.controlingIndex], 0.500);
					Global.itemVelocity[Event Player.controlingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.005 + Vector(False, 0.075, False);
					Modify Global Variable At Index(itemCooker, Event Player.controlingIndex, Append To Array, Global.itemLastControl[Event Player.controlingIndex]);
				End;
            End;
			Event Player.controlingIndex = -1;
			Event Player.itemPerkDurability -= 1;
			Call Subroutine(destroyPerk);
			Wait(0.300, Ignore Condition);
		End;
		Wait(0.050, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("Player: Ultimate button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
        Event Player.itemPerk != -1;
	}

	actions
	{
        If(Event Player.itemPerk == 0);
            Small Message(Event Player, Custom String("  100초간 이동속도 증가!  "));
            Destroy HUD Text(Event Player.itemPerkText);
            Event Player.itemPerk = -1;
            Set Move Speed(Event Player, 150);
            Play Effect(All Players(All Teams), Good Explosion, Color(Green), Eye Position(Event Player), 2);
            Play Effect(Event Player, Ana Biotic Grenade Increased Healing Sound, Null, Eye Position(Event Player), 100);
            Wait(100, Ignore Condition);
            Set Move Speed(Event Player, Event Player.playerSpeed);
        Else If(Event Player.itemPerk == 1);
            Big Message(All Players(All Teams), Custom String("  시공간이 뒤틀립니다!  "));
            Destroy HUD Text(Event Player.itemPerkText);
            Event Player.itemPerk = -1;
            Set Move Speed(All Players(Team 1), 150);
            Set Move Speed(Event Player, 200);
            Event Player.durability = Event Player.durability * 100;
            Play Effect(All Players(All Teams), Good Explosion, Color(Violet), Eye Position(Event Player), 2);
            Play Effect(All Players(All Teams), Ana Biotic Grenade Increased Healing Sound, Color(Green), Eye Position(Event Player), 2);
            Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), Event Player, 1, Visible To Position and Radius);
            Event Player.playerEffectStatus = Last Created Entity;
            Wait(0.800, Ignore Condition);
            Set Slow Motion(50);
            Wait(20, Ignore Condition);
            Destroy Effect(Event Player.playerEffectStatus);
            Set Slow Motion(100);
            For Player Variable(Event Player, perkIndex, False, 6, True);
                Set Move Speed(All Players(Team 1)[Event Player.perkIndex], All Players(Team 1)[Event Player.perkIndex].playerSpeed);
            End;
            Event Player.durability = Event Player.durability / 100;
        Else If(Event Player.itemPerk == 3);
            If(Event Player.controlingIndex != -1);
                Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Global.itemPosition[Event Player.controlingIndex], 2);
                Play Effect(All Players(All Teams), Heal Target Active Effect, Null, Global.itemPosition[Event Player.controlingIndex], 2);
                Global.itemProgress[Event Player.controlingIndex] = 0;
                Event Player.itemPerkDurability -= 5;
                Call Subroutine(destroyPerk);
            End;
        Else If(Event Player.itemPerk == 7);
            If(Event Player.controlingIndex != -1 && !Array Contains(Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), Global.itemCode[Event Player.controlingIndex]));
                Play Effect(All Players(All Teams), Good Explosion, Color(Rose), Global.itemPosition[Event Player.controlingIndex], 2);
                Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Global.itemPosition[Event Player.controlingIndex], 2);
                Global.createItemData = Array(Eye Position(Event Player), Facing Direction Of(Event Player) * 0.200,
                    Global.itemCode[Event Player.controlingIndex], Global.itemDurability[Event Player.controlingIndex], Global.itemCooker[Event Player.controlingIndex]);
                Call Subroutine(createItem);
				Global.itemStatus[Global.creatingItemIndex] = Global.itemStatus[Event Player.controlingIndex];
				Global.itemProgress[Global.creatingItemIndex] = Global.itemProgress[Event Player.controlingIndex];
                Event Player.itemPerkDurability -= 20;
                Call Subroutine(destroyPerk);
            End;
		Else If(Event Player.itemPerk == 9 && Count Of(All Players(Team 1)) < 6);
			Play Effect(All Players(All Teams), Good Explosion, Color(Orange), Event Player, 2);
			Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Event Player, 2);
			Create Dummy Bot(Hero(Wrecking Ball), Team 1, 6, Vector(220.86, 10.40, 166.95), Null);
			Small Message(All Players(All Teams), Custom String("  {1}{0}이(가) 서빙볼을 소환했습니다! ", Event Player, Hero Icon String(Hero Of(Event Player))));
			Global.itemStatus[Global.creatingItemIndex] = Global.itemStatus[Event Player.controlingIndex];
			Global.itemProgress[Global.creatingItemIndex] = Global.itemProgress[Event Player.controlingIndex];
			Destroy HUD Text(Event Player.itemPerkText);
			Event Player.itemPerk = -1;
        End;	
	}
}

rule("Player: Authorize Controller")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Event Player.isController == False;
	}

	actions
	{
		Small Message(Event Player, Custom String("  뭉개기 동작을 버튼으로 대체하려면 컨트롤러 스틱을 앞으로 천천히 움직여주세요! "));
		Wait Until(Z Component Of(Throttle Of(Event Player)) < 0.800 && 
			Z Component Of(Throttle Of(Event Player)) > 0.200, 3);
		If(Z Component Of(Throttle Of(Event Player)) < 0.800 && Z Component Of(Throttle Of(Event Player)) > 0.200);
			Event Player.isController = True;
			Small Message(Event Player, Custom String("  이제 [{0}] 키로 재료를 뭉갤 수 있습니다! ", Input Binding String(Button(Melee))));
			Create HUD Text(Event Player, Ability Icon String(Hero(Doomfist), Button(Primary Fire)), Custom String("재료 뭉개기"), Custom String("〔{0}〕", Input Binding String(Button(Melee))), Right, True, Color(Gray), Color(Gray), Color(White),
                String and Color, Default Visibility);
		End;
		Wait(3, Ignore Condition);
	}
}

rule("Player: Melee button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
        Event Player.controlingIndex == -1;
		Event Player.isController == True;
	}

	actions
	{
		Event Player.controlingIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500) < 1.500 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.500))));
		If(Event Player.controlingIndex != -1);
			Play Effect(All Players(All Teams), Bad Explosion, Global.ITEM_COLOR[Global.itemCode[Event Player.controlingIndex]],
				Global.itemPosition[Event Player.controlingIndex], 0.5);
			Play Effect(All Players(All Teams), Junkrat Frag Launcher Explosion Sound, Null, Global.itemPosition[Event Player.controlingIndex], 45);
			Global.itemVelocity[Event Player.controlingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.115 - Vector(False, 0.245, False);
			Event Player.controlingIndex = -1;
		End;
		Wait(1.000, Ignore Condition);
    }
}

rule("Player: Left match")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		Global.itemControled = Mapped Array(Global.itemControled, Current Array Element && Entity Exists(
			Global.itemLastControl[Current Array Index]));
		Wait(1.5, Ignore Condition);
		Host Player.permission = 3;
		If(Slot Of(Host Player) == -1 && Count Of(Filtered Array(All Players(Team 1), Current Array Element.permission == 3)) == 0);
			Random Value In Array(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && Current Array Element.permission == 0)).permission = 3;
			Small Message(Filtered Array(All Players(Team 1), Current Array Element.permission == 3), Custom String("  당신이 이제 헤드셰프 입니다!  "));
		End;
		Destroy In-World Text(Event Player.altNamePlate);
		If(Count Of(All Players(Team 1)) == 0);
			Set Slow Motion(1);
			If(Global.stage == 0);
				Restart Match;
			End;
		End;
	}
}

disabled rule("DUMMY===========================================================================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Dummy: Spawn")
{
	event
	{
		Player Joined Match;
		Team 2;
		All;
	}

	actions
	{
		Event Player.controlingIndex = Index Of Array Value(Array(Hero(Soldier: 76), Hero(Roadhog), Hero(Bastion), Hero(Tracer), Hero(
			Zarya), Hero(Mercy), Hero(Hanzo), Hero(D.Va), Hero(Hazard), Hero(Mauga), Hero(Moira), Hero(LifeWeaver)), Hero Of(Event Player));
		Event Player.customerSpeed = Hero Of(Event Player) == Hero(Tracer) ? 6 : 5.500;
		If(Event Player.controlingIndex == -1);
			Event Player.customerPath = Global.TABLE_PATH[12];
			Event Player.cookingIndex = Index Of Array Value(Array(Hero(Torbjörn), Hero(Mei), Hero(Junkrat), Hero(Juno)), Hero Of(
				Event Player));
			Disable Movement Collision With Environment(Event Player, False);
			Wait Until(Has Spawned(Event Player), True);
			Start Forcing Dummy Bot Name(Event Player, String Split(Custom String("부엌칼 상인/아이템 상인/업그레이드/업그레이드"), Custom String("/"))
				[Event Player.cookingIndex]);
			For Player Variable(Event Player, controlingIndex, False, 6, True);
				Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
					To World, Replace existing throttle, None);
				Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
				Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / 5.500, Ignore Condition);
				Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
			End;
			Stop Throttle In Direction(Event Player);
			Stop Facing(Event Player);
			Communicate(Event Player, Hello);
			Global.currentUpgrade = Event Player.cookingIndex;
			If(!Event Player.cookingIndex && (Global.orderedKnives[0] || Global.orderedKnives[1]));
				Small Message(All Players(All Teams), Custom String("  {0} : 주문한 칼 가지고 왔다네!", Hero Icon String(Hero(Torbjörn))));
				While(Global.orderedKnives[0]);
					Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
						-70)) * 0.100, Random Integer(2, 5), 100, Null);
					Call Subroutine(createItem);
					Global.orderedKnives[0] -= True;
					Wait(0.100, Ignore Condition);
				End;
				While(Global.orderedKnives[1]);
					Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
						-70)) * 0.100, Random Value In Array(Array(3, 4, 3, 4, 3, 4, 3, 4, 7)), 100, Null);
					Call Subroutine(createItem);
					Global.orderedKnives[1] -= True;
					Wait(0.100, Ignore Condition);
				End;
			Else If(Event Player.cookingIndex == 1 && Global.stageMode != 3 && Global.stage < 4);
				Small Message(All Players(All Teams), Custom String("  {0} : 무료 아이템을 나눠드릴게요!", Hero Icon String(Hero(Mei))));
				For Player Variable(Event Player, controlingIndex, False, Count Of(All Players(Team 1)), True);
					Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
						-70)) * 0.100, Random Value In Array(Global.PERK_LIST), 100, Null);
					Call Subroutine(createItem);
					Wait(0.100, Ignore Condition);
				End;
			End;
			All Players(All Teams).selectedUpgrade = False;
			Global.upgradeColor = Array(Array(Color(Green), Color(Turquoise), Color(Violet)), Array(Color(Sky Blue), Color(Rose), Color(Violet)), Array(Color(Yellow), Color(Purple), Color(Orange), Color(
				Red)), Array(Color(Sky Blue), Color(Violet), Color(Yellow)))[Event Player.cookingIndex];
			Skip(Event Player.cookingIndex * 2);
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element) + Facing Direction Of(Current Array Element) * 1.500, Vector(217.370, 2, 172.520)) < 1.500), Custom String("〔{0}〕:  {1} - ${2}  ", Input Binding String(Button(Interact)), Array(Custom String("{0} 구매",
				Global.ITEM_NAME[Global.KNIFE[1]]), Custom String("특수 칼 뽑기"), Custom String("전설 칼 뽑기"))[Local Player.selectedUpgrade], First Of(Global.upgradePrice)
				[Local Player.selectedUpgrade]), Vector(217.370, 1.500, 172.520), 3, Do Not Clip, Visible To Position String and Color,
				Global.upgradeColor[Local Player.selectedUpgrade], Default Visibility);
			Skip(5);
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element) + Facing Direction Of(Current Array Element) * 1.500, Vector(217.370, 2, 172.520)) < 1.500), Custom String("〔{0}〕:  {1} 구매 - ${2}  ", Input Binding String(Button(Interact)), Array(Custom String("저장고"), Custom String("무작위 아이템"), Custom String("특수 아이템"))
				[Local Player.selectedUpgrade], Global.upgradePrice[True][Local Player.selectedUpgrade]), Vector(217.370, 1.500, 172.520), 3,
				Do Not Clip, Visible To Position String and Color, Global.upgradeColor[Local Player.selectedUpgrade], Default Visibility);
			Skip(3);
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element) + Facing Direction Of(Current Array Element) * 1.500, Vector(217.370, 2, 172.520)) < 1.500), Custom String("〔{0}〕:  {1} 강화 - ${2}  ", Input Binding String(Button(Interact)), Array(Custom String("튀김기"), Custom String("솥"), Custom String("그릴"), Custom String("팬"))
				[Local Player.selectedUpgrade], Global.upgradePrice[2][Local Player.selectedUpgrade]), Vector(217.370, 1.500, 172.520), 3,
				Do Not Clip, Visible To Position String and Color, Global.upgradeColor[Local Player.selectedUpgrade], Default Visibility);
			Skip(1);
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element) + Facing Direction Of(Current Array Element) * 1.500, Vector(217.370, 2, 172.520)) < 1.500), Custom String("〔{0}〕:  {1} - ${2}  ", Input Binding String(Button(Interact)), Array(Custom String("내 이동 속도 증가"), Custom String("팀 영업 시간 증가"), Custom String("동전 교환"))
				[Local Player.selectedUpgrade], Global.upgradePrice[3][Local Player.selectedUpgrade]), Vector(217.370, 1.500, 172.520), 3,
				Do Not Clip, Visible To Position String and Color, Global.upgradeColor[Local Player.selectedUpgrade], Default Visibility);
			Event Player.playerText = Last Text ID;
			Create In-World Text(Filtered Array(All Players(Team 1), Distance Between(Eye Position(Current Array Element), Vector(217.370, 2, 172.520)) < 3), Custom String("〔{0}〕 : 항목 변경", Input Binding String(Button(Reload))), Event Player, 2.500, Do Not Clip,
				Visible To and String, Color(Sky Blue), Default Visibility);
			Event Player.tableText = Last Text ID;
			Create Effect(All Players(All Teams), Light Shaft, Array(Color(Red), Color(Aqua), Color(Orange))[Event Player.cookingIndex],
				Position Of(Event Player), 2, Visible To);
			Event Player.customerEffect = Last Created Entity;
			While(!Global.isOpen);
				While(!Global.isOpen && !Event Player.customerStatus);
					Wait(0.100, Ignore Condition);
				End;
				If(Event Player.customerStatus);
					Event Player.customerStatus = Null;
					Communicate(Event Player, Thanks);
				End;
			End;
			Communicate(Event Player, Goodbye);
			Global.currentUpgrade = -1;
			All Players(Team 1).selectedUpgrade = -1;
			Destroy HUD Text(Event Player.playerText);
			Destroy In-World Text(Event Player.tableText);
			Destroy Effect(Event Player.customerEffect);
		Else;
			Start Forcing Dummy Bot Name(Event Player, String Split(Custom String("평범한 손님/대식가/깐깐한 손님/성급한 손님/푸드파이터/예약 손님/음식 평론가/먹방 유튜버/괴식가/포악한 손님/엘버피 VVIP/요리연구가"), Custom String("/"))[Event Player.controlingIndex]);
			Event Player.playerColor = Array(Color(Blue), Color(Green), Color(White), Color(Orange), Color(Purple), Color(Turquoise), Color(
				Aqua), Color(Violet), Color(Lime Green), Color(Red), Color(Yellow), Custom Color(225, 165, 186, 255))[Event Player.controlingIndex];
			Event Player.score = Array(Null, 5, 10, 5, Null, 10, -5, 5, Null, -5, 15, 10)[Event Player.controlingIndex] - Global.additionalScore;
			Event Player.orderCount = Array(True, 2, True, True, Null, True, True, 2, True, True, 4, True)[Event Player.controlingIndex];
			Event Player.orderTimeOut = Array(30, 30, 30, 20, 40, 10, 20, 25, 15, 25, 20, 35)
				[Event Player.controlingIndex] * Array(6, 3, 2, 1.200, 12)[Global.difficulty] - 0.500;
			Event Player.byOrder = Array(False, False, 1, False, False, False, False, 1, False, 1, 1, False)[Event Player.controlingIndex];
			Disable Movement Collision With Environment(Event Player, False);
			Wait Until(Has Spawned(Event Player), True);
			For Player Variable(Event Player, controlingIndex, False, 9, True);
				Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
					To World, Replace existing throttle, None);
				Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
				Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / Event Player.customerSpeed,
					Ignore Condition);
				Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
				If(!Global.isOpen);
					Global.tableFilled[Event Player.tableIndex] = False;
					Event Player.customerPath = Array Slice(Global.TABLE_PATH[Event Player.tableIndex], False, Event Player.controlingIndex);
					While(True);
						Event Player.controlingIndex -= 1;
						Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player),
							Event Player.customerPath[Event Player.controlingIndex]), True, To World, Replace existing throttle, None);
						Start Facing(Event Player, Direction Towards(Position Of(Event Player), Event Player.customerPath[Event Player.controlingIndex]),
							300, To World, None);
						Wait(Distance Between(Position Of(Event Player), Event Player.customerPath[Event Player.controlingIndex])
							/ Event Player.customerSpeed, Ignore Condition);
						Modify Player Variable(Event Player, customerPath, Remove From Array By Index, Event Player.controlingIndex);
						If(Event Player.controlingIndex < 1);
							Destroy Dummy Bot(Team 2, Slot Of(Event Player));
							Abort;
						End;
					End;
				End;
			End;
			Stop Throttle In Direction(Event Player);
			Stop Facing(Event Player);
			Communicate(Event Player, Hello);
			Event Player.customerStatus = Null;
			While(True);
				If(Hero Of(Event Player) == Hero(LifeWeaver));
					Global.tableOrderCode[Event Player.tableIndex] = First Of(Global.loadingMenuWeaver);
					Modify Global Variable(loadingMenuWeaver, Remove From Array By Index, False);
					If(Global.loadingMenuWeaver == Empty Array);
						Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
					End;
					Event Player.durability = Global.tableOrderCode[Event Player.tableIndex];
				Else If(Hero Of(Event Player) == Hero(Hazard));
					Global.tableOrderCode[Event Player.tableIndex] = First Of(Global.loadingMenuHaz);
					Modify Global Variable(loadingMenuHaz, Remove From Array By Index, False);
					If(Global.loadingMenuHaz == Empty Array);
						Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
					End;
					Event Player.durability = Global.tableOrderCode[Event Player.tableIndex];
				Else If(Hero Of(Event Player) == Hero(Mercy));
					Global.tableOrderCode[Event Player.tableIndex] = Event Player.durability;
				Else;
					Global.tableOrderCode[Event Player.tableIndex] = First Of(Global.loadingMenu);
					Modify Global Variable(loadingMenu, Remove From Array By Index, False);
					If(Global.loadingMenu == Empty Array);
						Global.loadingMenu = Randomized Array(Global.currentMenu);
					End;
					Event Player.durability = Global.tableOrderCode[Event Player.tableIndex];
				End;
				If(Array Contains(Global.STAGE_CODE[Global.stage], 11) || (Global.difficulty == 4 && Global.totalScore[0] == 11) || Hero Of(Event Player) == Hero(LifeWeaver));
					Event Player.orderTimeOut += 20;
					For Player Variable(Event Player, handPosition, False, Hero Of(Event Player) == Hero(Zarya) ? 3 : 1, True);
						If(Count Of(Global.ADDITIONAL_MATERIAL_LIST[Global.tableOrderCode[Event Player.tableIndex]]) > 1);
							For Player Variable(Event Player, additionalMaterialIndex, False, Count Of(Global.ADDITIONAL_MATERIAL_LIST[Global.tableOrderCode[Event Player.tableIndex]]), True);
								Global.createItemData = Array(Position Of(Event Player) + Vector(False, 2 + (Event Player.additionalMaterialIndex / 2), False), Null,
									Global.ADDITIONAL_MATERIAL_LIST[Global.tableOrderCode[Event Player.tableIndex]][Event Player.additionalMaterialIndex], Null, Null);
								Call Subroutine(createItem);
							End;
						Else;
							Global.createItemData = Array(Position Of(Event Player) + Vector(False, 2, False), Null,
								Global.ADDITIONAL_MATERIAL_LIST[Global.tableOrderCode[Event Player.tableIndex]], Null, Null);
							Call Subroutine(createItem);
						End;
					End;
				End;
				Modify Global Variable(customerPosition, Append To Array, Global.TABLE_POSITION[Event Player.tableIndex]);
				Modify Global Variable(customerIndex, Append To Array, Event Player.tableIndex);
				Modify Player Variable(Event Player, orderTimeOut, Min, Match Time + 0.100);
				Event Player.orderedTime = Total Time Elapsed;
				Create Effect(All Players(All Teams), Light Shaft, Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1 < 10 ? Color(Red) : Event Player.playerColor, Global.TABLE_POSITION[Event Player.tableIndex], 0.500,
					Visible To and Color);
				Event Player.shaftEffect = Last Created Entity;
				Create In-World Text(Players Within Radius(Evaluate Once(Global.TABLE_POSITION[Event Player.tableIndex]), 15, All Teams, Off),
					Custom String("#{1} - {0}초", Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed)
					- Total Time Elapsed, Up) - 1, Evaluate Once(Event Player.tableIndex + True)), Global.TABLE_POSITION[Event Player.tableIndex] + Up,
					2, Do Not Clip, Visible To and String, Event Player.playerColor, Default Visibility);
				Event Player.tableText = Last Text ID;
				Event Player.score += Global.ITEM_SCORE[Global.tableOrderCode[Event Player.tableIndex]];
				If(Hero Of(Event Player) == Hero(Zarya));
					Event Player.score = 20 + Min(Event Player.score * 3, 50);
					While(Event Player.orderCount < 3);
						Create HUD Text(All Players(All Teams), Evaluate Once(Custom String(" #{0} : {1} {2}/3 ", Event Player.tableIndex + True,
							Global.ITEM_NAME[Global.tableOrderCode[Event Player.tableIndex]], Event Player.orderCount)), Null, Custom String("  {0}초\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　",
							Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1), Left,
							Event Player.orderedTime * 0.001, Event Player.playerColor, Color(Yellow), Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1 < 10 ? Color(Red) : Event Player.playerColor, Visible To String and Color,
							Default Visibility);
						Event Player.playerText = Last Text ID;
						Event Player.lastOrderTime = Total Time Elapsed;
						Wait Until(Event Player.customerStatus != False || Global.isVipAngry, Event Player.orderTimeOut);
						Event Player.orderTimeOut += Event Player.lastOrderTime - Total Time Elapsed;
						Event Player.lastOrderTime = Total Time Elapsed;
						Destroy HUD Text(Event Player.playerText);
						If(!Global.isOpen);
							Break;
						End;
						If(Event Player.customerStatus == 1 || Event Player.customerStatus == 4);
							Event Player.orderCount += True;
							Event Player.tipsProb = 5;
							If(Event Player.customerStatus == 4);
								All Players(Team 1).score += 1;
								Global.systemScore += 5;
								Small Message(All Players(All Teams), Custom String("  완성도 있는 요리! +5%"));
								Global.scbSurved[2] += 1;
								Event Player.tipsProb = 10;
							Else;
								Global.scbSurved[3] += 1;
							End;
							Call Subroutine(dropTips);
							All Players(Team 1).score += 1;
							Create HUD Text(All Players(All Teams), Custom String(" #{0} : 서빙 성공! {1}/3 ", Event Player.tableIndex + True,
								Event Player.orderCount), Null, Custom String("  {0}초\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　",
								Max(Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up), False)), Left,
								Event Player.orderedTime * 0.001, Color(Rose), Null, Color(Rose), String, Default Visibility);
							Event Player.playerText = Last Text ID;
							Create Effect(All Players(All Teams), Sphere, Global.ITEM_COLOR[Global.tableOrderCode[Event Player.tableIndex]],
								Global.TABLE_POSITION[Event Player.tableIndex], (Evaluate Once(Total Time Elapsed + 2.500) - Total Time Elapsed) * 0.200,
								Visible To Position and Radius);
							Event Player.customerEffect = Last Created Entity;
							Global.scbSurved[4] += 1;
							Wait(True, Ignore Condition);
							For Player Variable(Event Player, controlingIndex, False, 4, True);
								Play Effect(All Players(All Teams), Ring Explosion, Global.ITEM_COLOR[Global.tableOrderCode[Event Player.tableIndex]],
									Global.TABLE_POSITION[Event Player.tableIndex], 3);
								Wait(0.500, Ignore Condition);
							End;
							Destroy Effect(Event Player.customerEffect);
							If(!Global.isOpen);
								Destroy HUD Text(Event Player.playerText);
								Break;
							End;
							Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 5);
							Play Effect(All Players(All Teams), Buff Impact Sound, Null, Event Player, 100);
							Event Player.customerStatus = Null;
							Wait(True, Ignore Condition);
							Destroy HUD Text(Event Player.playerText);
							Event Player.orderTimeOut += Event Player.lastOrderTime - Total Time Elapsed;
						Else;
							If(Event Player.customerStatus != -1);
								Event Player.knifeText.score -= 5;
								Event Player.controlingIndex = Array(Custom String("시간 초과!"), Null, Custom String("{0}의 잘못된 서빙!", Event Player.knifeText),
									Custom String("순서 조심!"))[Event Player.customerStatus];
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : {1} ", Event Player.tableIndex + True,
									Event Player.controlingIndex), Null, Custom String("\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Red), Null, Null, None, Default Visibility);
								Event Player.playerText = Last Text ID;
								Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 5);
								Play Effect(All Players(All Teams), Cassidy Flashbang Explosion Sound, Null, Event Player, 100);
								Global.scbSurved[5] += 1;
								Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Null, Event Player, True, Visible To Position and Radius);
								Event Player.customerEffect = Last Created Entity;
								Press Button(Event Player, Button(Jump));
								Event Player.score = Min(Global.systemScore, Global.scoreDecrease[Event Player.customerStatus]);
								Global.systemScore -= Event Player.score;
								Small Message(All Players(All Teams), Custom String("  {0}{1}", Event Player.controlingIndex, Event Player.score ? Custom String(" -{0}%", Event Player.score) : Custom String("")));
								Destroy Effect(Event Player.shaftEffect);
								Wait(True, Ignore Condition);
								Destroy Effect(Event Player.customerEffect);
								Break;
							End;
						End;
					End;
					Event Player.controlingIndex = Index Of Array Value(Global.customerIndex, Event Player.tableIndex);
					Modify Global Variable(customerPosition, Remove From Array By Index, Event Player.controlingIndex);
					Modify Global Variable(customerIndex, Remove From Array By Index, Event Player.controlingIndex);
					Destroy HUD Text(Event Player.playerText);
					Destroy Effect(Event Player.shaftEffect);
					Destroy In-World Text(Event Player.tableText);
					If(Event Player.orderCount == 3);
						Communicate(Event Player, Thanks);
						Modify Player Variable(Event Player, score, Max, 10);
						Global.systemScore += Event Player.score;
						Global.stageScore += Event Player.score;
						Small Message(All Players(All Teams), Custom String("  서빙 성공! +{0}%", Event Player.score));
						Wait(True, Ignore Condition);
					End;
					Break;
				Else;
					Create HUD Text(All Players(All Teams), Evaluate Once(Custom String(" #{0} : {1} ", Event Player.tableIndex + True,
						Global.ITEM_NAME[Global.tableOrderCode[Event Player.tableIndex]])), Null, Custom String("  {0}초\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　",
						Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1), Left,
						Total Time Elapsed * 0.001, Event Player.playerColor, Color(Yellow), Round To Integer(Evaluate Once(Event Player.orderTimeOut + Total Time Elapsed) - Total Time Elapsed, Up) - 1 < 10 ? Color(Red) : Event Player.playerColor, Visible To String and Color,
						Default Visibility);
					Event Player.playerText = Last Text ID;
					Wait Until(Event Player.customerStatus != False || Global.isVipAngry, Event Player.orderTimeOut);
					Destroy HUD Text(Event Player.playerText);
					Destroy In-World Text(Event Player.tableText);
					Destroy Effect(Event Player.shaftEffect);
					Event Player.controlingIndex = Index Of Array Value(Global.customerIndex, Event Player.tableIndex);
					Modify Global Variable(customerPosition, Remove From Array By Index, Event Player.controlingIndex);
					Modify Global Variable(customerIndex, Remove From Array By Index, Event Player.controlingIndex);
					If(Global.isOpen);
						If(Event Player.customerStatus == 1 || Event Player.customerStatus == 4);
							Event Player.tipsProb = Hero Of(Event Player) == Hero(Moira) ? 30 : Hero Of(Event Player) == Hero(D.Va) ? 15 : 0;
							If(Total Time Elapsed - Event Player.orderedTime < Event Player.orderTimeOut * 0.180 && Event Player.customerStatus == 4);
								Global.systemScore += 20;
								All Players(Team 1).score += 3;
								Small Message(All Players(All Teams), Custom String("  환상적인 서빙! +20%"));
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : 환상적인 서빙! ", Event Player.tableIndex + True), Null, Custom String("\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Rose), Null, Null, None, Default Visibility);
								Event Player.dollar = Hero Of(Event Player) == Hero(Hanzo) || Hero Of(Event Player) == Hero(D.Va);
								Global.scbSurved[0] += 1;
								Event Player.tipsProb += 20;
							Else If(Total Time Elapsed - Event Player.orderedTime < Event Player.orderTimeOut * 0.250);
								Global.systemScore += 10;
								All Players(Team 1).score += 2;
								Small Message(All Players(All Teams), Custom String("  신속한 서빙! +10%"));
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : 신속한 서빙! ", Event Player.tableIndex + True), Null, Custom String("\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Rose), Null, Null, None, Default Visibility);
								Event Player.dollar = Hero Of(Event Player) == Hero(Hanzo) || Hero Of(Event Player) == Hero(D.Va);
								Global.scbSurved[1] += 1;
								Event Player.tipsProb += 10;
							Else If(Event Player.customerStatus == 4);
								Global.systemScore += 5;
								All Players(Team 1).score += 2;
								Small Message(All Players(All Teams), Custom String("  완성도 있는 요리! +5%"));
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : 서빙 성공! ", Event Player.tableIndex + True), Null, Custom String("\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Rose), Null, Null, None, Default Visibility);
								Event Player.dollar = Hero Of(Event Player) == Hero(Hanzo) || Hero Of(Event Player) == Hero(D.Va);
								Global.scbSurved[2] += 1;
								Event Player.tipsProb += 5;
							Else;
								All Players(Team 1).score += 1;
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : 서빙 성공! ", Event Player.tableIndex + True), Null, Custom String("\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Rose), Null, Null, None, Default Visibility);
								Global.scbSurved[3] += 1;
							End;
							Global.scbSurved[4] += 1;
							Event Player.playerText = Last Text ID;
							Call Subroutine(dropTips);
							Create Effect(All Players(All Teams), Sphere, Global.ITEM_COLOR[Global.tableOrderCode[Event Player.tableIndex]],
								Global.TABLE_POSITION[Event Player.tableIndex], (Evaluate Once(Total Time Elapsed + 5) - Total Time Elapsed) * 0.100,
								Visible To Position and Radius);
							Event Player.customerEffect = Last Created Entity;
							Wait(True, Ignore Condition);
							For Player Variable(Event Player, controlingIndex, False, 4, True);
								Play Effect(All Players(All Teams), Ring Explosion, Global.ITEM_COLOR[Global.tableOrderCode[Event Player.tableIndex]],
									Global.TABLE_POSITION[Event Player.tableIndex], 3);
								Wait(True, Ignore Condition);
							End;
							Destroy Effect(Event Player.customerEffect);
							If(!Global.isOpen);
								Destroy HUD Text(Event Player.playerText);
								Break;
							End;
							Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 5);
							Play Effect(All Players(All Teams), Buff Impact Sound, Null, Event Player, 100);
							If(Event Player.orderCount > 1);
								Wait(True, Ignore Condition);
								Event Player.customerStatus = Null;
								Event Player.orderCount -= True;
								Event Player.durability = False;
							Else;
								Modify Player Variable(Event Player, score, Max, 10);
								Communicate(Event Player, Thanks);
								Global.systemScore += Event Player.score;
								Global.stageScore += Event Player.score;
								If(Hero Of(Event Player) == Hero(Moira));
									Big Message(All Players(All Teams), Custom String("VVIP 서빙 성공!"));
									Small Message(All Players(All Teams), Custom String("  VVIP 서빙 성공! +{0}%", Event Player.score));
									All Players(Team 1).score += 100;
								Else If(Hero Of(Event Player) == Hero(D.Va));
									Small Message(All Players(All Teams), Custom String("  VIP 서빙 성공! +{0}%", Event Player.score));
									All Players(Team 1).score += 20;
								Else;
									Small Message(All Players(All Teams), Custom String("  서빙 성공! +{0}%", Event Player.score));
								End;
								Wait(True, Ignore Condition);
								Destroy HUD Text(Event Player.playerText);
								Break;
							End;
						Else;
							If(Event Player.customerStatus != -1);
								Event Player.knifeText.score -= 5;
								Event Player.controlingIndex = Array(Custom String("시간 초과!"), Null, Custom String("{0}의 잘못된 서빙!", Event Player.knifeText),
									Custom String("순서 조심!"))[Event Player.customerStatus];
								Create HUD Text(All Players(All Teams), Custom String(" #{0} : {1} ", Event Player.tableIndex + True,
									Event Player.controlingIndex), Null, Custom String("\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
									Left, Event Player.orderedTime * 0.001, Color(Red), Null, Null, None, Default Visibility);
								Event Player.playerText = Last Text ID;
								Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 5);
								Play Effect(All Players(All Teams), Cassidy Flashbang Explosion Sound, Null, Event Player, 100);
								Create Effect(All Players(All Teams), Torbjörn Overloading Effect, Null, Event Player, True, Visible To Position and Radius);
								Event Player.customerEffect = Last Created Entity;
								Press Button(Event Player, Button(Jump));
								Global.stageScore -= Hero Of(Event Player) == Hero(D.Va)
									? Global.scoreDecrease[Event Player.customerStatus] * 3 : Global.scoreDecrease[Event Player.customerStatus];
								Event Player.score = Min(Global.systemScore, Hero Of(Event Player) == Hero(D.Va)
									? Global.scoreDecrease[Event Player.customerStatus] * 3 : Global.scoreDecrease[Event Player.customerStatus]);
								Global.systemScore -= Event Player.score;
								Event Player.dollar = False;
								Global.scbSurved[5] += 1;
								Small Message(All Players(All Teams), Custom String("  {0}{1}", Event Player.controlingIndex, Event Player.score ? Custom String(" -{0}%", Event Player.score) : Custom String("")));
								If(Hero Of(Event Player) == Hero(Mauga));
									Clear Status(All Players(Team 1), Phased Out);
									Set Status(All Players(Team 1), Event Player, Stunned, 5);
									Wait(0.016, Ignore Condition);
									Set Status(All Players(Team 1), Null, Phased Out, 9999);
								Else If(Hero Of(Event Player) == Hero(Moira) && Global.difficulty != 4);
									Set Match Time(1);
									Wait(1, Ignore Condition);
									Global.isVipAngry = True;
								End;
								Wait(True, Ignore Condition);
								Destroy Effect(Event Player.customerEffect);
								Destroy HUD Text(Event Player.playerText);
								Break;
							End;
						End;
						Destroy HUD Text(Event Player.playerText);
					Else;
						Break;
					End;
				End;
			End;
			Modify Global Variable(customerIndex, Remove From Array By Value, Event Player.tableIndex);
			Global.tableFilled[Event Player.tableIndex] = False;
			Global.tableOrderCode[Event Player.tableIndex] = -1;
		End;
		While(Event Player.customerPath != Empty Array);
			Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
				To World, Replace existing throttle, None);
			Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
			Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / Event Player.customerSpeed,
				Ignore Condition);
			Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
		End;
		If(Event Player.dollar && Global.isOpen);
			Small Message(All Players(All Teams), Custom String("  {0}{1}의 입소문! ", Hero Icon String(Hero Of(Event Player)), Event Player));
			Communicate(All Players(Team 1), Incoming);
			If(Hero Of(Event Player) == Hero(D.Va));
				Global.loadNext += 4;
			Else If(Hero Of(Event Player) == Hero(Hanzo));
				Global.loadNext += 2;
			End;
		End;
		Destroy Dummy Bot(Team 2, Slot Of(Event Player));
	}
}

rule("drop tips") {
	event
	{
		subroutine;
		dropTips;
	}

	actions
	{
		If(Random Integer(1, 100) <= Event Player.tipsProb);
			Global.createItemData = Array(Position Of(Event Player), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, 18, 100, Null);
			Call Subroutine(createItem);
		End;
	}
}

disabled rule("GLOBAL SUBROUTINE===============================================================================================================")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Global subroutine: Data init")
{
	event
	{
		Subroutine;
		dataInit;
	}

	actions
	{
		Global.ITEM_COLOR = Mapped Array(
{CUSTOM_ITEM_COLOR}
			,
			Array(Color(Black), Color(Red), Custom Color(180, 100, False, 255), Color(Yellow), Color(White), Color(Lime Green),
			Color(Green), Custom Color(255, 200, 100, 255), Color(Turquoise), Custom Color(100, 60, False, 255), Custom Color(255, 65,
			False, 255), Custom Color(255, 255, 190, 255), Custom Color(False, 125, False, 255), Color(Orange), Custom Color(246, 86, 86,
			255), Custom Color(250, 150, 70, 255), Color(Sky Blue), Custom Color(255, 192, 243, 255), Custom Color(255, 108, 141, 255), Custom Color(255, 239, 104, 255), Color(Violet), Color(Rose), Color(Gray), Custom Color(96, 255, 181, 255), Color(Purple))[Index Of Array Value(String Split(Custom String("D/R/M/Y/W/L/G/H/T/S/C/F/V/O/A/P/B/N/Q/X/Z/U/E/J/K"), Custom String("/")), Current Array Element)]);
		Global.ITEM_NAME = 
{CUSTOM_ITEM_NAME}
;
		Global.ITEM_SCORE = Mapped Array(
{CUSTOM_ITEM_SCORE}
,
			Index Of Array Value(String Split(Custom String("0/1/2/3/4/5/6/7/8/9"), Custom String("/")), Current Array Element) * 5);
		Global.CUTTING_NEEDED = Array(
{CUSTOM_CUTTING_NEEDED}
		);
		Global.CUTTING_RESULT = Array(
{CUSTOM_CUTTING_RESULT}
		);
		Global.GRILLING_NEEDED = Array(
{CUSTOM_GRILLING_NEEDED}
		);
		Global.GRILLING_RESULT = Array(
{CUSTOM_GRILLING_RESULT}
		);
		Global.FRYING_NEEDED = Array(
{CUSTOM_FRYING_NEEDED}
		);
		Global.FRYING_RESULT = Array(
{CUSTOM_FRYING_RESULT}
		);
	}
}

rule("Global subroutine: Data init2")
{
	event
	{
		Subroutine;
		dataInit2;
	}

	actions
	{
		Global.POT_TIME = Array(
{CUSTOM_POT_TIME}
		);
		Global.POT_RESULT = Array(
{CUSTOM_POT_RESULT}
		);
		Global.PAN_NEEDED = Array(
{CUSTOM_PAN_NEEDED}
		);
		Global.PAN_RESULT = Array(
{CUSTOM_PAN_RESULT}
		);
		Global.IMPACT_RESULT = Array(
{CUSTOM_IMPACT_RESULT}
		);
		Global.RAW_MIX = Array(
{CUSTOM_RAW_MIX}
		);
		Global.RAW_RESULT = Array(
{CUSTOM_RAW_RESULT}
		);
		Global.MIXING_RECIPE = Mapped Array(Global.ITEM_NAME, Empty Array);
		Global.MIXING_RESULT = Global.MIXING_RECIPE;
		For Global Variable(checkingIndex, False, Count Of(Global.RAW_MIX), True);
			Modify Global Variable At Index(MIXING_RECIPE, Global.RAW_MIX[Global.checkingIndex] % 1000, Append To Array, Round To Integer(
				Global.RAW_MIX[Global.checkingIndex] / 1000, Down));
			Modify Global Variable At Index(MIXING_RECIPE, Round To Integer(Global.RAW_MIX[Global.checkingIndex] / 1000, Down),
				Append To Array, Global.RAW_MIX[Global.checkingIndex] % 1000);
			Modify Global Variable At Index(MIXING_RESULT, Global.RAW_MIX[Global.checkingIndex] % 1000, Append To Array,
				Global.RAW_RESULT[Global.checkingIndex]);
			Modify Global Variable At Index(MIXING_RESULT, Round To Integer(Global.RAW_MIX[Global.checkingIndex] / 1000, Down),
				Append To Array, Global.RAW_RESULT[Global.checkingIndex]);
		End;
		Global.MENU_LIST = Array(
{CUSTOM_MENU_LIST}
		);
		Global.HAZARD_MENU_LIST = Array(
{CUSTOM_HAZARD_MENU_LIST}
		);
		Global.FRIDGE_LIST = Array(
{CUSTOM_FRIDGE_LIST}
		);
		Global.ADDITIONAL_MATERIAL_LIST = Array(
{CUSTOM_ADDITIONAL_MATERIAL_LIST}
		);
		Global.WEAVER_MENU_LIST = Array(
{CUSTOM_WEAVER_MENU_LIST}
		);
		Global.STAGE_NAME = String Split(Custom String(
{CUSTOM_STAGE_NAME}
		), Custom String("/"));
		Global.upgradePrice = Array(
			Array(
{CUSTOM_KITCHEN_KNIFE_PRICE}
, 
{CUSTOM_EPIC_KNIFE_PRICE}
, 
{CUSTOM_LEGENDARY_KNIFE_PRICE}
			),
			Array(
{CUSTOM_STORAGE_PRICE}
, 
{CUSTOM_ITEM_PRICE}
, 
{CUSTOM_HYPE_ITEM_PRICE}
			),
			Array(
{CUSTOM_FRYER_PRICE}
, 
{CUSTOM_POT_PRICE}
, 
{CUSTOM_GRILL_PRICE}
, 
{CUSTOM_PAN_PRICE}
			),
			Array(
{CUSTOM_SPEED_PRICE}
, 
{CUSTOM_TIME_PRICE}
, 100
			)
		);
		Global.UPGRADE_CODE = Array(Array(6, -1, -2), Array(0, 1, 2), Array(3, 4, 5, 6), Array(7, 8, 9));
		Global.KNIFE = Array(1, 6, 2, 3, 4, 5, 7);
        Global.PERK_LIST = Array(8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
		Global.KNIFE_AMOUNT = Array(1.200, 1.500, 1.500, 1.500, 3, 1.200, 6);
		Global.KNIFE_DECREASE = Array(0.150, 0.100, 0.050, 0.050, 0.050, 0.100, 0.030);
		Global.UPGRADE_NAME = String Split(
			Custom String("저장고 구매/무작위 아이템 구매/특수 아이템 구매/튀김기 강화/솥 강화/그릴 강화/팬 강화/개인 이동 속도 증가/{0}",
			Custom String("팀 영업 시간 증가/동전 교환")),
			Custom String("/"));
	}
}

rule("Global subroutine: Data init3")
{
	event
	{
		Subroutine;
		dataInit3;
	}

	actions
	{
		Global.CUSTOMER_LIST = Array(
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76)),
				Array(Hero(Zarya), Hero(Mauga), Hero(Mercy), Hero(Hazard), Hero(LifeWeaver)),
				Array(Hero(LifeWeaver), Hero(LifeWeaver))
			),
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Soldier: 76)), 
				Array(Hero(Soldier: 76), Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Bastion), Hero(Bastion)), 
				Array(Hero(Hanzo), Hero(Tracer)), 
				Array(Hero(Zarya), Hero(Bastion)), 
				Array(Hero(Hanzo), Hero(Mercy)), 
				Array(Hero(Hanzo), Hero(Soldier: 76)), 
				Array(Hero(Zarya), Hero(Hanzo), Hero(Mercy)), 
				Array(Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Hanzo), Hero(Roadhog), Hero(Mercy)), 
				Array(Hero(Hanzo), Hero(Zarya), Hero(Bastion)), 
				Array(Hero(Roadhog), Hero(Mercy), Hero(Tracer)), 
				Array(Hero(Tracer), Hero(Hanzo), Hero(Zarya)), 
				Array(Hero(Hanzo), Hero(Zarya), Hero(Bastion), Hero(Mercy))
			), 
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76), Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Soldier: 76)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Mercy)), 
				Array(Hero(Hanzo), Hero(Bastion), Hero(Hanzo), Hero(Bastion), Hero(Bastion)), 
				Array(Hero(Hazard), Hero(Roadhog), Hero(LifeWeaver)), 
				Array(Hero(Hazard), Hero(Bastion), Hero(Bastion), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Roadhog), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Mercy), Hero(Mercy), Hero(Hazard)), 
				Array(Hero(D.Va), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76)), 
				Array(Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya)), 
				Array(Hero(D.Va), Hero(Mercy), Hero(Mercy), Hero(Tracer), Hero(Tracer), Hero(Tracer), Hero(Tracer)), 
				Array(Hero(Roadhog), Hero(Hazard), Hero(Zarya), Hero(Zarya), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Bastion), Hero(Bastion), Hero(Bastion), Hero(LifeWeaver)), 
				Array(Hero(Moira), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(LifeWeaver), Hero(Soldier: 76)), 
				Array(Hero(D.Va), Hero(Moira), Hero(Hazard), Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya), Hero(D.Va), Hero(LifeWeaver))
			), 
			Array(
				Array(Hero(Soldier: 76), Hero(Soldier: 76),Hero(Roadhog)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Soldier: 76)), 
				Array(Hero(Tracer), Hero(Tracer), Hero(Mercy)), 
				Array(Hero(Hanzo), Hero(Bastion), Hero(Hanzo), Hero(Bastion), Hero(Bastion)), 
				Array(Hero(Hazard), Hero(Roadhog), Hero(LifeWeaver)), 
				Array(Hero(Hazard), Hero(Bastion), Hero(Bastion), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Roadhog), Hero(Zarya)), 
				Array(Hero(Mauga), Hero(Mercy), Hero(Mercy), Hero(Hazard)), 
				Array(Hero(D.Va), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76)),
				Array(Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya)), 
				Array(Hero(D.Va), Hero(Mercy), Hero(Mercy), Hero(Tracer), Hero(Tracer), Hero(Tracer), Hero(Tracer)), 
				Array(Hero(Moira), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(Soldier: 76), Hero(LifeWeaver), Hero(Soldier: 76)), 
				Array(Hero(D.Va), Hero(Moira), Hero(Hazard), Hero(Mauga), Hero(Zarya), Hero(Zarya), Hero(Zarya), Hero(LifeWeaver), Hero(LifeWeaver))
			))[Global.stageMode];
		Global.STAGE_CODE = Array(
			Array(Array(0), Array(0), Array(0)),
{CUSTOM_STAGE_CODE_EASY}
,
{CUSTOM_STAGE_CODE_NORMAL}
,
{CUSTOM_STAGE_CODE_HARD}
		)[Global.stageMode];
	}
}

rule("Global subroutine: Start stage")
{
	event
	{
		Subroutine;
		startStage;
	}

	actions
	{
		Global.isVipAngry = False;
		Global.isBonusStage = Global.stage > 7 && Global.stageMode == 3 ? True : False;
		If(Global.isBonusStage);
			Global.failCount = 0;
		End;
		Global.currentCustomer = Global.CUSTOMER_LIST[Global.stage];
		Global.currentMenu = Empty Array;
		Global.skipSetup = False;
		All Players(Team 1).missSurveCount = 1;
		Global.cuttingPlayer[0] = Null;
		Global.cuttingPlayer[1] = Null;
		For Global Variable(loadingMenu, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
			Modify Global Variable(currentMenu, Append To Array, Global.MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenu]]);
		End;
		Global.loadingMenu = Randomized Array(Global.currentMenu);
		Global.currentMenuHaz = Empty Array;
		For Global Variable(loadingMenuHaz, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
			Modify Global Variable(currentMenuHaz, Append To Array,
				Global.HAZARD_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuHaz]]);
		End;
		Global.loadingMenuHaz = Randomized Array(Global.currentMenuHaz);
		Global.currentMenuWeaver = Empty Array;
		For Global Variable(loadingMenuWeaver, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
			Modify Global Variable(currentMenuWeaver, Append To Array,
				Global.WEAVER_MENU_LIST[Global.STAGE_CODE[Global.stage][Global.loadingMenuWeaver]]);
		End;
		Global.loadingMenuWeaver = Randomized Array(Global.currentMenuWeaver);
		Global.fridgeCode = Global.FRIDGE_LIST[Global.STAGE_CODE[Global.stage]];
		Set Objective Description(All Players(All Teams), Custom String("영업 준비"), Visible To);
		Create Progress Bar HUD Text(All Players(All Teams), Match Time * Evaluate Once(100 / Global.setUpTime), Custom String(""), Top,
			True, Custom Color(200, 255, False, 150 + Sine From Radians(Total Time Elapsed * 5) * 105), Null, Visible To Values and Color,
			Default Visibility);
		Global.globalText[False] = Last Text ID;
		Global.scoringIndex = Hero Icon String(First Of(Global.CUSTOMER_LIST[Global.stage]));
		For Global Variable(systemScore, True, Count Of(Global.CUSTOMER_LIST[Global.stage]), True);
			If(!String Contains(Global.scoringIndex, Hero Icon String(Global.CUSTOMER_LIST[Global.stage][Global.systemScore])));
				Global.scoringIndex = String("{0} {1}", Global.scoringIndex, Hero Icon String(
					Global.CUSTOMER_LIST[Global.stage][Global.systemScore]));
			End;
		End;
		Create HUD Text(All Players(All Teams), Custom String(" {0} \r\n　　　　　　　　　　　　　\r\n 요리 : {1} \r\n 손님 : {2}", Custom String("{0}{2}stage {1}", Array(Custom String("수습 난이도"), Custom String("숙련 난이도"), Custom String("전문 난이도"), Custom String("Hell's Kitchen"))[Global.difficulty], Custom String("{0} / {1}", Global.stage + True, Count Of(Global.STAGE_CODE)), Global.isBonusStage ? Custom String("\r\n Bonus ") : Custom String(" - ")), Count Of(Global.STAGE_CODE[Global.stage]) > 1 ? Custom String("퓨전")
			: Global.STAGE_NAME[Global.STAGE_CODE[Global.stage]], Global.scoringIndex), Null, Custom String("\r\n\r\n\r\n\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
			Left, -2, Custom Color(Evaluate Once(Array(140, 110, 255, 255)[Global.difficulty]), Evaluate Once(Array(255, 180, 225, 120)
			[Global.difficulty]), Evaluate Once(Array(180, 255, 120, 120)[Global.difficulty]), 200 + Sine From Radians(
			Total Time Elapsed * 5) * 55), Null, Null, Visible To String and Color, Default Visibility);
		Global.globalText[True] = Last Text ID;
		Set Match Time(Global.setUpTime);
		Wait Until(Global.skipSetup, Global.setUpTime);
		Global.isVipAngry = False;
		Big Message(All Players(All Teams), Custom String("영업 시작!"));
		Destroy Progress Bar HUD Text(Global.globalText[False]);
		Destroy HUD Text(Global.globalText[True]);
		Destroy HUD Text(Global.globalText[2]);
		Global.isOpen = True;
		Global.stageColor = Color(Violet);
		Global.stageScore = Null;
		Global.visibleScore = Null;
		Global.systemScore = Null;
		Chase Global Variable At Rate(visibleScore, Global.systemScore, Absolute Value(Global.visibleScore - Global.systemScore)
			* 2 + True, Destination and Rate);
		Create Progress Bar HUD Text(All Players(All Teams), Global.visibleScore, Custom String("{0}%", Round To Integer(
			Global.visibleScore, To Nearest)), Top, 2, Global.stageColor, Global.stageColor, Visible To Values and Color,
			Default Visibility);
		Global.globalText[False] = Last Text ID;
		Create HUD Text(All Players(All Teams), Custom String("　　　　　주문서　　　　　"), Null, Custom String("\r\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　"),
			Left, False, Custom Color(Evaluate Once(Array(140, 110, 255, 255)[Global.difficulty]), Evaluate Once(Array(255, 180, 225, 120)
			[Global.difficulty]), Evaluate Once(Array(180, 255, 120, 120)[Global.difficulty]), 200 + Sine From Radians(
			Total Time Elapsed * 5) * 55), Null, Null, Visible To and Color, Default Visibility);
		Global.globalText[True] = Last Text ID;
		Set Objective Description(All Players(All Teams), Custom String("Stage {0}", Global.stage + True), Visible To);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(222.007, True, 165.207), 200);
		Set Match Time(Global.stageTime);
		Start Rule(callCustomer, Restart Rule);
		All Players(Team 1).score = Null;
		Wait(0.016, Ignore Condition);
		Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
		If(Global.visibleScore < 100);
			Global.failCount += True;
			Big Message(All Players(All Teams), Global.isBonusStage ? Custom String("{0}fgC80013FF>보너스 영업 실패!", Global.tx) : Custom String("{0}fgC80013FF>영업 실패!{0}fgFFFFFFFF> ({1} / {2})",
				Global.tx, Global.failCount, Global.failEnd));
			Play Effect(All Players(Team 1), Doomfist Meteor Strike Impact Sound, Null, Vector(222.007, True, 165.207), 200);
			Global.scbRank[3] += 1;
			If(Global.failCount == Global.failEnd);
				Global.isVictory = False;
				Call Subroutine(gameSummary);
			End;
		Else;
			Global.stageColor = Color(Turquoise);
			Global.systemScore -= 100;
			Global.visibleScore = Null;
			Play Effect(All Players(Team 1), Lúcio Sound Barrier Cast Sound, Null, Vector(222.007, True, 165.207), 200);
			If(Global.difficulty >= 2);
				Big Message(All Players(All Teams), Custom String("몰려오는 손님!"));
				Communicate(All Players(Team 1), Push Forward);
				Global.loadNext += 1;
				Global.customerCallTime -= 3;
				Wait(0.016, Ignore Condition);
				Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
				If(Global.visibleScore < 100);
					Global.failCount += True;
					Big Message(All Players(All Teams), Global.isBonusStage ? Custom String("{0}fgC80013FF>보너스 영업 실패!", Global.tx) : Custom String("{0}fgC80013FF>영업 실패!{0}fgFFFFFFFF> ({1} / {2})",
				Global.tx, Global.failCount, Global.failEnd));
					Play Effect(All Players(Team 1), Doomfist Meteor Strike Impact Sound, Null, Vector(222.007, True, 165.207), 200);
					Global.scbRank[3] += 1;
					If(Global.failCount == Global.failEnd);
						Global.isVictory = False;
						Call Subroutine(gameSummary);
					End;
				Else;
					Global.stageColor = Color(Rose);
					Global.systemScore -= 100;
					Global.visibleScore = Null;
					Big Message(All Players(All Teams), Custom String("전직원 보너스!"));
					All Players(Team 1).score += 20;
					Play Effect(All Players(Team 1), Lúcio Sound Barrier Cast Sound, Null, Vector(222.007, True, 165.207), 200);
					Wait(0.016, Ignore Condition);
					Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
					If(Global.visibleScore < 100);
						Big Message(All Players(All Teams), Custom String("영업 완료!"));
						Global.scbRank[1] += 1;
						All Players(Team 1).score += 10;
					Else;
						Big Message(All Players(All Teams), Custom String("{0}fgFF3291FF>환상적인 영업!", Global.tx));
						Global.scbRank[0] += 1;
						All Players(Team 1).score += 30;
						All Players(Team 2).customerStatus = -1;
					End;
					Global.stage += True;
					Global.totalScore[0] += Global.stageScore + Round To Integer(Match Time, To Nearest);
					Global.customerCallTime -= 0.100;
					Play Effect(All Players(Team 1), DVa Self Destruct Explosion Sound, Null, Vector(222.007, True, 165.207), 200);
					For Global Variable(scoringIndex, False, Number Of Players(Team 1), True);
						Global.scoringPlayer = All Players(Team 1)[Global.scoringIndex];
						If(Global.scoringPlayer.score > False);
							Small Message(Global.scoringPlayer, Custom String("  급여 +${0}", Global.scoringPlayer.score));
							Global.scoringPlayer.dollar += Global.scoringPlayer.score;
							Global.scoringPlayer.scbDollar += Global.scoringPlayer.score;
						End;
					End;
				End;
				Global.customerCallTime += 3;
			Else;
				Big Message(All Players(All Teams), Custom String("전직원 보너스!"));
				All Players(Team 1).score += 20;
				Wait(0.016, Ignore Condition);
				Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
				If(Global.visibleScore < 100);
					Big Message(All Players(All Teams), Custom String("영업 완료!"));
					Global.scbRank[2] += 1;
				Else;
					Global.stageColor = Color(Rose);
					Global.systemScore -= 100;
					Global.visibleScore = Null;
					Big Message(All Players(All Teams), Custom String("몰려오는 손님!"));
					Play Effect(All Players(Team 1), Lúcio Sound Barrier Cast Sound, Null, Vector(222.007, True, 165.207), 200);
					Global.customerCallTime -= 3;
					Communicate(All Players(Team 1), Push Forward);
					Global.loadNext += 1;
					Wait(0.016, Ignore Condition);
					Wait Until(Global.visibleScore >= 100 || Global.isVipAngry, Match Time);
					If(Global.visibleScore < 100);
						Big Message(All Players(All Teams), Custom String("성공적인 영업!"));
						Global.scbRank[1] += 1;
						All Players(Team 1).score += 10;
					Else;
						Big Message(All Players(All Teams), Custom String("{0}fgFF3291FF>환상적인 영업!", Global.tx));
						Global.scbRank[0] += 1;
						All Players(Team 1).score += 30;
						All Players(Team 2).customerStatus = -1;
					End;
					Global.customerCallTime += 3;
				End;
				Global.stage += True;
				Global.totalScore[0] += Global.stageScore + Round To Integer(Match Time, To Nearest);
				Global.customerCallTime -= 0.100;
				Play Effect(All Players(Team 1), DVa Self Destruct Explosion Sound, Null, Vector(222.007, True, 165.207), 200);
				Small Message(Filtered Array(All Players(Team 1), Current Array Element.score > Null), Custom String("  급여 +${0}",
					Local Player.score));
				For Global Variable(scoringIndex, False, Number Of Players(Team 1), True);
					Global.scoringPlayer = All Players(Team 1)[Global.scoringIndex];
					If(Global.scoringPlayer.score > False);
						Global.scoringPlayer.dollar += Global.scoringPlayer.score;
						Global.scoringPlayer.scbDollar += Global.scoringPlayer.score;
					End;
				End;
			End;
		End;
		Global.isOpen = False;
		Stop Chasing Global Variable(visibleScore);
		Destroy Progress Bar HUD Text(Global.globalText[False]);
		Destroy HUD Text(Global.globalText[True]);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Left, -1, Null, Null, Null, Visible To, Default Visibility);
		Global.globalText[2] = Last Text ID;
		Modify Global Variable(upgradeList, Remove From Array By Index, False);
		If(!Count Of(Global.upgradeList));
			Global.upgradeList = Array(Hero(Mei), Hero(Juno), Hero(Junkrat), Hero(Torbjörn));
		End;
		If(Count Of(Global.STAGE_CODE[Global.stage]) && (!Global.isBonusStage || Global.failCount == 0));
			Create Dummy Bot(First Of(Global.upgradeList), Team 2, 17, Vector(196.268, True, 194.391), Null);
		End;
		Wait(0.200, Ignore Condition);
		Global.stageTime -= Global.isBonusStage ? 0 : 5;
		Loop If(Count Of(Global.STAGE_CODE[Global.stage]) && (!Global.isBonusStage || Global.failCount == 0));
		If(Global.difficulty != 3 && Global.stageMode == 3);
			Big Message(All Players(All Teams), Custom String("중간 점수 : {0}", Global.totalScore[0]));
			Global.stage = 0;
			Global.difficulty += True;
			Global.failCount = 0;
			Global.customerCallTime = Array(16, 12, 8, 4, 16)[Global.difficulty];
			Global.setUpTime = Array(120, 40, 30, 30, 120)[Global.difficulty];
			Global.scoreDecrease = Array(Array(Null, Null, Null, Null), Array(5, Null, 5, 5), Array(15, Null, 15, 35), Array(50, Null, 50, 50))
				[Global.difficulty];
			Global.despawnTime = Array(30, 25, 20, 15, 60)[Global.difficulty];
			Global.additionalScore = Array(Null, 5, 10, 15)[Global.difficulty];
			Global.failEnd = Array(5, 3, 3, 3)[Global.difficulty];
			Global.stageTime -= 30;
			Global.STAGE_CODE = Array(
				{CUSTOM_STAGE_CODE_HARD}
			);
			Big Message(All Players(All Teams), Custom String("난이도 상승! 행운을 빌어요!"));
			Loop;
		Else;
			If(!Count Of(Global.STAGE_CODE[Global.stage]));
				Global.stage = 0;
				Global.isVictory = True;
			End;
			Call Subroutine(gameSummary);
		End;
	}
}

rule("Global subroutine: Item physics")
{
	event
	{
		Subroutine;
		itemPhysics;
	}

	actions
	{
		For Global Variable(checkingIndex, False, Count Of(Global.itemPosition), True);
			If(Global.itemCode[Global.checkingIndex] != -1);
				If(Distance Between(Ray Cast Hit Position(Global.itemPosition[Global.checkingIndex],
					Global.itemPosition[Global.checkingIndex] + Global.itemVelocity[Global.checkingIndex], Null, Null, False),
					Global.itemPosition[Global.checkingIndex]) < Magnitude Of(Global.itemVelocity[Global.checkingIndex]));
					If(Y Component Of(Global.itemPosition[Global.checkingIndex]) > 1.800);
						If(Distance Between(Global.itemPosition[Global.checkingIndex], Vector(208.330, False, 186.208)) < 25);
							Global.checkingCustomerIndex = Index Of Array Value(Global.customerPosition, First Of(Filtered Array(Global.customerPosition,
								Distance Between(Current Array Element, Global.itemPosition[Global.checkingIndex]) < 2)));
							Global.checkingTableIndex = Global.customerIndex[Global.checkingCustomerIndex];
							If(Global.checkingCustomerIndex != -1 && !Global.tableCustomer[Global.checkingTableIndex].customerStatus);
								If(Global.tableOrderCode[Global.checkingTableIndex] == Global.itemCode[Global.checkingIndex]);
									disabled If(True);
									Global.tableCustomer[Global.checkingTableIndex].customerStatus = Global.itemProgress[Global.checkingIndex] == Null && (Array Contains(
										Global.currentMenu, Global.itemCode[Global.checkingIndex]) || Array Contains(Global.currentMenuWeaver, Global.itemCode[Global.checkingIndex])) ? 4 : 1;
									Global.itemLastControl[Global.checkingIndex].scbMissed += Count Of(Filtered Array(Mapped Array(Array Slice(Global.customerIndex, False, Global.checkingCustomerIndex),
										Global.tableCustomer[Current Array Element]), Current Array Element.byOrder == 1));
									Global.itemLastControl[Global.checkingIndex].score -= Count Of(Filtered Array(Mapped Array(Array Slice(Global.customerIndex, False, Global.checkingCustomerIndex),
										Global.tableCustomer[Current Array Element]), Current Array Element.byOrder == 1)) * 5;
									Filtered Array(Mapped Array(Array Slice(Global.customerIndex, False, Global.checkingCustomerIndex),
										Global.tableCustomer[Current Array Element]), Current Array Element.byOrder == 1).customerStatus = 3;
									Modify Global Variable At Index(itemCooker, Global.checkingIndex, Append To Array, Global.itemLastControl[Global.checkingIndex]);
									For Global Variable(scoringIndex, False, Count Of(Global.itemCooker[Global.checkingIndex]), True);
										Global.itemCooker[Global.checkingIndex][Global.scoringIndex].score += True;
										Global.itemCooker[Global.checkingIndex][Global.scoringIndex].score += Max(3 - Count Of(All Players(Team 1)), 0);
										Global.itemCooker[Global.checkingIndex][Global.scoringIndex].scbCooked += 1;
										All Players(Team 1).score += Global.isBonusStage ? True : False;
										All Players(Team 1).score += Global.stageMode != 3 ? True : False;
									End;
									Global.itemLastControl[Global.checkingIndex].scbSurved += 1;
									Global.itemLastControl[Global.checkingIndex].score += Global.isBonusStage ? True : False;
								Else;
									Global.tableCustomer[Global.checkingTableIndex].knifeText = Global.itemLastControl[Global.checkingIndex];
									Global.tableCustomer[Global.checkingTableIndex].customerStatus = 2;
									Global.itemLastControl[Global.checkingIndex].score -= 5;
									Global.itemLastControl[Global.checkingIndex].scbMissed += 1;
								End;
								Global.itemPosition[Global.checkingIndex] = Vector(False, False, False);
								Global.itemCode[Global.checkingIndex] = -1;
								Destroy Effect(Global.itemEffect[Global.checkingIndex]);
								Destroy In-World Text(Global.itemText[Global.checkingIndex]);
								Global.itemCount -= True;
							End;
                        Else;
                            If(Global.POT_RESULT[Global.itemCode[Global.checkingIndex]]);
                                Global.potIndex = Index Of Array Value(Global.POT_POSITION, First Of(Filtered Array(Global.POT_POSITION, Distance Between(
                                    Current Array Element, Global.itemPosition[Global.checkingIndex]) < 0.500)));
                                If(Global.potIndex != -1 && !Global.potTime[Global.potIndex]);
                                    Global.potData[Global.potIndex] = Global.POT_RESULT[Global.itemCode[Global.checkingIndex]];
                                    Global.potTime[Global.potIndex] = Max(Global.POT_TIME[Global.itemCode[Global.checkingIndex]] - Global.potPower, True);
                                    Global.potData[Global.potIndex + 2] = Append To Array(Global.itemCooker[Global.checkingIndex],
                                        Global.itemLastControl[Global.checkingIndex]);
                                    Global.itemPosition[Global.checkingIndex] = Vector(False, False, False);
                                    Global.itemCode[Global.checkingIndex] = -1;
                                    Destroy Effect(Global.itemEffect[Global.checkingIndex]);
                                    Destroy In-World Text(Global.itemText[Global.checkingIndex]);
                                    Global.itemCount -= True;
                                    If(Global.potIndex);
                                        Start Rule(pot1, Restart Rule);
                                    Else;
                                        Start Rule(pot0, Restart Rule);
                                    End;
                                    Continue;
                                End;
                            End;
                            If(Global.storageLevel > -1 && Global.itemCode[Global.checkingIndex] != False && Global.itemControled[Global.checkingIndex] == False);
                                Global.storageIndex = Index Of Array Value(Global.STORAGE_POSITION, First Of(Filtered Array(Global.STORAGE_POSITION, Distance Between(
                                    Current Array Element, Global.itemPosition[Global.checkingIndex]) < 0.200)));
                                If(Global.storageIndex != -1 && Global.storageIndex <= Global.storageLevel && Global.storageData[Global.storageIndex][0] == False);
                                    Global.storageData[Global.storageIndex] = Array(Global.itemCode[Global.checkingIndex], Global.itemDurability[Global.checkingIndex], Global.itemProgress[Global.checkingIndex], Global.itemCooker[Global.checkingIndex]);
                                    Global.itemPosition[Global.checkingIndex] = Vector(False, False, False);
                                    Global.itemCode[Global.checkingIndex] = -1;
                                    Destroy Effect(Global.itemEffect[Global.checkingIndex]);
                                    Destroy In-World Text(Global.itemText[Global.checkingIndex]);
                                    Global.itemCount -= True;
                                    Play Effect(All Players(All Teams), Sombra Translocating Sound, Null, Global.STORAGE_POSITION[Global.storageIndex], 80);
                                    Continue;
                                End;
                            End; 
                        End;
					End;
					Global.normal = Ray Cast Hit Normal(Global.itemPosition[Global.checkingIndex],
						Global.itemPosition[Global.checkingIndex] + Global.itemVelocity[Global.checkingIndex], Null, Null, False);
					If(Global.itemControled[Global.checkingIndex]);
						Global.itemPrevPosition[Global.checkingIndex] = Global.itemPosition[Global.checkingIndex];
						Global.itemPosition[Global.checkingIndex] = Ray Cast Hit Position(
							Global.itemPosition[Global.checkingIndex] + Global.normal * 0.200,
							Global.itemPosition[Global.checkingIndex] + Global.itemVelocity[Global.checkingIndex] * 3.250 + 2 * Global.normal * Dot Product(
							-1 * Global.itemVelocity[Global.checkingIndex], Global.normal) * 1.250, Null, Null, False)
							- Global.itemVelocity[Global.checkingIndex] * 0.200;
					Else;
						If(Magnitude Of(Global.itemVelocity[Global.checkingIndex]) > 0.250 && Global.IMPACT_RESULT[Global.itemCode[Global.checkingIndex]]);
							Play Effect(All Players(All Teams), Bad Explosion, Global.ITEM_COLOR[Global.itemCode[Global.checkingIndex]],
								Global.itemPosition[Global.checkingIndex], True);
							If(Count Of(Global.IMPACT_RESULT[Global.itemCode[Global.checkingIndex]]) == False);
								Play Effect(All Players(All Teams), Junkrat Frag Launcher Explosion Sound, Null, Global.itemPosition[Global.checkingIndex], 75);
								Modify Global Variable At Index(itemCooker, Global.checkingIndex, Append To Array, Global.itemLastControl[Global.checkingIndex]);
								Global.itemCode[Global.checkingIndex] = Global.IMPACT_RESULT[Global.itemCode[Global.checkingIndex]];
								Global.itemProgress[Global.checkingIndex] = Null;
							End;
						End;
						Global.itemVelocity[Global.checkingIndex] = (Global.itemVelocity[Global.checkingIndex] + 2 * Global.normal * Dot Product(
							-1 * Global.itemVelocity[Global.checkingIndex], Global.normal)) * 0.500;
					End;
					Global.itemNormal[Global.checkingIndex] = Global.normal;
				Else;
					If(Magnitude Of(Global.itemVelocity[Global.checkingIndex]) >= 0.011);
						Global.itemPosition[Global.checkingIndex] += Global.itemVelocity[Global.checkingIndex] * 0.999;
					End;
					Global.itemVelocity[Global.checkingIndex] += Down * 0.009;
				End;
			End;
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Global subroutine: Item cooking")
{
	event
	{
		Subroutine;
		itemCooking;
	}

	actions
	{
		For Global Variable(cookingIndex, False, Count Of(Global.itemPosition), True);
			If(Global.itemCode[Global.cookingIndex] != -1 && Y Component Of(Global.itemPosition[Global.cookingIndex]) > 1.750);
				If(Distance Between(Global.itemPosition[Global.cookingIndex], Vector(224.552, 2, 161.294)) < 1);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Global.itemPosition[Global.cookingIndex], 0.750);
					Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Null, Vector(224.552, 2, 161.294), 15);
					Global.itemVelocity[Global.cookingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.005 + Vector(False, 0.075,
						False);
					Global.itemDespawn[Global.cookingIndex] = Null;
					If(Global.itemStatus[Global.cookingIndex] == 2);
						Global.itemProgress[Global.cookingIndex] += Global.fryingPower;
					Else;
						Global.itemStatus[Global.cookingIndex] = 2;
						Global.itemProgress[Global.cookingIndex] = Global.fryingPower;
					End;
					If(Global.itemProgress[Global.cookingIndex] >= Global.FRYING_NEEDED[Global.itemCode[Global.cookingIndex]]);
						Global.itemCode[Global.cookingIndex] = Global.FRYING_RESULT[Global.itemCode[Global.cookingIndex]];
						Global.itemProgress[Global.cookingIndex] = Null;
						Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Null, Vector(224.552, 2, 161.294), 100);
						Modify Global Variable At Index(itemCooker, Global.cookingIndex, Append To Array, Global.itemLastControl[Global.cookingIndex]);
					End;
				Else If(Distance Between(Global.itemPosition[Global.cookingIndex], Vector(223.169, 2, 157.009)) < 0.550 || Distance Between(
						Global.itemPosition[Global.cookingIndex], Vector(224.003, 2, 157.566)) < 0.550);
					Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Global.itemPosition[Global.cookingIndex], True);
					Global.itemDespawn[Global.cookingIndex] = Null;
					If(Global.itemStatus[Global.cookingIndex] == 3);
						Global.itemProgress[Global.cookingIndex] += Global.grillingPower;
					Else;
						Global.itemStatus[Global.cookingIndex] = 3;
						Global.itemProgress[Global.cookingIndex] = Global.grillingPower;
					End;
					If(Global.itemProgress[Global.cookingIndex] >= Global.GRILLING_NEEDED[Global.itemCode[Global.cookingIndex]]);
						Global.itemCode[Global.cookingIndex] = Global.GRILLING_RESULT[Global.itemCode[Global.cookingIndex]];
						Global.itemProgress[Global.cookingIndex] = Null;
						Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Null, Vector(223.575, 2, 157.296), 50);
						Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Global.itemPosition[Global.cookingIndex], 0.500);
						Global.itemVelocity[Global.cookingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.005 + Vector(False, 0.075,
							False);
						Modify Global Variable At Index(itemCooker, Global.cookingIndex, Append To Array, Global.itemLastControl[Global.cookingIndex]);
					End;
				Else If(Distance Between(Global.itemPosition[Global.cookingIndex], Vector(224.926, 2, 158.167)) < 0.550);
					Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Global.itemPosition[Global.cookingIndex], True);
					Global.itemDespawn[Global.cookingIndex] = Null;
					Global.itemVelocity[Global.cookingIndex] += Direction From Angles(False, Random Integer(False, 360)) * 0.003 + Vector(False, 0.050,
						False);
					If(Global.itemStatus[Global.cookingIndex] == 4);
						Global.itemProgress[Global.cookingIndex] += Global.panPower;
					Else;
						Global.itemStatus[Global.cookingIndex] = 4;
						Global.itemProgress[Global.cookingIndex] = Global.panPower;
					End;
					If(Global.itemProgress[Global.cookingIndex] >= Global.PAN_NEEDED[Global.itemCode[Global.cookingIndex]]);
						Global.itemCode[Global.cookingIndex] = Global.PAN_RESULT[Global.itemCode[Global.cookingIndex]];
						Global.itemProgress[Global.cookingIndex] = Null;
						Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Null, Vector(224.926, 2, 158.167), 50);
						Modify Global Variable At Index(itemCooker, Global.cookingIndex, Append To Array, Global.itemLastControl[Global.cookingIndex]);
					End;
				End;
			End;
		End;
		Wait(True, Ignore Condition);
		Loop;
	}
}

rule("Global subroutine: Despawn item")
{
	event
	{
		Subroutine;
		despawnItem;
	}

	actions
	{
		For Global Variable(despawnIndex, False, Count Of(Global.itemCode), True);
			If(Global.itemCode[Global.despawnIndex] != -1 && !Global.itemControled[Global.despawnIndex]);
				Global.itemDespawn[Global.despawnIndex] += Global.itemCode[Global.despawnIndex] == False ? 2 : 
					(Array Contains(Global.STAGE_CODE[Global.stage], 11) || (Global.difficulty == 4 && Global.totalScore[0] == 11)) 
					&& Array Contains(Global.ADDITIONAL_MATERIAL_LIST, Global.itemCode[Global.despawnIndex]) ? 0.5 : 
					True;
				If(Global.itemDespawn[Global.despawnIndex] > Global.despawnTime);
					Destroy Effect(Global.itemEffect[Global.despawnIndex]);
					Destroy In-World Text(Global.itemText[Global.despawnIndex]);
					Global.itemPosition[Global.despawnIndex] = Down;
					Global.itemCode[Global.despawnIndex] = -1;
					Global.itemCount -= True;
				Else If(Global.itemDespawn[Global.despawnIndex] > Global.despawnTime / 3 || Global.itemProgress[Global.despawnIndex] != Null);
					Global.itemProgress[Global.despawnIndex] += 0.001;
				End;
			End;
			If((Array Contains(Global.currentMenu, Global.itemCode[Global.despawnIndex]) || Array Contains(Global.currentMenuWeaver, Global.itemCode[Global.despawnIndex]))
				&& Global.itemDespawn[Global.despawnIndex] < Global.despawnTime / 3 && Global.itemProgress[Global.despawnIndex] == Null);
				Play Effect(All Players(All Teams), Heal Target Active Effect, Global.ITEM_COLOR[Global.itemCode[Global.despawnIndex]],
					Global.itemPosition[Global.despawnIndex], 0.500);
			End;
		End;
		Wait(2, Ignore Condition);
		Loop;
	}
}

rule("Global subroutine: Call customer")
{
	event
	{
		Subroutine;
		callCustomer;
	}

	actions
	{
		Global.customerPosition = Empty Array;
		Global.customerIndex = Empty Array;
		Global.tableFilled = Mapped Array(Global.TABLE_POSITION, False);
		Global.reservedOrder = Empty Array;
		Global.spawningCustomerTable = Random Value In Array(Filtered Array(Mapped Array(Global.tableFilled,
			Current Array Element ? -1 : Current Array Index), Current Array Element != -1));
		Global.tableFilled[Global.spawningCustomerTable] = True;
		Wait(0.016, Ignore Condition);
		While(True);
			If(Global.spawningCustomerTable != -1 && Number Of Players(Team 2) < 15);
				Create Dummy Bot(First Of(Global.currentCustomer), Team 2, -1, Vector(196.268, True, 194.391), Null);
				Modify Global Variable(currentCustomer, Remove From Array By Index, False);
				If(Global.currentCustomer == Empty Array);
					Global.currentCustomer = Randomized Array(Global.CUSTOMER_LIST[Global.stage]);
				End;
				Global.tableCustomer[Global.spawningCustomerTable] = Last Created Entity;
				Last Created Entity.durability = Global.reservedOrder;
				Last Created Entity.customerPath = Global.TABLE_PATH[Global.spawningCustomerTable];
				Last Created Entity.tableIndex = Global.spawningCustomerTable;
			End;
			Global.spawningCustomerTable = Random Value In Array(Filtered Array(Mapped Array(Global.tableFilled,
				Current Array Element ? -1 : Current Array Index), Current Array Element != -1));
			Global.tableFilled[Global.spawningCustomerTable] = True;
			If(First Of(Global.currentCustomer) == Hero(Mercy));
				Global.reservedOrder = First Of(Global.loadingMenu);
				Modify Global Variable(loadingMenu, Remove From Array By Index, False);
				If(Global.loadingMenu == Empty Array);
					Global.loadingMenu = Randomized Array(Global.currentMenu);
				End;
				Wait(0.016, Ignore Condition);
				Small Message(All Players(All Teams), Custom String("  {0}fg00E697FF>#{1}{0}FGffffffFF> 테이블에 {0}fgFFFF00FF>{2}{0}FGffffffFF> 예약!", Global.tx, Global.spawningCustomerTable + True,
					Global.ITEM_NAME[Global.reservedOrder]));
				If(Array Contains(Global.STAGE_CODE[Global.stage], 11) || (Global.difficulty == 4 && Global.totalScore[0] == 11));
					If(Count Of(Global.ADDITIONAL_MATERIAL_LIST[Global.reservedOrder]) > 1);
						For Player Variable(Event Player, additionalMaterialIndex, False, Count Of(Global.ADDITIONAL_MATERIAL_LIST[Global.reservedOrder]), True);
							Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50, -70)) * 0.100,
								Global.ADDITIONAL_MATERIAL_LIST[Global.reservedOrder][Event Player.additionalMaterialIndex], Null, Null);
							Call Subroutine(createItem);
						End;
					Else;
						Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50, -70)) * 0.100,
							Global.ADDITIONAL_MATERIAL_LIST[Global.reservedOrder], Null, Null);
						Call Subroutine(createItem);
					End;
				End;
			End;
			Wait Until(Global.loadNext > 0, Count Of(Filtered Array(Global.tableFilled, Current Array Element)) + Global.customerCallTime);
			Wait Until(Count Of(Filtered Array(Global.tableFilled, Current Array Element)) <= Array(4, 5, 6, 8, 2)[Global.difficulty] || (Global.stageColor != Color(Violet) && Global.difficulty != 4), 999);
			Wait Until(Count Of(Filtered Array(Global.tableFilled, Current Array Element)) <= Array(6, 8, 8, 10, 2)[Global.difficulty], 999);
			If(Global.loadNext);
				Global.loadNext -= True;
			End;
			Abort If(!Global.isOpen || Match Time < 25);
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("Global subroutine: Pot 0")
{
	event
	{
		Subroutine;
		pot0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Sound, Null, Global.POT_POSITION[False], 80);
		While(Global.potTime[False] > 1);
			Wait(True, Ignore Condition);
			Global.potTime[False] -= True;
		End;
		Wait(True, Ignore Condition);
		Wait Until(Global.itemCount < 32, 9999);
		Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Null, Global.POT_POSITION[False], 80);
		Global.createItemData = Array(Global.POT_POSITION[False], Vector(-0.550, Random Real(0.400, 0.800), 0.840) * 0.050,
			Global.potData[False], Null, Global.potData[2]);
		Call Subroutine(createItem);
		Global.potTime[False] -= True;
	}
}

rule("Global subroutine: Pot 1")
{
	event
	{
		Subroutine;
		pot1;
	}

	actions
	{
		Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Sound, Null, Global.POT_POSITION[True], 80);
		While(Global.potTime[True] > 1);
			Wait(True, Ignore Condition);
			Global.potTime[True] -= True;
		End;
		Wait(True, Ignore Condition);
		Wait Until(Global.itemCount < 32, 9999);
		Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Null, Global.POT_POSITION[True], 80);
		Global.createItemData = Array(Global.POT_POSITION[True], Vector(-0.550, Random Real(0.400, 0.800), 0.840) * 0.050,
			Global.potData[True], Null, Global.potData[3]);
		Call Subroutine(createItem);
		Global.potTime[True] -= True;
	}
}

rule("Global subroutine: Rotating fridge")
{
	event
	{
		Subroutine;
		rotatingFridge;
	}

	actions
	{
		Wait Until(Count Of(Global.STAGE_CODE[Global.stage]) > 1, 99999);
		While(True);
			For Global Variable(fridgeRotation, False, Count Of(Global.STAGE_CODE[Global.stage]), True);
				Wait(3, Ignore Condition);
				Loop If(Count Of(Global.STAGE_CODE[Global.stage]) == 1);
				Play Effect(All Players(All Teams), Sombra Translocating Sound, Null, Vector(233.690, 2, 163.772), 100);
				Global.fridgeCode = Global.FRIDGE_LIST[Global.STAGE_CODE[Global.stage][Global.fridgeRotation]];
			End;
		End;
	}
}

rule("Host Player: Select Mode")
{
	event
	{
		Subroutine;
		selectMode;
	}

	actions
	{
		Wait Until(Is Button Held(Host Player, Button(Reload)) || Is Button Held(Host Player, Button(Jump)), 99999);
		If(Is Button Held(Host Player, Button(Reload)));
			Global.stageMode = (Global.stageMode + True) % 4;
			Wait Until(!Is Button Held(Host Player, Button(Reload)), 99999);
			Loop;
		End;
		Destroy HUD Text(Global.globalText[0]);
		Destroy HUD Text(Global.globalText[1]);
		Destroy HUD Text(Global.globalText[2]);
		Wait(0.018, Ignore Condition);
	}
}

rule("Host Player: Select Permission")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.selectPlayer = Player Closest To Reticle(Host Player, All Teams);
		If(Is Dummy Bot(Global.selectPlayer));
			Global.selectPlayer = Null;
		End;
		If(Distance Between(Host Player, Global.selectPlayer) > 5);
			Global.selectPlayer = Null;
		End;
		Wait(0.250, Ignore Condition);
		Loop;
	}
}

rule("Host Player: Set Permission")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Button Held(Host Player, Button(Ability 2)) == True;
	}

	actions
	{
		If(Global.difficulty == 4);
			All Players(Team 1).permission = 0;
			Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, Random Value In Array(Global.KNIFE), 100, Null);
			Call Subroutine(createItem);
            Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
				-70)) * 0.100, Random Value In Array(Global.PERK_LIST), 100, Null);
			Call Subroutine(createItem);
		Else If(Global.difficulty != 4 && Global.selectPlayer != Null);
			Global.selectPlayer.permission = (Global.selectPlayer.permission + True) % 3;
			Small Message(All Players(All Teams), Custom String("  {0}{1} - {2} 직책 변경!  ", Hero Icon String(Hero Of(Global.selectPlayer)),
				Global.selectPlayer, Global.permissionText[0][Global.selectPlayer.permission]));
		End;
		Global.cuttingPlayer[0] = Null;
		Global.cuttingPlayer[1] = Null;
	}
}

rule("Global subroutine: Knife Hud")
{
	event
	{
		Subroutine;
		knifeHud;
	}

	actions
	{
		If(Event Player.knifeCode == 0);
			Create HUD Text(Event Player, Custom String(" {1} - {0}% ", Round To Integer(Event Player.durability, Up), Evaluate Once(
				Global.ITEM_NAME[Global.KNIFE[Event Player.knifeCode]])), Null, Custom String("\r\n"), Right, True, Custom Color(
				255 - Event Player.durability * 0.950, Event Player.durability * 2.320, Event Player.durability * 0.270, 255), Null, Null,
				String and Color, Default Visibility);
			Event Player.knifeText = Last Text ID;
		Else If(Event Player.knifeCode == 1);
			Create HUD Text(Event Player, Custom String(" {1} - {0}% ", Round To Integer(Event Player.durability, Up), Evaluate Once(
				Global.ITEM_NAME[Global.KNIFE[Event Player.knifeCode]])), Null, Custom String("\r\n"), Right, True, Custom Color(
				255 - Event Player.durability * 1.860, Event Player.durability * 2.550, Event Player.durability * 0.870, 255), Null, Null,
				String and Color, Default Visibility);
			Event Player.knifeText = Last Text ID;
        Else If(Event Player.knifeCode == 6);
			Create HUD Text(Event Player, Custom String(" {1} - {0}% ", Round To Integer(Event Player.durability, Up), Evaluate Once(
				Global.ITEM_NAME[Global.KNIFE[Event Player.knifeCode]])), Null, Custom String("\r\n"), Right, True, Custom Color(
				Event Player.durability * 1.760, 0, Event Player.durability * 2.500, 255), Null, Null,
				String and Color, Default Visibility);
			Event Player.knifeText = Last Text ID;
		Else If(Event Player.knifeCode != -1);
			Create HUD Text(Event Player, Custom String(" {1} - {0}% ", Round To Integer(Event Player.durability, Up), Evaluate Once(
				Global.ITEM_NAME[Global.KNIFE[Event Player.knifeCode]])), Null, Custom String("\r\n"), Right, True, Custom Color(
				255 - Event Player.durability * 2.250, Event Player.durability * 2.300, Event Player.durability * 1.510, 255), Null, Null,
				String and Color, Default Visibility);
			Event Player.knifeText = Last Text ID;
		End;
	}
}

rule("Global subroutine: Perk Hud")
{
	event
	{
		Subroutine;
		perkHud;
	}

	actions
	{
		Abort If(Event Player.itemPerk == -1);
		Create HUD Text(Event Player, 
			Array(
				Ability Icon String(Hero(Roadhog), Button(Secondary Fire)),
				Ability Icon String(Hero(Ana), Button(Ultimate)),
				Ability Icon String(Hero(Baptiste), Button(Crouch)),
				Ability Icon String(Hero(Ashe), Button(Ability 2)),
				Ability Icon String(Hero(Sigma), Button(Ability 1)),
				Ability Icon String(Hero(Reinhardt), Button(Ability 1)),
				Ability Icon String(Hero(Kiriko), Button(Ability 1)),
				Ability Icon String(Hero(Baptiste), Button(Ultimate)),
				Ability Icon String(Hero(Torbjörn), Button(Ultimate)),
				Ability Icon String(Hero(Wrecking Ball), Button(Ability 1))
			)[Event Player.itemPerk], 
			Custom String("{1}{0}", Array(True, True, False, False, False, False, False, False, False, True)[Event Player.itemPerk] ? Custom String("") : Custom String("-{0}%",
			Round To Integer(Event Player.itemPerkDurability, Up)), 
			Evaluate Once(Global.ITEM_NAME[Global.PERK_LIST[Event Player.itemPerk]])), 
			Custom String("〔{0}〕", 
				Array(
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Jump)),
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Secondary Fire)),
					Input Binding String(Button(Ability 1)),
					Input Binding String(Button(Ability 1)),
					Input Binding String(Button(Ultimate)),
					Input Binding String(Button(Secondary Fire)),
					Input Binding String(Button(Ultimate))
				)[Event Player.itemPerk]
				), Right, True, Global.ITEM_COLOR[Global.PERK_LIST[Event Player.itemPerk]], Global.ITEM_COLOR[Global.PERK_LIST[Event Player.itemPerk]], Color(White),
                String and Color, Default Visibility);
		Event Player.itemPerkText = Last Text ID;
	}
}

rule("Player: Ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
        If(Event Player.itemPerk == 5);
            Apply Impulse(Event Player, Forward, 15, To Player, Cancel Contrary Motion);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player, 1);
            Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Null, Event Player, 20);
            Event Player.itemPerkDurability -= 3;
            Call Subroutine(destroyPerk);
        Else If(Event Player.itemPerk == 6);
            Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Null, Event Player, 50);
            Play Effect(All Players(All Teams), Bad Pickup Effect, Color(White), Evaluate Once(Position Of(Event Player)), 2);
            Teleport(Event Player, Vector(231.369, 2.5, 166.183));
            Set Facing(Event Player, Direction Towards(Vector(231.369, 2.5, 166.183), Vector(233.665, 2.100, 163.795)), To World);
            Wait(0.016, Ignore Condition);
            Play Effect(All Players(All Teams), Bad Pickup Effect, Color(White), Evaluate Once(Position Of(Event Player)), 2);
            Event Player.itemPerkDurability -= 5;
            Call Subroutine(destroyPerk);
        End;
	}
}

rule("Player: Double Jump")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Air(Event Player) == True;
	}

	actions
	{
        If(Event Player.itemPerk == 2);
            Wait Until(Is Button Held(Event Player, Button(Jump)) != True && Is In Air(Event Player) == True, 99999);
            Wait Until(Is Button Held(Event Player, Button(Jump)) == True || Is In Air(Event Player) == False, 99999);
            Abort If Condition Is False;
            If(Hero Of(Event Player) != Hero(Juno) || Hero Of(Event Player) != Hero(Genji));
                Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
                Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Event Player, 1);
                Play Effect(All Players(All Teams), Moira Fade Reappear Sound, Null, Event Player, 20);
            End;
            Event Player.itemPerkDurability -= 1;
            Call Subroutine(destroyPerk);
        Else;
            Disallow Button(Event Player, Button(Jump));
            Wait Until(Is In Air(Event Player) == False, 99999);
            Allow Button(Event Player, Button(Jump));
        End;
	}
}

rule("Global subroutine: Purchase Upgrade")
{
	event
	{
		Subroutine;
		purchaseUpgrade;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("  {2}{0}{1}",
            Global.UPGRADE_NAME[Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade]],
            Local Player == Event Player ? Custom String(" -${0}", Global.upgradePrice[Global.currentUpgrade][Event Player.selectedUpgrade])
            : Custom String(""), Hero Icon String(Hero Of(Event Player))));
        If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 0);
            Global.storageLevel += True;
            Wait(0.016, Ignore Condition);
            Global.upgradePrice[1] = Array(Global.storageLevel >= 7 ? 9999 : Global.upgradePrice[1][0] + 50, Global.upgradePrice[1][1], Global.upgradePrice[1][2]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 1);
            Abort If(Global.itemCount == 32);
            Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
                -70)) * 0.100, Random Value In Array(Array(8, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 16, 16, 17, 17)), 100, Null);
            Call Subroutine(createItem);
            Global.upgradePrice[1] = Array(Global.upgradePrice[1][0], Global.upgradePrice[1][1], Global.upgradePrice[1][2]);
		Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 2);
			Abort If(Global.itemCount == 32);
            Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
                -70)) * 0.100, 
{CUSTOM_HYPE_ITEM_IDX}
				, 100, Null);
            Call Subroutine(createItem);
            Global.upgradePrice[1] = Array(Global.upgradePrice[1][0], Global.upgradePrice[1][1], Global.upgradePrice[1][2]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 3);
            Global.fryingPower += 0.250;
            Global.upgradePrice[2] = Array(Global.upgradePrice[2][0] + Random Integer(100, 150), Global.upgradePrice[2][1], Global.upgradePrice[2][2], Global.upgradePrice[2][3]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 4);
            Global.potPower += 1;
            Global.upgradePrice[2] = Array(Global.upgradePrice[2][0], Global.upgradePrice[2][1] + Random Integer(200, 300), Global.upgradePrice[2][2], Global.upgradePrice[2][3]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 5);
            Global.grillingPower += 0.250;
            Global.upgradePrice[2] = Array(Global.upgradePrice[2][0], Global.upgradePrice[2][1], Global.upgradePrice[2][2] + Random Integer(100, 150), Global.upgradePrice[2][3]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 6);
            Global.panPower += 0.250;
            Global.upgradePrice[2] = Array(Global.upgradePrice[2][0], Global.upgradePrice[2][1], Global.upgradePrice[2][2], Global.upgradePrice[2][3] + Random Integer(100, 150));
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 7);
            Event Player.playerSpeed += 10;
            Global.upgradePrice[3] = Array(Global.upgradePrice[3][False] + Random Integer(25, 75), Global.upgradePrice[3][1], Global.upgradePrice[3][2]);
        Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 8);
            Global.stageTime += 5;
            Global.upgradePrice[3] = Array(Global.upgradePrice[3][False], Global.upgradePrice[3][True] + Random Integer(25, 50), Global.upgradePrice[3][2]);
		Else If(Global.UPGRADE_CODE[Global.currentUpgrade][Event Player.selectedUpgrade] == 9);
			Abort If(Global.itemCount == 32);
            Global.createItemData = Array(Vector(217.370, 2, 172.520), Direction From Angles(Random Integer(False, 360), Random Integer(-50,
                -70)) * 0.100, 18, 100, Null);
            Call Subroutine(createItem);
            Global.upgradePrice[3] = Array(Global.upgradePrice[3][False], Global.upgradePrice[3][True], Global.upgradePrice[3][2]);
        End;
	}
}

rule("Global subroutine: Save Progress")
{
	event
	{
		Subroutine;
		saveProgress;

	}

	actions
	{
		For Player Variable(Event Player, progressIndex, False, Count Of(Global.playerProgress), True);
			If(Global.playerProgress[Event Player.progressIndex][0] == Custom String("{0}", Event Player));
				Global.playerProgress[Event Player.progressIndex] = Array(
					Custom String("{0}", Event Player), 
					Event Player.dollar, 
					Event Player.permission, 
					Event Player.playerSpeed, 
					Event Player.scbCooked, 
					Event Player.scbCutted, 
					Event Player.scbSurved, 
					Event Player.scbMissed, 
					Event Player.scbDollar, 
					Event Player.knifeCode, 
					Event Player.durability, 
					Event Player.scbScore, 
					Event Player.itemPerk, 
					Event Player.itemPerkDurability
				);
				Break;
			End;
		End;
		Wait(4, Ignore Condition);
		Loop;
	}
}

rule("Global subroutine: Load Progress")
{
	event
	{
		Subroutine;
		loadProgress;
	}

	actions
	{
		For Player Variable(Event Player, progressIndex, False, Count Of(Global.playerProgress), True);
			If(Global.playerProgress[Event Player.progressIndex][0] == Custom String("{0}", Event Player));
				Event Player.dollar = Global.playerProgress[Event Player.progressIndex][1];
				Event Player.permission = Global.playerProgress[Event Player.progressIndex][2];
				Event Player.playerSpeed = Global.playerProgress[Event Player.progressIndex][3];
				Event Player.scbCooked = Global.playerProgress[Event Player.progressIndex][4];
				Event Player.scbCutted = Global.playerProgress[Event Player.progressIndex][5];
				Event Player.scbSurved = Global.playerProgress[Event Player.progressIndex][6];
				Event Player.scbMissed = Global.playerProgress[Event Player.progressIndex][7];
				Event Player.scbDollar = Global.playerProgress[Event Player.progressIndex][8];
				Event Player.knifeCode = Global.playerProgress[Event Player.progressIndex][9];
				Event Player.durability = Global.playerProgress[Event Player.progressIndex][10];
				Event Player.scbScore = Global.playerProgress[Event Player.progressIndex][11];
                Event Player.itemPerk = Global.playerProgress[Event Player.progressIndex][12];
                Event Player.itemPerkDurability = Global.playerProgress[Event Player.progressIndex][13];
				If(Event Player.playerSpeed == Null || Event Player.playerSpeed == False);
					Event Player.playerSpeed = 90;
				End;
				If(Event Player.durability == Null || Event Player.durability == False);
					Event Player.durability = 100;
				End;
				Set Move Speed(Event Player, Array Contains(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player))
					? Event Player.playerSpeed * 0.916 : Event Player.playerSpeed);
				Small Message(Event Player, Custom String("  돌아오셨군요! 이전 데이터를 불러왔습니다!  "));
				Abort;
			End;
		End;
		Modify Global Variable(playerProgress, Append To Array, Array(
				Custom String("{0}", Event Player), 
				Event Player.dollar, 
				Event Player.permission, 
				Event Player.playerSpeed, 
				Event Player.scbCooked, 
				Event Player.scbCutted, 
				Event Player.scbSurved, 
				Event Player.scbMissed, 
				Event Player.scbDollar, 
				Event Player.knifeCode, 
				Event Player.durability, 
				Event Player.scbScore, 
				Event Player.itemPerk, 
				Event Player.itemPerkDurability
			));
	}
}

rule("Player routine: serveBot")
{
    event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

    actions
    {
		Start Scaling Player(Event Player, 0.5, True);
		Start Modifying Hero Voice Lines(Event Player, 10, True);
		Start Forcing Dummy Bot Name(Event Player, Custom String("서빙볼"));
		Wait(0.5, Ignore Condition);
		Teleport(Event Player, Vector(220.86, 10.40, 166.95));
		Clear Status(Event Player, Rooted);
		Create In-World Text(Has Spawned(Event Player) ? All Players(All Teams) : Null, Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(Event Player)),
			Global.permissionText[0][1], Custom String("서빙볼")), Event Player, 1, Do Not Clip,
			Visible To Position String and Color, Global.permissionText[1][1], Default Visibility);
		Wait(0.016, Ignore Condition);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(Event Player, Team 1))), 100, To World,
			Direction and Turn Rate);
		Wait(1.5, Ignore Condition);
        Wait Until(Global.isOpen == True, 9999);
        While(Global.isOpen && Count Of(Filtered Array(All Players(Team 1), !Is Dummy Bot(Current Array Element))) < 6);
			Set Move Speed(Event Player, 100);
			Event Player.svbFindIndex = Index Of Array Value(Global.itemPosition, First Of(Sorted Array(Filtered Array(Global.itemPosition,
			Distance Between(Current Array Element, Position Of(Event Player))
			< 3.000 && !Global.itemControled[Current Array Index]), Distance Between(Current Array Element, Position Of(Event Player)))));
			Wait(0.016, Ignore Condition);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Event Player.svbFindIndex != -1 ? Global.itemPosition[Event Player.svbFindIndex] : Vector(222.08, 2.48, 165.06)), 300, To World, None);
			If(Distance Between(Position Of(Event Player), Vector(220.86, 1.00, 166.95)) > 3.000);
				Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), Vector(220.86, 1.00, 166.95)), True,
				To World, Replace existing throttle, None);
				Wait(Distance Between(Position Of(Event Player), Vector(220.86, 1.00, 166.95)) / 5.500, Ignore Condition);
			End;
			Stop Throttle In Direction(Event Player);
            If(Event Player.svbFindIndex != Empty Array);
				Wait(0.250, Ignore Condition);
                Start Holding Button(Event Player, Button(Primary Fire));
				Wait(0.250, Ignore Condition);
				If(Event Player.controlingIndex != -1);
					If(Array Contains(Global.tableOrderCode, Global.itemCode[Event Player.controlingIndex]));
						Event Player.svbTableIndex = Index Of Array Value(Global.tableOrderCode, Global.itemCode[Event Player.controlingIndex]);
						Event Player.customerPath = Global.TABLE_PATH[Event Player.svbTableIndex + 13];
						Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
						For Player Variable(Event Player, svbPathIndex, False, 2, True);
							Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
								To World, Replace existing throttle, None);
							Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath) + Vector(0, 1, 0)), 300, To World, None);
							Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / 5.500,
								Ignore Condition);
							Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
							If(!Global.isOpen);
								Call Subroutine(destroyServeBot);
							End;
						End;
						Stop Throttle In Direction(Event Player);
						Start Facing(Event Player, Direction Towards(Position Of(Event Player), Global.TABLE_POSITION[Event Player.svbTableIndex]), 300, To World, None);
						Wait(0.500, Ignore Condition);
						Stop Holding Button(Event Player, Button(Primary Fire));
						Wait(0.500, Ignore Condition);
						For Player Variable(Event Player, svbPathIndex, 2, 4, True);
							Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), True,
								To World, Replace existing throttle, None);
							Start Facing(Event Player, Direction Towards(Position Of(Event Player), First Of(Event Player.customerPath)), 300, To World, None);
							Wait(Distance Between(Position Of(Event Player), First Of(Event Player.customerPath)) / 5.500,
								Ignore Condition);
							Modify Player Variable(Event Player, customerPath, Remove From Array By Index, False);
							If(!Global.isOpen);
								Call Subroutine(destroyServeBot);
							End;
						End;
						Stop Throttle In Direction(Event Player);
					Else;
						Wait(0.016, Ignore Condition);
						Stop Holding Button(Event Player, Button(Primary Fire));
						Wait(0.032, Ignore Condition);
						Global.itemVelocity[Event Player.svbFindIndex] += Facing Direction Of(Event Player) * 0.130;
					End;
				End;
                Stop Holding Button(Event Player, Button(Primary Fire));
            End;
            Wait(0.700, Ignore Condition);
        End;
		Call Subroutine(destroyServeBot);
    }
}

rule("Player subroutine: Destroy ServeBot")
{
	event
	{
		Subroutine;
		destroyServeBot;
	}

	actions
	{
		Stop Throttle In Direction(Event Player);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Clear Status(Event Player, Phased Out);
		Set Status(Event Player, Null, Hacked, 3);
		Wait(0.016, Ignore Condition);
		Set Status(Event Player, Null, Phased Out, 9999);
		Wait(3, Ignore Condition);
		Destroy Dummy Bot(Team 1, Slot Of(Event Player));
		Abort;
	}

}

rule("Global subroutine: Scoreboard")
{
	event
	{
		Subroutine;
		gameSummary;
	}

	actions
	{
		Global.isOpen = False;
		Global.skipSetup = False;
		Set Status(All Players(Team 1), Null, Rooted, 9999);
		Destroy All HUD Text;
		Destroy All In-World Text;
		Destroy All Progress Bar HUD Text;
		Disable Game Mode HUD(All Players(All Teams));
		Wait(2, Ignore Condition);
		Start Camera(All Players(Team 1), Ray Cast Hit Position(Local Player + Vector(0, 2 + 0.100, 0), Local Player + Vector(0, 2 + 0.100,
			0) + Facing Direction Of(Local Player) * (-0.500 + 1 * -3), Null, All Players(All Teams), False), Local Player + (Eye Position(
			Local Player) - Local Player) + Facing Direction Of(Local Player) * 20, 20);
		Wait(0.100, Ignore Condition);
		Start Camera(All Players(Team 1), Vector(206.991, 2, 188.239), Vector(222.559, 4.963, 164.417), 6);
		Wait(0.100, Ignore Condition);
		Teleport(All Players(Team 1)[4], Vector(207.200, 2.400, 181.990));
		Teleport(All Players(Team 1)[2], Vector(209.040, 2.400, 181.850));
		Teleport(All Players(Team 1)[0], Vector(210.380, 2.400, 182.040));
		Teleport(All Players(Team 1)[1], Vector(211.340, 2.400, 182.700));
		Teleport(All Players(Team 1)[3], Vector(212.080, 2.400, 183.830));
		Teleport(All Players(Team 1)[5], Vector(212.340, 2.400, 185.510));
		Set Facing(All Players(Team 1), Direction Towards(Vector(210.380, 2.400, 182.040), Vector(206.991, 2, 188.239)), To World);
		Wait(1.800, Ignore Condition);
		Create In-World Text(All Players(Team 1), Custom String("{CUSTOM_TITLE} : 〔{0}〕", Global.totalScore[0]), Vector(210.140, Sine From Degrees(Min(
			Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 18) * 5.750, 183.430), 3, Do Not Clip,
			Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 0, 255),
			Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		If(Global.stageMode != 4);
			If(Global.totalScore[0] > Global.totalScore[Global.stageMode][0]);
				Create In-World Text(All Players(Team 1), Custom String("최고 기록 갱신!! 이 화면을 캡처하여 https://ow-restaurant.com 로 보내주세요"), Vector(210.140,
					Sine From Degrees(Min(Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 14) * 5.750, 183.430), 1, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150,
					Sine From Radians(Total Time Elapsed * 9) * 50 + 200, 255), Default Visibility);
				Play Effect(All Players(Team 1), DVa Self Destruct Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
			Else;
				Create In-World Text(All Players(Team 1), Custom String("최고 기록 : 〔{0}〕", Custom String("{0} : {1}", Global.totalScore[Global.stageMode][1], Global.totalScore[Global.stageMode][0])), Vector(210.140,
					Sine From Degrees(Min(Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 14) * 5.750, 183.430), 1, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, 0, 0, 255), Default Visibility);
			End;
		End;
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("{0} 〔{2}〕\r\n  {1}", Hero Icon String(Hero Of(
			Local Player)), Local Player, Global.permissionText[0][Local Player.permission]), Vector(207.140, Sine From Degrees(Min(
			Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 8) * 5.750, 183.430), 2.500, Do Not Clip,
			Visible To Position String and Color, Global.permissionText[1][Local Player.permission], Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("시간 : 〔{0}〕\r\n모드: 〔{1}〕\r\n결과: 〔{2}〕",
			Evaluate Once(Custom String("{0}시간{1}분{2}초", Round To Integer(Total Time Elapsed / 3600, Down), Round To Integer(
			Total Time Elapsed / 60 % 60, Down), Round To Integer(Total Time Elapsed % 60, Down))), Custom String("{0}", Array(Custom String("연습 모드"),
			Custom String("캐주얼 다이닝"), Custom String("파인 다이닝"), Custom String("마스터쿡 챌린지"))[Global.stageMode]), Custom String("{0} / {1}", Array(Custom String("수습 난이도"),
			Custom String("숙련 난이도"), Custom String("전문 난이도"), Custom String("Hell's Kitchen"))[Global.difficulty],
			Global.isVictory ? Custom String("클리어!") : Custom String("Stage {0} 에서 실패", Global.stage + 1))), Vector(214.140,
			Sine From Degrees(Min(Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 8) * 7.750, 183.430), 2, Do Not Clip,
			Visible To Position String and Color, Custom Color(Array(140, 110, 255, 255, 255)[Global.difficulty], Array(255, 180, 225, 120,
			50)[Global.difficulty], Array(180, 255, 120, 120, 145)[Global.difficulty], 255), Default Visibility);
		Wait(6, Ignore Condition);
		For Global Variable(cookingIndex, False, 6, True);
			All Players(Team 1)[Global.cookingIndex].scbScore += All Players(Team 1)[Global.cookingIndex].scbCooked + All Players(Team 1)[Global.cookingIndex].scbSurved - (All Players(Team 1)[Global.cookingIndex].scbMissed * 5);
		End;
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("개인 총 수입 : 〔{0}〕\r\n개인 활약 점수 : 〔{1}〕", Local Player.scbDollar, Local Player.scbScore),
			Vector(207.140, 3, 183.430), 2, Do Not Clip, Visible To Position String and Color, Custom Color(255, 255, Sine From Radians(
			Total Time Elapsed * 8) * 105 + 150, 255), Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("성공한 영업 : 〔{0}〕",
			Global.scbRank[0] + Global.scbRank[1] + Global.scbRank[2]), Vector(214.140, 3.800, 185.430), 2, Do Not Clip,
			Visible To Position String and Color, Color(Lime Green), Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("요리에 기여함 : 〔{0}〕\r\n칼질한 횟수 : 〔{1}〕",
			Local Player.scbCooked, Local Player.scbCutted), Vector(207.140, 2.200, 183.430), 1.500, Do Not Clip,
			Visible To Position String and Color, Custom Color(255, 255, 255, 255), Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("환상적인 영업 : 〔{0}〕\r\n성공적인 영업 : 〔{1}〕\r\n실패한 영업 : 〔{2}〕", Global.scbRank[0], Global.scbRank[1], Global.scbRank[3]), Vector(
			214.140, 2.900, 185.430), 1.500, Do Not Clip, Visible To Position String and Color, Custom Color(0, 220, 0, 255),
			Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("서빙 성공 : 〔{0}〕", Local Player.scbSurved), Vector(
			207.140, 2.000, 183.430), 1.500, Do Not Clip, Visible To Position String and Color, Custom Color(255, 255, 255, 255),
			Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("전체 서빙 성공 : 〔{0}〕\r\n전체 서빙 실패 : 〔{1}〕",
			Global.scbSurved[4], Global.scbSurved[5]), Vector(214.140, 1.900, 185.430), 2, Do Not Clip,
			Visible To Position String and Color, Color(Rose), Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("서빙 실수 : 〔{0}〕", Local Player.scbMissed), Vector(
			207.140, 1.800, 183.430), 1.500, Do Not Clip, Visible To Position String and Color, Custom Color(255, 255, 255, 255),
			Default Visibility);
		Create In-World Text(Global.skipSetup ? Null : All Players(Team 1), Custom String("환상적인 서빙 : 〔{0}〕\r\n신속한 서빙 : 〔{1}〕\r\n완성도 있는 요리 : 〔{2}〕", Global.scbSurved[0], Global.scbSurved[1], Global.scbSurved[2]),
			Vector(214.140, 1, 185.430), 1.500, Do Not Clip, Visible To Position String and Color, Color(Sky Blue), Default Visibility);
		Play Effect(All Players(Team 1), Ring Explosion Sound, Null, Vector(206.991, 2, 188.239), 200);
		Wait(0.500, Ignore Condition);
		If(Global.stageMode != 4);
			If(Global.isVictory && (Global.totalScore[0] > (Global.stageMode == 3 ? 13000 : 6000)));
				Create In-World Text(All Players(Team 1), Custom String("평가 : 〔★★★★★★★〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[0], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[1], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[2], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[3], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[4], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[5], 1, Visible To Position and Radius);
			Else If(Global.isVictory && (Global.totalScore[0] > (Global.stageMode == 3 ? 11500 : 5500)));
				Create In-World Text(All Players(Team 1), Custom String("평가 : 〔★★★★★★〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[0], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[1], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[2], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[3], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[4], 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), All Players(Team 1)[5], 1, Visible To Position and Radius);
			Else If(Global.isVictory && (Global.totalScore[0] > (Global.stageMode == 3 ? 10000 : 5000)));
				Create In-World Text(All Players(Team 1), Custom String("평가 : 〔★★★★★〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else If(Global.totalScore[0] > (Global.stageMode == 3 ? 8500 : 4500));
				Create In-World Text(All Players(Team 1), Custom String("평가 : 〔★★★★☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else If(Global.totalScore[0] > (Global.stageMode == 3 ? 7000 : 4000));
				Create In-World Text(All Players(Team 1), Custom String("평가 : 〔★★★☆☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else If(Global.totalScore[0] > (Global.stageMode == 3 ? 5000 : 3000));
				Create In-World Text(All Players(Team 1), Custom String("평가 : 〔★★☆☆☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else If(Global.totalScore[0] > (Global.stageMode == 3 ? 2500 : 1500));
				Create In-World Text(All Players(Team 1), Custom String("평가 : 〔★☆☆☆☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			Else;
				Create In-World Text(All Players(Team 1), Custom String("평가 : 〔☆☆☆☆☆〕"), Vector(210.140, Sine From Degrees(Min(
					Total Time Elapsed - Evaluate Once(Total Time Elapsed), 5) * 2) * 3, 183.430), 3, Do Not Clip,
					Visible To Position String and Color, Custom Color(255, Sine From Radians(Total Time Elapsed * 8) * 105 + 150, 255, 255),
					Default Visibility);
			End;
		End;
		Destroy All Dummy Bots;
		Wait(10, Ignore Condition);
		Global.skipSetup = True;
		Set Status(All Players(Team 1), Null, Rooted, 9999);
		Teleport(All Players(Team 1)[4], Vector(207.200, 2.400, 181.990));
		Teleport(All Players(Team 1)[2], Vector(209.040, 2.400, 181.850));
		Teleport(All Players(Team 1)[0], Vector(210.380, 2.400, 182.040));
		Teleport(All Players(Team 1)[1], Vector(211.340, 2.400, 182.700));
		Teleport(All Players(Team 1)[3], Vector(212.080, 2.400, 183.830));
		Teleport(All Players(Team 1)[5], Vector(212.340, 2.400, 185.510));
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[0]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[0])), Global.permissionText[0][All Players(Team 1)
				[0].permission], All Players(Team 1)[0]), Custom String("개인 총 수입 : 〔{0}〕\r\n개인 활약 점수 : 〔{1}〕\r\n요리에 기여함 : 〔{2}〕", All Players(Team 1)[0].scbDollar, All Players(Team 1)[0].scbScore,
				All Players(Team 1)[0].scbCooked), Custom String("서빙 성공 : 〔{0}〕\r\n서빙 실수 : 〔{1}〕", All Players(Team 1)[0].scbSurved,
				All Players(Team 1)[0].scbMissed)), All Players(Team 1)[0], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[0].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[1]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[1])), Global.permissionText[0][All Players(Team 1)
				[1].permission], All Players(Team 1)[1]), Custom String("개인 총 수입 : 〔{0}〕\r\n개인 활약 점수 : 〔{1}〕\r\n요리에 기여함 : 〔{2}〕", All Players(Team 1)[1].scbDollar, All Players(Team 1)[1].scbScore,
				All Players(Team 1)[1].scbCooked), Custom String("서빙 성공 : 〔{0}〕\r\n서빙 실수 : 〔{1}〕", All Players(Team 1)[1].scbSurved,
				All Players(Team 1)[1].scbMissed)), All Players(Team 1)[1], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[1].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[2]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[2])), Global.permissionText[0][All Players(Team 1)
				[2].permission], All Players(Team 1)[2]), Custom String("개인 총 수입 : 〔{0}〕\r\n개인 활약 점수 : 〔{1}〕\r\n요리에 기여함 : 〔{2}〕", All Players(Team 1)[2].scbDollar, All Players(Team 1)[2].scbScore,
				All Players(Team 1)[2].scbCooked), Custom String("서빙 성공 : 〔{0}〕\r\n서빙 실수 : 〔{1}〕", All Players(Team 1)[2].scbSurved,
				All Players(Team 1)[2].scbMissed)), All Players(Team 1)[2], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[2].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[3]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[3])), Global.permissionText[0][All Players(Team 1)
				[3].permission], All Players(Team 1)[3]), Custom String("개인 총 수입 : 〔{0}〕\r\n개인 활약 점수 : 〔{1}〕\r\n요리에 기여함 : 〔{2}〕", All Players(Team 1)[3].scbDollar, All Players(Team 1)[3].scbScore,
				All Players(Team 1)[3].scbCooked), Custom String("서빙 성공 : 〔{0}〕\r\n서빙 실수 : 〔{1}〕", All Players(Team 1)[3].scbSurved,
				All Players(Team 1)[3].scbMissed)), All Players(Team 1)[3], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[3].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[4]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[4])), Global.permissionText[0][All Players(Team 1)
				[4].permission], All Players(Team 1)[4]), Custom String("개인 총 수입 : 〔{0}〕\r\n개인 활약 점수 : 〔{1}〕\r\n요리에 기여함 : 〔{2}〕", All Players(Team 1)[4].scbDollar, All Players(Team 1)[4].scbScore,
				All Players(Team 1)[4].scbCooked), Custom String("서빙 성공 : 〔{0}〕\r\n서빙 실수 : 〔{1}〕", All Players(Team 1)[4].scbSurved,
				All Players(Team 1)[4].scbMissed)), All Players(Team 1)[4], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[4].permission], Default Visibility);
		Create In-World Text(Global.skipSetup && Has Spawned(All Players(Team 1)[5]) ? All Players(All Teams) : Null, Custom String("{0}\r\n\r\n{1}\r\n{2}", Custom String("{0}{1}\r\n{2}", Hero Icon String(Hero Of(All Players(Team 1)[5])), Global.permissionText[0][All Players(Team 1)
				[5].permission], All Players(Team 1)[5]), Custom String("개인 총 수입 : 〔{0}〕\r\n개인 활약 점수 : 〔{1}〕\r\n요리에 기여함 : 〔{2}〕", All Players(Team 1)[5].scbDollar, All Players(Team 1)[5].scbScore,
				All Players(Team 1)[5].scbCooked), Custom String("서빙 성공 : 〔{0}〕\r\n서빙 실수 : 〔{1}〕", All Players(Team 1)[5].scbSurved,
				All Players(Team 1)[5].scbMissed)), All Players(Team 1)[5], 1, Do Not Clip, Visible To Position String and Color,
				Global.permissionText[1][All Players(Team 1)[5].permission], Default Visibility);
		Start Camera(All Players(Team 1), Vector(207.710, 2.500, 187.110), Vector(222.559, 4.963, 164.417), 6);
		Wait(7, Ignore Condition);
		Start Camera(All Players(Team 1), Vector(206.991, 2, 188.239), Vector(222.559, 4.963, 164.417), 6);
		Wait(7, Ignore Condition);
		Start Camera(All Players(Team 1), Ray Cast Hit Position(Local Player + Vector(0, 2 + 0.100, 0), Local Player + Vector(0, 2 + 0.100,
			0) + Facing Direction Of(Local Player) * (-0.500 - 3), Null, All Players(All Teams), False), Local Player + (Eye Position(
			Local Player) - Local Player) + Facing Direction Of(Local Player) * 20, 20);
		Clear Status(All Players(Team 1), Rooted);
		Wait(60, Ignore Condition);
		Set Status(All Players(Team 1), Null, Rooted, 9999);
		Wait(0.500, Ignore Condition);
		Global.skipSetup = False;
		Set Invisible(All Players(Team 1), All);
		Teleport(All Players(Team 1)[4], Vector(207.200, 2.400, 181.990));
		Teleport(All Players(Team 1)[2], Vector(209.040, 2.400, 181.850));
		Teleport(All Players(Team 1)[0], Vector(210.380, 2.400, 182.040));
		Teleport(All Players(Team 1)[1], Vector(211.340, 2.400, 182.700));
		Teleport(All Players(Team 1)[3], Vector(212.080, 2.400, 183.830));
		Teleport(All Players(Team 1)[5], Vector(212.340, 2.400, 185.510));
		Start Camera(All Players(Team 1), Vector(206.991, 2, 188.239), Vector(222.559, 4.963, 164.417), 6);
		Wait(30, Ignore Condition);
		If(Global.isVictory || Global.isBonusStage);
			Declare Team Victory(Team 1);
		Else;
			Declare Team Victory(Team 2);
		End;
		Wait(2.750, Ignore Condition);
		Restart Match;
	}
}