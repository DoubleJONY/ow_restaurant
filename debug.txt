rule("test code")
{
	event
	{
		Ongoing - Global;
	}

	condition
	{
		Is Button Held(Host Player, Button(Ultimate)) == True;
	}

	action
	{
		If(Is Button Held(Host Player, Button(Melee)));
			Abort If(!Global.isOpen);
			Global.systemScore += 100;
			Small Message(All Players(All Teams), Custom String("테스트 +100%"));
		Else If(Is Button Held(Host Player, Button(Ability 2)));
			Global.stage = 14;
			Create HUD Text(All Players(All Teams), Count Of(Global.playerProgress), Global.playerProgress[0][0], Global.playerProgress[1][0],
						Top, 2.5, Color(Yellow), Color(Yellow), Color(Yellow), Visible To String and Color, Default Visibility);
        Else;
			Host Player.dollar += 100000;
			Small Message(Host Player, Custom String("테스트 +$100000"));
		End;
	}
}

rule("test code")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Button Held(Host Player, Button(Ultimate)) == True;
	}

	actions
	{
		If(Is Button Held(Host Player, Button(Melee)));
			Abort If(!Global.isOpen);
			Global.systemScore += 100;
			Small Message(All Players(All Teams), Custom String("테스트 +100%"));
		Else If(Is Button Held(Host Player, Button(Ability 2)));
			Enable Inspector Recording;
			Create HUD Text(All Players(All Teams), Custom String("{0} / {1} / {2}", Global.ITEM_NAME[Global.itemCode[Host Player.controlingIndex]], Global.itemCooker[Host Player.controlingIndex][1], Global.itemCooker[Host Player.controlingIndex][2]),
			Custom String("{0} / {1} / {2}", Global.itemCooker[Host Player.controlingIndex][3], Global.itemCooker[Host Player.controlingIndex][4], Global.itemCooker[Host Player.controlingIndex][5]), Null,
						Top, 2.5, Color(Yellow), Color(Yellow), Color(Yellow), Visible To String and Color, Default Visibility);
        Else;
			Host Player.dollar += 100000;
			Small Message(Host Player, Custom String("테스트 +$100000"));
		End;
	}
}